
Ex03 - LCD2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  000005f4  00000668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001107  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080f  00000000  00000000  000018ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000895  00000000  00000000  000020ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00002950  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000438  00000000  00000000  00002a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bde  00000000  00000000  00002e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00003a76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 bf 02 	call	0x57e	; 0x57e <main>
  8e:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <pinChange>:

#include "lcd16x2_4b.h"

void pinChange(int a, int b)
{
	if(b == 0)
  96:	67 2b       	or	r22, r23
  98:	09 f0       	breq	.+2      	; 0x9c <pinChange+0x6>
  9a:	a1 c0       	rjmp	.+322    	; 0x1de <pinChange+0x148>
	{
		if(a == eS_PORTB0)
  9c:	8a 30       	cpi	r24, 0x0A	; 10
  9e:	91 05       	cpc	r25, r1
  a0:	21 f4       	brne	.+8      	; 0xaa <pinChange+0x14>
		  PORTB &= ~(1<<PB0);  
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	8e 7f       	andi	r24, 0xFE	; 254
  a6:	85 b9       	out	0x05, r24	; 5
  a8:	08 95       	ret
		else if(a == eS_PORTB1)
  aa:	8b 30       	cpi	r24, 0x0B	; 11
  ac:	91 05       	cpc	r25, r1
  ae:	21 f4       	brne	.+8      	; 0xb8 <pinChange+0x22>
		  PORTB &= ~(1<<PB1);
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8d 7f       	andi	r24, 0xFD	; 253
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	08 95       	ret
		else if(a == eS_PORTB2)
  b8:	8c 30       	cpi	r24, 0x0C	; 12
  ba:	91 05       	cpc	r25, r1
  bc:	21 f4       	brne	.+8      	; 0xc6 <pinChange+0x30>
		  PORTB &= ~(1<<PB2);  
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	8b 7f       	andi	r24, 0xFB	; 251
  c2:	85 b9       	out	0x05, r24	; 5
  c4:	08 95       	ret
		else if(a == eS_PORTB3)
  c6:	8d 30       	cpi	r24, 0x0D	; 13
  c8:	91 05       	cpc	r25, r1
  ca:	21 f4       	brne	.+8      	; 0xd4 <pinChange+0x3e>
		  PORTB &= ~(1<<PB3);  
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	87 7f       	andi	r24, 0xF7	; 247
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	08 95       	ret
		else if(a == eS_PORTB4)
  d4:	8e 30       	cpi	r24, 0x0E	; 14
  d6:	91 05       	cpc	r25, r1
  d8:	21 f4       	brne	.+8      	; 0xe2 <pinChange+0x4c>
		  PORTB &= ~(1<<PB4);  
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	8f 7e       	andi	r24, 0xEF	; 239
  de:	85 b9       	out	0x05, r24	; 5
  e0:	08 95       	ret
		else if(a == eS_PORTB5)
  e2:	8f 30       	cpi	r24, 0x0F	; 15
  e4:	91 05       	cpc	r25, r1
  e6:	21 f4       	brne	.+8      	; 0xf0 <pinChange+0x5a>
		  PORTB &= ~(1<<PB5);  
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	8f 7d       	andi	r24, 0xDF	; 223
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	08 95       	ret
		else if(a == eS_PORTB6)
  f0:	80 31       	cpi	r24, 0x10	; 16
  f2:	91 05       	cpc	r25, r1
  f4:	21 f4       	brne	.+8      	; 0xfe <pinChange+0x68>
		  PORTB &= ~(1<<PB6);  
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	8f 7b       	andi	r24, 0xBF	; 191
  fa:	85 b9       	out	0x05, r24	; 5
  fc:	08 95       	ret
		else if(a == eS_PORTB7)
  fe:	81 31       	cpi	r24, 0x11	; 17
 100:	91 05       	cpc	r25, r1
 102:	21 f4       	brne	.+8      	; 0x10c <pinChange+0x76>
		  PORTB &= ~(1<<PB7);
 104:	85 b1       	in	r24, 0x05	; 5
 106:	8f 77       	andi	r24, 0x7F	; 127
 108:	85 b9       	out	0x05, r24	; 5
 10a:	08 95       	ret
		else if(a == eS_PORTC0)
 10c:	84 31       	cpi	r24, 0x14	; 20
 10e:	91 05       	cpc	r25, r1
 110:	21 f4       	brne	.+8      	; 0x11a <pinChange+0x84>
		  PORTC &= ~(1<<PC0);   
 112:	88 b1       	in	r24, 0x08	; 8
 114:	8e 7f       	andi	r24, 0xFE	; 254
 116:	88 b9       	out	0x08, r24	; 8
 118:	08 95       	ret
		else if(a == eS_PORTC1)
 11a:	85 31       	cpi	r24, 0x15	; 21
 11c:	91 05       	cpc	r25, r1
 11e:	21 f4       	brne	.+8      	; 0x128 <pinChange+0x92>
		  PORTC &= ~(1<<PC1); 
 120:	88 b1       	in	r24, 0x08	; 8
 122:	8d 7f       	andi	r24, 0xFD	; 253
 124:	88 b9       	out	0x08, r24	; 8
 126:	08 95       	ret
		else if(a == eS_PORTC2)
 128:	86 31       	cpi	r24, 0x16	; 22
 12a:	91 05       	cpc	r25, r1
 12c:	21 f4       	brne	.+8      	; 0x136 <pinChange+0xa0>
		  PORTC &= ~(1<<PC2);
 12e:	88 b1       	in	r24, 0x08	; 8
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	88 b9       	out	0x08, r24	; 8
 134:	08 95       	ret
		else if(a == eS_PORTC3)
 136:	87 31       	cpi	r24, 0x17	; 23
 138:	91 05       	cpc	r25, r1
 13a:	21 f4       	brne	.+8      	; 0x144 <pinChange+0xae>
		  PORTC &= ~(1<<PC3);   
 13c:	88 b1       	in	r24, 0x08	; 8
 13e:	87 7f       	andi	r24, 0xF7	; 247
 140:	88 b9       	out	0x08, r24	; 8
 142:	08 95       	ret
		else if(a == eS_PORTC4)
 144:	88 31       	cpi	r24, 0x18	; 24
 146:	91 05       	cpc	r25, r1
 148:	21 f4       	brne	.+8      	; 0x152 <pinChange+0xbc>
		  PORTC &= ~(1<<PC4);  
 14a:	88 b1       	in	r24, 0x08	; 8
 14c:	8f 7e       	andi	r24, 0xEF	; 239
 14e:	88 b9       	out	0x08, r24	; 8
 150:	08 95       	ret
		else if(a == eS_PORTC5)
 152:	89 31       	cpi	r24, 0x19	; 25
 154:	91 05       	cpc	r25, r1
 156:	21 f4       	brne	.+8      	; 0x160 <pinChange+0xca>
		  PORTC &= ~(1<<PC5);  
 158:	88 b1       	in	r24, 0x08	; 8
 15a:	8f 7d       	andi	r24, 0xDF	; 223
 15c:	88 b9       	out	0x08, r24	; 8
 15e:	08 95       	ret
        else if(a == eS_PORTC6)
 160:	8a 31       	cpi	r24, 0x1A	; 26
 162:	91 05       	cpc	r25, r1
 164:	21 f4       	brne	.+8      	; 0x16e <pinChange+0xd8>
          PORTC &= ~(1<<PC6);		
 166:	88 b1       	in	r24, 0x08	; 8
 168:	8f 7b       	andi	r24, 0xBF	; 191
 16a:	88 b9       	out	0x08, r24	; 8
 16c:	08 95       	ret
		else if(a == eS_PORTD0)
 16e:	8e 31       	cpi	r24, 0x1E	; 30
 170:	91 05       	cpc	r25, r1
 172:	21 f4       	brne	.+8      	; 0x17c <pinChange+0xe6>
		  PORTD &= ~(1<<PD0);
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	8e 7f       	andi	r24, 0xFE	; 254
 178:	8b b9       	out	0x0b, r24	; 11
 17a:	08 95       	ret
		else if(a == eS_PORTD1)
 17c:	8f 31       	cpi	r24, 0x1F	; 31
 17e:	91 05       	cpc	r25, r1
 180:	21 f4       	brne	.+8      	; 0x18a <pinChange+0xf4>
		  PORTD &= ~(1<<PD1);  
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	8d 7f       	andi	r24, 0xFD	; 253
 186:	8b b9       	out	0x0b, r24	; 11
 188:	08 95       	ret
		else if(a == eS_PORTD2)
 18a:	80 32       	cpi	r24, 0x20	; 32
 18c:	91 05       	cpc	r25, r1
 18e:	21 f4       	brne	.+8      	; 0x198 <pinChange+0x102>
		  PORTD &= ~(1<<PD2);
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	8b 7f       	andi	r24, 0xFB	; 251
 194:	8b b9       	out	0x0b, r24	; 11
 196:	08 95       	ret
		else if(a == eS_PORTD3)
 198:	81 32       	cpi	r24, 0x21	; 33
 19a:	91 05       	cpc	r25, r1
 19c:	21 f4       	brne	.+8      	; 0x1a6 <pinChange+0x110>
		  PORTD &= ~(1<<PD3);
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	87 7f       	andi	r24, 0xF7	; 247
 1a2:	8b b9       	out	0x0b, r24	; 11
 1a4:	08 95       	ret
		else if(a == eS_PORTD4)
 1a6:	82 32       	cpi	r24, 0x22	; 34
 1a8:	91 05       	cpc	r25, r1
 1aa:	21 f4       	brne	.+8      	; 0x1b4 <pinChange+0x11e>
		  PORTD &= ~(1<<PD4);
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	8f 7e       	andi	r24, 0xEF	; 239
 1b0:	8b b9       	out	0x0b, r24	; 11
 1b2:	08 95       	ret
		else if(a == eS_PORTD5)
 1b4:	83 32       	cpi	r24, 0x23	; 35
 1b6:	91 05       	cpc	r25, r1
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <pinChange+0x12c>
		  PORTD &= ~(1<<PD5);
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	8f 7d       	andi	r24, 0xDF	; 223
 1be:	8b b9       	out	0x0b, r24	; 11
 1c0:	08 95       	ret
		else if(a == eS_PORTD6)
 1c2:	84 32       	cpi	r24, 0x24	; 36
 1c4:	91 05       	cpc	r25, r1
 1c6:	21 f4       	brne	.+8      	; 0x1d0 <pinChange+0x13a>
		  PORTD &= ~(1<<PD6);   
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	8f 7b       	andi	r24, 0xBF	; 191
 1cc:	8b b9       	out	0x0b, r24	; 11
 1ce:	08 95       	ret
		else if(a == eS_PORTD7)
 1d0:	85 97       	sbiw	r24, 0x25	; 37
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <pinChange+0x140>
 1d4:	a3 c0       	rjmp	.+326    	; 0x31c <pinChange+0x286>
		  PORTD &= ~(1<<PD7);           
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	8f 77       	andi	r24, 0x7F	; 127
 1da:	8b b9       	out	0x0b, r24	; 11
 1dc:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTB0)
 1de:	8a 30       	cpi	r24, 0x0A	; 10
 1e0:	91 05       	cpc	r25, r1
 1e2:	21 f4       	brne	.+8      	; 0x1ec <pinChange+0x156>
	  	  PORTB |= (1<<PB0);
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	81 60       	ori	r24, 0x01	; 1
 1e8:	85 b9       	out	0x05, r24	; 5
 1ea:	08 95       	ret
		else if(a == eS_PORTB1)
 1ec:	8b 30       	cpi	r24, 0x0B	; 11
 1ee:	91 05       	cpc	r25, r1
 1f0:	21 f4       	brne	.+8      	; 0x1fa <pinChange+0x164>
		  PORTB |= (1<<PB1);
 1f2:	85 b1       	in	r24, 0x05	; 5
 1f4:	82 60       	ori	r24, 0x02	; 2
 1f6:	85 b9       	out	0x05, r24	; 5
 1f8:	08 95       	ret
		else if(a == eS_PORTB2)
 1fa:	8c 30       	cpi	r24, 0x0C	; 12
 1fc:	91 05       	cpc	r25, r1
 1fe:	21 f4       	brne	.+8      	; 0x208 <pinChange+0x172>
		  PORTB |= (1<<PB2);
 200:	85 b1       	in	r24, 0x05	; 5
 202:	84 60       	ori	r24, 0x04	; 4
 204:	85 b9       	out	0x05, r24	; 5
 206:	08 95       	ret
		else if(a == eS_PORTB3)
 208:	8d 30       	cpi	r24, 0x0D	; 13
 20a:	91 05       	cpc	r25, r1
 20c:	21 f4       	brne	.+8      	; 0x216 <pinChange+0x180>
		  PORTB |= (1<<PB3);
 20e:	85 b1       	in	r24, 0x05	; 5
 210:	88 60       	ori	r24, 0x08	; 8
 212:	85 b9       	out	0x05, r24	; 5
 214:	08 95       	ret
		else if(a == eS_PORTB4)
 216:	8e 30       	cpi	r24, 0x0E	; 14
 218:	91 05       	cpc	r25, r1
 21a:	21 f4       	brne	.+8      	; 0x224 <pinChange+0x18e>
		  PORTB |= (1<<PB4);
 21c:	85 b1       	in	r24, 0x05	; 5
 21e:	80 61       	ori	r24, 0x10	; 16
 220:	85 b9       	out	0x05, r24	; 5
 222:	08 95       	ret
		else if(a == eS_PORTB5)
 224:	8f 30       	cpi	r24, 0x0F	; 15
 226:	91 05       	cpc	r25, r1
 228:	21 f4       	brne	.+8      	; 0x232 <pinChange+0x19c>
		  PORTB |= (1<<PB5);
 22a:	85 b1       	in	r24, 0x05	; 5
 22c:	80 62       	ori	r24, 0x20	; 32
 22e:	85 b9       	out	0x05, r24	; 5
 230:	08 95       	ret
		else if(a == eS_PORTB6)
 232:	80 31       	cpi	r24, 0x10	; 16
 234:	91 05       	cpc	r25, r1
 236:	21 f4       	brne	.+8      	; 0x240 <pinChange+0x1aa>
		  PORTB |= (1<<PB6);
 238:	85 b1       	in	r24, 0x05	; 5
 23a:	80 64       	ori	r24, 0x40	; 64
 23c:	85 b9       	out	0x05, r24	; 5
 23e:	08 95       	ret
		else if(a == eS_PORTB7)
 240:	81 31       	cpi	r24, 0x11	; 17
 242:	91 05       	cpc	r25, r1
 244:	21 f4       	brne	.+8      	; 0x24e <pinChange+0x1b8>
		  PORTB |= (1<<PB7);
 246:	85 b1       	in	r24, 0x05	; 5
 248:	80 68       	ori	r24, 0x80	; 128
 24a:	85 b9       	out	0x05, r24	; 5
 24c:	08 95       	ret
		else if(a == eS_PORTC0)
 24e:	84 31       	cpi	r24, 0x14	; 20
 250:	91 05       	cpc	r25, r1
 252:	21 f4       	brne	.+8      	; 0x25c <pinChange+0x1c6>
		  PORTC |= (1<<PC0);
 254:	88 b1       	in	r24, 0x08	; 8
 256:	81 60       	ori	r24, 0x01	; 1
 258:	88 b9       	out	0x08, r24	; 8
 25a:	08 95       	ret
		else if(a == eS_PORTC1)
 25c:	85 31       	cpi	r24, 0x15	; 21
 25e:	91 05       	cpc	r25, r1
 260:	21 f4       	brne	.+8      	; 0x26a <pinChange+0x1d4>
		  PORTC |= (1<<PC1);
 262:	88 b1       	in	r24, 0x08	; 8
 264:	82 60       	ori	r24, 0x02	; 2
 266:	88 b9       	out	0x08, r24	; 8
 268:	08 95       	ret
		else if(a == eS_PORTC2)
 26a:	86 31       	cpi	r24, 0x16	; 22
 26c:	91 05       	cpc	r25, r1
 26e:	21 f4       	brne	.+8      	; 0x278 <pinChange+0x1e2>
	  	  PORTC |= (1<<PC2);
 270:	88 b1       	in	r24, 0x08	; 8
 272:	84 60       	ori	r24, 0x04	; 4
 274:	88 b9       	out	0x08, r24	; 8
 276:	08 95       	ret
		else if(a == eS_PORTC3)
 278:	87 31       	cpi	r24, 0x17	; 23
 27a:	91 05       	cpc	r25, r1
 27c:	21 f4       	brne	.+8      	; 0x286 <pinChange+0x1f0>
		  PORTC |= (1<<PC3);
 27e:	88 b1       	in	r24, 0x08	; 8
 280:	88 60       	ori	r24, 0x08	; 8
 282:	88 b9       	out	0x08, r24	; 8
 284:	08 95       	ret
		else if(a == eS_PORTC4)
 286:	88 31       	cpi	r24, 0x18	; 24
 288:	91 05       	cpc	r25, r1
 28a:	21 f4       	brne	.+8      	; 0x294 <pinChange+0x1fe>
		  PORTC |= (1<<PC4);
 28c:	88 b1       	in	r24, 0x08	; 8
 28e:	80 61       	ori	r24, 0x10	; 16
 290:	88 b9       	out	0x08, r24	; 8
 292:	08 95       	ret
		else if(a == eS_PORTC5)
 294:	89 31       	cpi	r24, 0x19	; 25
 296:	91 05       	cpc	r25, r1
 298:	21 f4       	brne	.+8      	; 0x2a2 <pinChange+0x20c>
		  PORTC |= (1<<PC5);
 29a:	88 b1       	in	r24, 0x08	; 8
 29c:	80 62       	ori	r24, 0x20	; 32
 29e:	88 b9       	out	0x08, r24	; 8
 2a0:	08 95       	ret
		else if(a == eS_PORTC6)
 2a2:	8a 31       	cpi	r24, 0x1A	; 26
 2a4:	91 05       	cpc	r25, r1
 2a6:	21 f4       	brne	.+8      	; 0x2b0 <pinChange+0x21a>
		  PORTC |= (1<<PC6);  
 2a8:	88 b1       	in	r24, 0x08	; 8
 2aa:	80 64       	ori	r24, 0x40	; 64
 2ac:	88 b9       	out	0x08, r24	; 8
 2ae:	08 95       	ret
		else if(a == eS_PORTD0)
 2b0:	8e 31       	cpi	r24, 0x1E	; 30
 2b2:	91 05       	cpc	r25, r1
 2b4:	21 f4       	brne	.+8      	; 0x2be <pinChange+0x228>
		  PORTD |= (1<<PD0);
 2b6:	8b b1       	in	r24, 0x0b	; 11
 2b8:	81 60       	ori	r24, 0x01	; 1
 2ba:	8b b9       	out	0x0b, r24	; 11
 2bc:	08 95       	ret
		else if(a == eS_PORTD1)
 2be:	8f 31       	cpi	r24, 0x1F	; 31
 2c0:	91 05       	cpc	r25, r1
 2c2:	21 f4       	brne	.+8      	; 0x2cc <pinChange+0x236>
		  PORTD |= (1<<PD1);
 2c4:	8b b1       	in	r24, 0x0b	; 11
 2c6:	82 60       	ori	r24, 0x02	; 2
 2c8:	8b b9       	out	0x0b, r24	; 11
 2ca:	08 95       	ret
		else if(a == eS_PORTD2)
 2cc:	80 32       	cpi	r24, 0x20	; 32
 2ce:	91 05       	cpc	r25, r1
 2d0:	21 f4       	brne	.+8      	; 0x2da <pinChange+0x244>
		  PORTD |= (1<<PD2);
 2d2:	8b b1       	in	r24, 0x0b	; 11
 2d4:	84 60       	ori	r24, 0x04	; 4
 2d6:	8b b9       	out	0x0b, r24	; 11
 2d8:	08 95       	ret
		else if(a == eS_PORTD3)
 2da:	81 32       	cpi	r24, 0x21	; 33
 2dc:	91 05       	cpc	r25, r1
 2de:	21 f4       	brne	.+8      	; 0x2e8 <pinChange+0x252>
		  PORTD |= (1<<PD3);
 2e0:	8b b1       	in	r24, 0x0b	; 11
 2e2:	88 60       	ori	r24, 0x08	; 8
 2e4:	8b b9       	out	0x0b, r24	; 11
 2e6:	08 95       	ret
		else if(a == eS_PORTD4)
 2e8:	82 32       	cpi	r24, 0x22	; 34
 2ea:	91 05       	cpc	r25, r1
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <pinChange+0x260>
		  PORTD |= (1<<PD4);
 2ee:	8b b1       	in	r24, 0x0b	; 11
 2f0:	80 61       	ori	r24, 0x10	; 16
 2f2:	8b b9       	out	0x0b, r24	; 11
 2f4:	08 95       	ret
		else if(a == eS_PORTD5)
 2f6:	83 32       	cpi	r24, 0x23	; 35
 2f8:	91 05       	cpc	r25, r1
 2fa:	21 f4       	brne	.+8      	; 0x304 <pinChange+0x26e>
		  PORTD |= (1<<PD5);
 2fc:	8b b1       	in	r24, 0x0b	; 11
 2fe:	80 62       	ori	r24, 0x20	; 32
 300:	8b b9       	out	0x0b, r24	; 11
 302:	08 95       	ret
		else if(a == eS_PORTD6)
 304:	84 32       	cpi	r24, 0x24	; 36
 306:	91 05       	cpc	r25, r1
 308:	21 f4       	brne	.+8      	; 0x312 <pinChange+0x27c>
		  PORTD |= (1<<PD6);
 30a:	8b b1       	in	r24, 0x0b	; 11
 30c:	80 64       	ori	r24, 0x40	; 64
 30e:	8b b9       	out	0x0b, r24	; 11
 310:	08 95       	ret
		else if(a == eS_PORTD7)
 312:	85 97       	sbiw	r24, 0x25	; 37
 314:	19 f4       	brne	.+6      	; 0x31c <pinChange+0x286>
		  PORTD |= (1<<PD7);
 316:	8b b1       	in	r24, 0x0b	; 11
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	8b b9       	out	0x0b, r24	; 11
 31c:	08 95       	ret

0000031e <Lcd4_Port>:
}


//LCD 4 Bit Interfacing Functions
void Lcd4_Port(char a)
{
 31e:	cf 93       	push	r28
 320:	c8 2f       	mov	r28, r24
	if(a & 1)
 322:	80 ff       	sbrs	r24, 0
 324:	07 c0       	rjmp	.+14     	; 0x334 <Lcd4_Port+0x16>
	pinChange(D4,1);
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	83 e2       	ldi	r24, 0x23	; 35
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 4b 00 	call	0x96	; 0x96 <pinChange>
 332:	06 c0       	rjmp	.+12     	; 0x340 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	83 e2       	ldi	r24, 0x23	; 35
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 4b 00 	call	0x96	; 0x96 <pinChange>
	
	if(a & 2)
 340:	c1 ff       	sbrs	r28, 1
 342:	07 c0       	rjmp	.+14     	; 0x352 <Lcd4_Port+0x34>
	pinChange(D5,1);
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	82 e2       	ldi	r24, 0x22	; 34
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 4b 00 	call	0x96	; 0x96 <pinChange>
 350:	06 c0       	rjmp	.+12     	; 0x35e <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	82 e2       	ldi	r24, 0x22	; 34
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 4b 00 	call	0x96	; 0x96 <pinChange>
	
	if(a & 4)
 35e:	c2 ff       	sbrs	r28, 2
 360:	07 c0       	rjmp	.+14     	; 0x370 <Lcd4_Port+0x52>
	pinChange(D6,1);
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	81 e2       	ldi	r24, 0x21	; 33
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 4b 00 	call	0x96	; 0x96 <pinChange>
 36e:	06 c0       	rjmp	.+12     	; 0x37c <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	81 e2       	ldi	r24, 0x21	; 33
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 4b 00 	call	0x96	; 0x96 <pinChange>
	
	if(a & 8)
 37c:	c3 ff       	sbrs	r28, 3
 37e:	07 c0       	rjmp	.+14     	; 0x38e <Lcd4_Port+0x70>
	pinChange(D7,1);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	80 e2       	ldi	r24, 0x20	; 32
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 4b 00 	call	0x96	; 0x96 <pinChange>
 38c:	06 c0       	rjmp	.+12     	; 0x39a <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	80 e2       	ldi	r24, 0x20	; 32
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 4b 00 	call	0x96	; 0x96 <pinChange>
}
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <Lcd4_Cmd>:

void Lcd4_Cmd(char a)
{
 39e:	cf 93       	push	r28
 3a0:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	85 e2       	ldi	r24, 0x25	; 37
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 4b 00 	call	0x96	; 0x96 <pinChange>
	Lcd4_Port(a);
 3ae:	8c 2f       	mov	r24, r28
 3b0:	0e 94 8f 01 	call	0x31e	; 0x31e <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	84 e2       	ldi	r24, 0x24	; 36
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 4b 00 	call	0x96	; 0x96 <pinChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c0:	8f e9       	ldi	r24, 0x9F	; 159
 3c2:	9f e0       	ldi	r25, 0x0F	; 15
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <Lcd4_Cmd+0x26>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <Lcd4_Cmd+0x2c>
 3ca:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	84 e2       	ldi	r24, 0x24	; 36
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	0e 94 4b 00 	call	0x96	; 0x96 <pinChange>
 3d8:	8f e9       	ldi	r24, 0x9F	; 159
 3da:	9f e0       	ldi	r25, 0x0F	; 15
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <Lcd4_Cmd+0x3e>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <Lcd4_Cmd+0x44>
 3e2:	00 00       	nop
	_delay_ms(1);
}
 3e4:	cf 91       	pop	r28
 3e6:	08 95       	ret

000003e8 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd4_Cmd>
	Lcd4_Cmd(1);
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd4_Cmd>
 3f4:	08 95       	ret

000003f6 <Lcd4_Set_Cursor>:
}

void Lcd4_Set_Cursor(char a, char b)
{
 3f6:	cf 93       	push	r28
	char temp,z,y;
	if(a == 1)
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	61 f4       	brne	.+24     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
	{
		temp = 0x80 + b;
 3fc:	80 e8       	ldi	r24, 0x80	; 128
 3fe:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0x80+b) & 0x0F;
 400:	c6 2f       	mov	r28, r22
 402:	cf 70       	andi	r28, 0x0F	; 15
		Lcd4_Cmd(z);
 404:	82 95       	swap	r24
 406:	8f 70       	andi	r24, 0x0F	; 15
 408:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd4_Cmd>
		Lcd4_Cmd(y);
 40c:	8c 2f       	mov	r24, r28
 40e:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd4_Cmd>
 412:	0d c0       	rjmp	.+26     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	}
	else if(a == 2)
 414:	82 30       	cpi	r24, 0x02	; 2
 416:	59 f4       	brne	.+22     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
		temp = 0xC0 + b;
 418:	80 ec       	ldi	r24, 0xC0	; 192
 41a:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
 41c:	c6 2f       	mov	r28, r22
 41e:	cf 70       	andi	r28, 0x0F	; 15
		Lcd4_Cmd(z);
 420:	82 95       	swap	r24
 422:	8f 70       	andi	r24, 0x0F	; 15
 424:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd4_Cmd>
		Lcd4_Cmd(y);
 428:	8c 2f       	mov	r24, r28
 42a:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd4_Cmd>
	}
}
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <Lcd4_Init>:

void Lcd4_Init()
{
	set_D4;
 432:	8a b1       	in	r24, 0x0a	; 10
 434:	80 62       	ori	r24, 0x20	; 32
 436:	8a b9       	out	0x0a, r24	; 10
	set_D5;
 438:	8a b1       	in	r24, 0x0a	; 10
 43a:	80 61       	ori	r24, 0x10	; 16
 43c:	8a b9       	out	0x0a, r24	; 10
	set_D6;
 43e:	8a b1       	in	r24, 0x0a	; 10
 440:	88 60       	ori	r24, 0x08	; 8
 442:	8a b9       	out	0x0a, r24	; 10
	set_D7;
 444:	8a b1       	in	r24, 0x0a	; 10
 446:	84 60       	ori	r24, 0x04	; 4
 448:	8a b9       	out	0x0a, r24	; 10
	set_RS;
 44a:	8a b1       	in	r24, 0x0a	; 10
 44c:	80 68       	ori	r24, 0x80	; 128
 44e:	8a b9       	out	0x0a, r24	; 10
	set_EN;
 450:	8a b1       	in	r24, 0x0a	; 10
 452:	80 64       	ori	r24, 0x40	; 64
 454:	8a b9       	out	0x0a, r24	; 10

	Lcd4_Port(0x00);
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	0e 94 8f 01 	call	0x31e	; 0x31e <Lcd4_Port>
 45c:	2f ef       	ldi	r18, 0xFF	; 255
 45e:	89 ef       	ldi	r24, 0xF9	; 249
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	21 50       	subi	r18, 0x01	; 1
 464:	80 40       	sbci	r24, 0x00	; 0
 466:	90 40       	sbci	r25, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <Lcd4_Init+0x30>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <Lcd4_Init+0x3a>
 46c:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
 46e:	83 e0       	ldi	r24, 0x03	; 3
 470:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd4_Cmd>
 474:	8f e1       	ldi	r24, 0x1F	; 31
 476:	9e e4       	ldi	r25, 0x4E	; 78
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <Lcd4_Init+0x46>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <Lcd4_Init+0x4c>
 47e:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 480:	83 e0       	ldi	r24, 0x03	; 3
 482:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd4_Cmd>
 486:	8f ed       	ldi	r24, 0xDF	; 223
 488:	9b ea       	ldi	r25, 0xAB	; 171
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <Lcd4_Init+0x58>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <Lcd4_Init+0x5e>
 490:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
 498:	82 e0       	ldi	r24, 0x02	; 2
 49a:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 4a4:	88 e0       	ldi	r24, 0x08	; 8
 4a6:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 4b0:	8c e0       	ldi	r24, 0x0C	; 12
 4b2:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 4bc:	86 e0       	ldi	r24, 0x06	; 6
 4be:	0e 94 cf 01 	call	0x39e	; 0x39e <Lcd4_Cmd>
 4c2:	08 95       	ret

000004c4 <Lcd4_Write_Char>:
}

void Lcd4_Write_Char(char a)
{
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
	char temp,y;
	temp = a&0x0F;
 4c8:	d8 2f       	mov	r29, r24
 4ca:	df 70       	andi	r29, 0x0F	; 15
	y = a&0xF0;
 4cc:	c8 2f       	mov	r28, r24
 4ce:	c0 7f       	andi	r28, 0xF0	; 240
	pinChange(RS,1);             // => RS = 1
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	70 e0       	ldi	r23, 0x00	; 0
 4d4:	85 e2       	ldi	r24, 0x25	; 37
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 4b 00 	call	0x96	; 0x96 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
 4dc:	8c 2f       	mov	r24, r28
 4de:	82 95       	swap	r24
 4e0:	8f 70       	andi	r24, 0x0F	; 15
 4e2:	0e 94 8f 01 	call	0x31e	; 0x31e <Lcd4_Port>
	pinChange(EN,1);
 4e6:	61 e0       	ldi	r22, 0x01	; 1
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	84 e2       	ldi	r24, 0x24	; 36
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 4b 00 	call	0x96	; 0x96 <pinChange>
 4f2:	8f e9       	ldi	r24, 0x9F	; 159
 4f4:	9f e0       	ldi	r25, 0x0F	; 15
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <Lcd4_Write_Char+0x32>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <Lcd4_Write_Char+0x38>
 4fc:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	84 e2       	ldi	r24, 0x24	; 36
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 4b 00 	call	0x96	; 0x96 <pinChange>
 50a:	8f e9       	ldi	r24, 0x9F	; 159
 50c:	9f e0       	ldi	r25, 0x0F	; 15
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <Lcd4_Write_Char+0x4a>
 512:	00 c0       	rjmp	.+0      	; 0x514 <Lcd4_Write_Char+0x50>
 514:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
 516:	8d 2f       	mov	r24, r29
 518:	0e 94 8f 01 	call	0x31e	; 0x31e <Lcd4_Port>
	pinChange(EN,1);
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	84 e2       	ldi	r24, 0x24	; 36
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 4b 00 	call	0x96	; 0x96 <pinChange>
 528:	8f e9       	ldi	r24, 0x9F	; 159
 52a:	9f e0       	ldi	r25, 0x0F	; 15
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <Lcd4_Write_Char+0x68>
 530:	00 c0       	rjmp	.+0      	; 0x532 <Lcd4_Write_Char+0x6e>
 532:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	84 e2       	ldi	r24, 0x24	; 36
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 4b 00 	call	0x96	; 0x96 <pinChange>
 540:	8f e9       	ldi	r24, 0x9F	; 159
 542:	9f e0       	ldi	r25, 0x0F	; 15
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <Lcd4_Write_Char+0x80>
 548:	00 c0       	rjmp	.+0      	; 0x54a <Lcd4_Write_Char+0x86>
 54a:	00 00       	nop
	_delay_ms(1);
}
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
 552:	0f 93       	push	r16
 554:	1f 93       	push	r17
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	8c 01       	movw	r16, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 55c:	c0 e0       	ldi	r28, 0x00	; 0
 55e:	d0 e0       	ldi	r29, 0x00	; 0
 560:	03 c0       	rjmp	.+6      	; 0x568 <Lcd4_Write_String+0x16>
	Lcd4_Write_Char(a[i]);
 562:	0e 94 62 02 	call	0x4c4	; 0x4c4 <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 566:	21 96       	adiw	r28, 0x01	; 1
 568:	f8 01       	movw	r30, r16
 56a:	ec 0f       	add	r30, r28
 56c:	fd 1f       	adc	r31, r29
 56e:	80 81       	ld	r24, Z
 570:	81 11       	cpse	r24, r1
 572:	f7 cf       	rjmp	.-18     	; 0x562 <Lcd4_Write_String+0x10>
	Lcd4_Write_Char(a[i]);
}
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	08 95       	ret

0000057e <main>:
#include "LCD16x2_4b.h"

int main(void)
{
    /* Replace with your application code */
	Lcd4_Init();
 57e:	0e 94 19 02 	call	0x432	; 0x432 <Lcd4_Init>
			
    while (1) 
    {
		Lcd4_Set_Cursor(1,0);
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Set_Cursor>
		Lcd4_Write_String("Zilocchi        ");
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	91 e0       	ldi	r25, 0x01	; 1
 58e:	0e 94 a9 02 	call	0x552	; 0x552 <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,0);
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Set_Cursor>
		Lcd4_Write_String("      Eletronica");
 59a:	81 e1       	ldi	r24, 0x11	; 17
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	0e 94 a9 02 	call	0x552	; 0x552 <Lcd4_Write_String>
 5a2:	2f ef       	ldi	r18, 0xFF	; 255
 5a4:	87 ea       	ldi	r24, 0xA7	; 167
 5a6:	91 e6       	ldi	r25, 0x61	; 97
 5a8:	21 50       	subi	r18, 0x01	; 1
 5aa:	80 40       	sbci	r24, 0x00	; 0
 5ac:	90 40       	sbci	r25, 0x00	; 0
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <main+0x2a>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <main+0x34>
 5b2:	00 00       	nop
		_delay_ms(2000);
		Lcd4_Clear();
 5b4:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Lcd4_Clear>
		
		Lcd4_Set_Cursor(1,0);
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Set_Cursor>
		Lcd4_Write_String("Teste           ");
 5c0:	82 e2       	ldi	r24, 0x22	; 34
 5c2:	91 e0       	ldi	r25, 0x01	; 1
 5c4:	0e 94 a9 02 	call	0x552	; 0x552 <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,0);
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	82 e0       	ldi	r24, 0x02	; 2
 5cc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Lcd4_Set_Cursor>
		Lcd4_Write_String("         Display");
 5d0:	83 e3       	ldi	r24, 0x33	; 51
 5d2:	91 e0       	ldi	r25, 0x01	; 1
 5d4:	0e 94 a9 02 	call	0x552	; 0x552 <Lcd4_Write_String>
 5d8:	2f ef       	ldi	r18, 0xFF	; 255
 5da:	87 ea       	ldi	r24, 0xA7	; 167
 5dc:	91 e6       	ldi	r25, 0x61	; 97
 5de:	21 50       	subi	r18, 0x01	; 1
 5e0:	80 40       	sbci	r24, 0x00	; 0
 5e2:	90 40       	sbci	r25, 0x00	; 0
 5e4:	e1 f7       	brne	.-8      	; 0x5de <main+0x60>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <main+0x6a>
 5e8:	00 00       	nop
		_delay_ms(2000);
		Lcd4_Clear();
 5ea:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Lcd4_Clear>
 5ee:	c9 cf       	rjmp	.-110    	; 0x582 <main+0x4>

000005f0 <_exit>:
 5f0:	f8 94       	cli

000005f2 <__stop_program>:
 5f2:	ff cf       	rjmp	.-2      	; 0x5f2 <__stop_program>
