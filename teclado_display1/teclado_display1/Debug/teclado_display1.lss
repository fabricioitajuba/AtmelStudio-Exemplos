
teclado_display1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000007ac  00000820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000082a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f7d  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000981  00000000  00000000  000018f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ad7  00000000  00000000  00002276  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  00002d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ac  00000000  00000000  00002f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ef  00000000  00000000  000033b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003ba7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 af 03 	call	0x75e	; 0x75e <main>
  7a:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  82:	82 b3       	in	r24, 0x12	; 18
  84:	84 60       	ori	r24, 0x04	; 4
  86:	82 bb       	out	0x12, r24	; 18
  88:	00 c0       	rjmp	.+0      	; 0x8a <toggle_e+0x8>
  8a:	82 b3       	in	r24, 0x12	; 18
  8c:	8b 7f       	andi	r24, 0xFB	; 251
  8e:	82 bb       	out	0x12, r24	; 18
  90:	08 95       	ret

00000092 <lcd_write>:
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	66 23       	and	r22, r22
  98:	21 f0       	breq	.+8      	; 0xa2 <lcd_write+0x10>
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <lcd_write+0x16>
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	8e 7f       	andi	r24, 0xFE	; 254
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	8d 7f       	andi	r24, 0xFD	; 253
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	81 b3       	in	r24, 0x11	; 17
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	81 bb       	out	0x11, r24	; 17
  b4:	81 b3       	in	r24, 0x11	; 17
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	81 bb       	out	0x11, r24	; 17
  ba:	81 b3       	in	r24, 0x11	; 17
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	81 bb       	out	0x11, r24	; 17
  c0:	81 b3       	in	r24, 0x11	; 17
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	81 bb       	out	0x11, r24	; 17
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	8f 77       	andi	r24, 0x7F	; 127
  ca:	82 bb       	out	0x12, r24	; 18
  cc:	82 b3       	in	r24, 0x12	; 18
  ce:	8f 7b       	andi	r24, 0xBF	; 191
  d0:	82 bb       	out	0x12, r24	; 18
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	82 bb       	out	0x12, r24	; 18
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	8f 7e       	andi	r24, 0xEF	; 239
  dc:	82 bb       	out	0x12, r24	; 18
  de:	cc 23       	and	r28, r28
  e0:	1c f4       	brge	.+6      	; 0xe8 <lcd_write+0x56>
  e2:	82 b3       	in	r24, 0x12	; 18
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	82 bb       	out	0x12, r24	; 18
  e8:	c6 ff       	sbrs	r28, 6
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <lcd_write+0x60>
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	c5 ff       	sbrs	r28, 5
  f4:	03 c0       	rjmp	.+6      	; 0xfc <lcd_write+0x6a>
  f6:	82 b3       	in	r24, 0x12	; 18
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	82 bb       	out	0x12, r24	; 18
  fc:	c4 ff       	sbrs	r28, 4
  fe:	03 c0       	rjmp	.+6      	; 0x106 <lcd_write+0x74>
 100:	82 b3       	in	r24, 0x12	; 18
 102:	80 61       	ori	r24, 0x10	; 16
 104:	82 bb       	out	0x12, r24	; 18
 106:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	8f 77       	andi	r24, 0x7F	; 127
 10e:	82 bb       	out	0x12, r24	; 18
 110:	82 b3       	in	r24, 0x12	; 18
 112:	8f 7b       	andi	r24, 0xBF	; 191
 114:	82 bb       	out	0x12, r24	; 18
 116:	82 b3       	in	r24, 0x12	; 18
 118:	8f 7d       	andi	r24, 0xDF	; 223
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	82 b3       	in	r24, 0x12	; 18
 11e:	8f 7e       	andi	r24, 0xEF	; 239
 120:	82 bb       	out	0x12, r24	; 18
 122:	c3 ff       	sbrs	r28, 3
 124:	03 c0       	rjmp	.+6      	; 0x12c <lcd_write+0x9a>
 126:	82 b3       	in	r24, 0x12	; 18
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	82 bb       	out	0x12, r24	; 18
 12c:	c2 ff       	sbrs	r28, 2
 12e:	03 c0       	rjmp	.+6      	; 0x136 <lcd_write+0xa4>
 130:	82 b3       	in	r24, 0x12	; 18
 132:	80 64       	ori	r24, 0x40	; 64
 134:	82 bb       	out	0x12, r24	; 18
 136:	c1 ff       	sbrs	r28, 1
 138:	03 c0       	rjmp	.+6      	; 0x140 <lcd_write+0xae>
 13a:	82 b3       	in	r24, 0x12	; 18
 13c:	80 62       	ori	r24, 0x20	; 32
 13e:	82 bb       	out	0x12, r24	; 18
 140:	c0 ff       	sbrs	r28, 0
 142:	03 c0       	rjmp	.+6      	; 0x14a <lcd_write+0xb8>
 144:	82 b3       	in	r24, 0x12	; 18
 146:	80 61       	ori	r24, 0x10	; 16
 148:	82 bb       	out	0x12, r24	; 18
 14a:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
 14e:	82 b3       	in	r24, 0x12	; 18
 150:	80 61       	ori	r24, 0x10	; 16
 152:	82 bb       	out	0x12, r24	; 18
 154:	82 b3       	in	r24, 0x12	; 18
 156:	80 62       	ori	r24, 0x20	; 32
 158:	82 bb       	out	0x12, r24	; 18
 15a:	82 b3       	in	r24, 0x12	; 18
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	82 bb       	out	0x12, r24	; 18
 160:	82 b3       	in	r24, 0x12	; 18
 162:	80 68       	ori	r24, 0x80	; 128
 164:	82 bb       	out	0x12, r24	; 18
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <lcd_read>:
 16a:	88 23       	and	r24, r24
 16c:	21 f0       	breq	.+8      	; 0x176 <lcd_read+0xc>
 16e:	82 b3       	in	r24, 0x12	; 18
 170:	81 60       	ori	r24, 0x01	; 1
 172:	82 bb       	out	0x12, r24	; 18
 174:	03 c0       	rjmp	.+6      	; 0x17c <lcd_read+0x12>
 176:	82 b3       	in	r24, 0x12	; 18
 178:	8e 7f       	andi	r24, 0xFE	; 254
 17a:	82 bb       	out	0x12, r24	; 18
 17c:	82 b3       	in	r24, 0x12	; 18
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	82 bb       	out	0x12, r24	; 18
 182:	81 b3       	in	r24, 0x11	; 17
 184:	8f 7e       	andi	r24, 0xEF	; 239
 186:	81 bb       	out	0x11, r24	; 17
 188:	81 b3       	in	r24, 0x11	; 17
 18a:	8f 7d       	andi	r24, 0xDF	; 223
 18c:	81 bb       	out	0x11, r24	; 17
 18e:	81 b3       	in	r24, 0x11	; 17
 190:	8f 7b       	andi	r24, 0xBF	; 191
 192:	81 bb       	out	0x11, r24	; 17
 194:	81 b3       	in	r24, 0x11	; 17
 196:	8f 77       	andi	r24, 0x7F	; 127
 198:	81 bb       	out	0x11, r24	; 17
 19a:	82 b3       	in	r24, 0x12	; 18
 19c:	84 60       	ori	r24, 0x04	; 4
 19e:	82 bb       	out	0x12, r24	; 18
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_read+0x38>
 1a2:	84 99       	sbic	0x10, 4	; 16
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <lcd_read+0x40>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <lcd_read+0x42>
 1aa:	80 e1       	ldi	r24, 0x10	; 16
 1ac:	85 99       	sbic	0x10, 5	; 16
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	86 99       	sbic	0x10, 6	; 16
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	87 99       	sbic	0x10, 7	; 16
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	92 b3       	in	r25, 0x12	; 18
 1ba:	9b 7f       	andi	r25, 0xFB	; 251
 1bc:	92 bb       	out	0x12, r25	; 18
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_read+0x56>
 1c0:	92 b3       	in	r25, 0x12	; 18
 1c2:	94 60       	ori	r25, 0x04	; 4
 1c4:	92 bb       	out	0x12, r25	; 18
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_read+0x5e>
 1c8:	84 99       	sbic	0x10, 4	; 16
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	85 99       	sbic	0x10, 5	; 16
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	86 99       	sbic	0x10, 6	; 16
 1d2:	84 60       	ori	r24, 0x04	; 4
 1d4:	87 99       	sbic	0x10, 7	; 16
 1d6:	88 60       	ori	r24, 0x08	; 8
 1d8:	92 b3       	in	r25, 0x12	; 18
 1da:	9b 7f       	andi	r25, 0xFB	; 251
 1dc:	92 bb       	out	0x12, r25	; 18
 1de:	08 95       	ret

000001e0 <lcd_waitbusy>:
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_read>
 1e6:	88 23       	and	r24, r24
 1e8:	dc f3       	brlt	.-10     	; 0x1e0 <lcd_waitbusy>
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_waitbusy+0xe>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_read>
 1f8:	08 95       	ret

000001fa <lcd_command>:
 1fa:	cf 93       	push	r28
 1fc:	c8 2f       	mov	r28, r24
 1fe:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_waitbusy>
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	8c 2f       	mov	r24, r28
 206:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <lcd_gotoxy>:
 20e:	61 11       	cpse	r22, r1
 210:	04 c0       	rjmp	.+8      	; 0x21a <lcd_gotoxy+0xc>
 212:	80 58       	subi	r24, 0x80	; 128
 214:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
 218:	08 95       	ret
 21a:	80 54       	subi	r24, 0x40	; 64
 21c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
 220:	08 95       	ret

00000222 <lcd_clrscr>:
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
 228:	08 95       	ret

0000022a <lcd_home>:
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
 230:	08 95       	ret

00000232 <lcd_putc>:
 232:	cf 93       	push	r28
 234:	c8 2f       	mov	r28, r24
 236:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_waitbusy>
 23a:	ca 30       	cpi	r28, 0x0A	; 10
 23c:	49 f4       	brne	.+18     	; 0x250 <lcd_putc+0x1e>
 23e:	80 34       	cpi	r24, 0x40	; 64
 240:	10 f4       	brcc	.+4      	; 0x246 <lcd_putc+0x14>
 242:	80 e4       	ldi	r24, 0x40	; 64
 244:	01 c0       	rjmp	.+2      	; 0x248 <lcd_putc+0x16>
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	80 58       	subi	r24, 0x80	; 128
 24a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
 24e:	04 c0       	rjmp	.+8      	; 0x258 <lcd_putc+0x26>
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	8c 2f       	mov	r24, r28
 254:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <lcd_puts>:
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	fc 01       	movw	r30, r24
 262:	03 c0       	rjmp	.+6      	; 0x26a <lcd_puts+0xe>
 264:	0e 94 19 01 	call	0x232	; 0x232 <lcd_putc>
 268:	fe 01       	movw	r30, r28
 26a:	ef 01       	movw	r28, r30
 26c:	21 96       	adiw	r28, 0x01	; 1
 26e:	80 81       	ld	r24, Z
 270:	81 11       	cpse	r24, r1
 272:	f8 cf       	rjmp	.-16     	; 0x264 <lcd_puts+0x8>
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 282:	81 b3       	in	r24, 0x11	; 17
 284:	81 60       	ori	r24, 0x01	; 1
 286:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 288:	81 b3       	in	r24, 0x11	; 17
 28a:	82 60       	ori	r24, 0x02	; 2
 28c:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 28e:	81 b3       	in	r24, 0x11	; 17
 290:	84 60       	ori	r24, 0x04	; 4
 292:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 294:	81 b3       	in	r24, 0x11	; 17
 296:	80 61       	ori	r24, 0x10	; 16
 298:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 29a:	81 b3       	in	r24, 0x11	; 17
 29c:	80 62       	ori	r24, 0x20	; 32
 29e:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 2a0:	81 b3       	in	r24, 0x11	; 17
 2a2:	80 64       	ori	r24, 0x40	; 64
 2a4:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 2a6:	81 b3       	in	r24, 0x11	; 17
 2a8:	80 68       	ori	r24, 0x80	; 128
 2aa:	81 bb       	out	0x11, r24	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	9d e7       	ldi	r25, 0x7D	; 125
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <lcd_init+0x36>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 2b4:	82 b3       	in	r24, 0x12	; 18
 2b6:	80 62       	ori	r24, 0x20	; 32
 2b8:	82 bb       	out	0x12, r24	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 2ba:	82 b3       	in	r24, 0x12	; 18
 2bc:	80 61       	ori	r24, 0x10	; 16
 2be:	82 bb       	out	0x12, r24	; 18
    lcd_e_toggle();
 2c0:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	97 e2       	ldi	r25, 0x27	; 39
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <lcd_init+0x4e>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 2cc:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2d0:	c0 e8       	ldi	r28, 0x80	; 128
 2d2:	d0 e0       	ldi	r29, 0x00	; 0
 2d4:	ce 01       	movw	r24, r28
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <lcd_init+0x5c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 2da:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2de:	ce 01       	movw	r24, r28
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <lcd_init+0x66>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2e4:	82 b3       	in	r24, 0x12	; 18
 2e6:	8f 7e       	andi	r24, 0xEF	; 239
 2e8:	82 bb       	out	0x12, r24	; 18
    lcd_e_toggle();
 2ea:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2ee:	21 97       	sbiw	r28, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <lcd_init+0x74>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2f2:	88 e2       	ldi	r24, 0x28	; 40
 2f4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2f8:	88 e0       	ldi	r24, 0x08	; 8
 2fa:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
    
	
	//lcd_clrscr();                           /* display clear                */ 
	lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2fe:	86 e0       	ldi	r24, 0x06	; 6
 300:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>
	lcd_command(dispAttr);                  /* display/cursor control       */
 304:	81 2f       	mov	r24, r17
 306:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_command>

}/* lcd_init */
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	08 95       	ret

00000312 <kbrd_init>:
 void reset_columns(void);

void kbrd_init()
{
	//Column pins are Outputs
	KBRD_C0_DDR |= (1<<KBRD_C0_PIN);
 312:	87 b3       	in	r24, 0x17	; 23
 314:	81 60       	ori	r24, 0x01	; 1
 316:	87 bb       	out	0x17, r24	; 23
	KBRD_C1_DDR |= (1<<KBRD_C1_PIN);
 318:	87 b3       	in	r24, 0x17	; 23
 31a:	82 60       	ori	r24, 0x02	; 2
 31c:	87 bb       	out	0x17, r24	; 23
	KBRD_C2_DDR |= (1<<KBRD_C2_PIN);
 31e:	87 b3       	in	r24, 0x17	; 23
 320:	84 60       	ori	r24, 0x04	; 4
 322:	87 bb       	out	0x17, r24	; 23
	KBRD_C3_DDR |= (1<<KBRD_C3_PIN);
 324:	87 b3       	in	r24, 0x17	; 23
 326:	88 60       	ori	r24, 0x08	; 8
 328:	87 bb       	out	0x17, r24	; 23
	
	//Row pins are Inputs
	KBRD_F0_DDR &= ~(1<<KBRD_F0_PIN);
 32a:	87 b3       	in	r24, 0x17	; 23
 32c:	8f 7e       	andi	r24, 0xEF	; 239
 32e:	87 bb       	out	0x17, r24	; 23
	KBRD_F1_DDR &= ~(1<<KBRD_F1_PIN);
 330:	87 b3       	in	r24, 0x17	; 23
 332:	8f 7d       	andi	r24, 0xDF	; 223
 334:	87 bb       	out	0x17, r24	; 23
	KBRD_F2_DDR &= ~(1<<KBRD_F2_PIN);
 336:	87 b3       	in	r24, 0x17	; 23
 338:	8f 7b       	andi	r24, 0xBF	; 191
 33a:	87 bb       	out	0x17, r24	; 23
	KBRD_F3_DDR &= ~(1<<KBRD_F3_PIN);
 33c:	87 b3       	in	r24, 0x17	; 23
 33e:	8f 77       	andi	r24, 0x7F	; 127
 340:	87 bb       	out	0x17, r24	; 23
	
	
	//enable pull ups on row pins
	KBRD_F0_PORT |= (1<<KBRD_F0_PIN);
 342:	88 b3       	in	r24, 0x18	; 24
 344:	80 61       	ori	r24, 0x10	; 16
 346:	88 bb       	out	0x18, r24	; 24
	KBRD_F1_PORT |= (1<<KBRD_F1_PIN);
 348:	88 b3       	in	r24, 0x18	; 24
 34a:	80 62       	ori	r24, 0x20	; 32
 34c:	88 bb       	out	0x18, r24	; 24
	KBRD_F2_PORT |= (1<<KBRD_F2_PIN);
 34e:	88 b3       	in	r24, 0x18	; 24
 350:	80 64       	ori	r24, 0x40	; 64
 352:	88 bb       	out	0x18, r24	; 24
	KBRD_F3_PORT |= (1<<KBRD_F3_PIN);
 354:	88 b3       	in	r24, 0x18	; 24
 356:	80 68       	ori	r24, 0x80	; 128
 358:	88 bb       	out	0x18, r24	; 24
	// Put Ones in Columns
	KBRD_C0_PORT |= (1<<KBRD_C0_PIN);
 35a:	88 b3       	in	r24, 0x18	; 24
 35c:	81 60       	ori	r24, 0x01	; 1
 35e:	88 bb       	out	0x18, r24	; 24
	KBRD_C1_PORT |= (1<<KBRD_C1_PIN);
 360:	88 b3       	in	r24, 0x18	; 24
 362:	82 60       	ori	r24, 0x02	; 2
 364:	88 bb       	out	0x18, r24	; 24
	KBRD_C2_PORT |= (1<<KBRD_C2_PIN);
 366:	88 b3       	in	r24, 0x18	; 24
 368:	84 60       	ori	r24, 0x04	; 4
 36a:	88 bb       	out	0x18, r24	; 24
	KBRD_C3_PORT |= (1<<KBRD_C3_PIN);
 36c:	88 b3       	in	r24, 0x18	; 24
 36e:	88 60       	ori	r24, 0x08	; 8
 370:	88 bb       	out	0x18, r24	; 24
 372:	08 95       	ret

00000374 <activate_column>:
}

//FIXME: 
void activate_column(unsigned char column)
{
	if(column == 0)
 374:	81 11       	cpse	r24, r1
 376:	0c c0       	rjmp	.+24     	; 0x390 <activate_column+0x1c>
	{
		KBRD_C0_PORT &= ~(1<< KBRD_C0_PIN);
 378:	98 b3       	in	r25, 0x18	; 24
 37a:	9e 7f       	andi	r25, 0xFE	; 254
 37c:	98 bb       	out	0x18, r25	; 24
		KBRD_C1_PORT |= (1<< KBRD_C1_PIN);
 37e:	98 b3       	in	r25, 0x18	; 24
 380:	92 60       	ori	r25, 0x02	; 2
 382:	98 bb       	out	0x18, r25	; 24
		KBRD_C2_PORT |= (1<< KBRD_C2_PIN);
 384:	98 b3       	in	r25, 0x18	; 24
 386:	94 60       	ori	r25, 0x04	; 4
 388:	98 bb       	out	0x18, r25	; 24
		KBRD_C3_PORT |= (1<< KBRD_C3_PIN);	
 38a:	98 b3       	in	r25, 0x18	; 24
 38c:	98 60       	ori	r25, 0x08	; 8
 38e:	98 bb       	out	0x18, r25	; 24
		
	}
	 if(column == 1)
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	61 f4       	brne	.+24     	; 0x3ac <activate_column+0x38>
	{
		KBRD_C0_PORT |= (1<< KBRD_C0_PIN);
 394:	98 b3       	in	r25, 0x18	; 24
 396:	91 60       	ori	r25, 0x01	; 1
 398:	98 bb       	out	0x18, r25	; 24
		KBRD_C1_PORT &= ~(1<< KBRD_C1_PIN);
 39a:	98 b3       	in	r25, 0x18	; 24
 39c:	9d 7f       	andi	r25, 0xFD	; 253
 39e:	98 bb       	out	0x18, r25	; 24
		KBRD_C2_PORT |= (1<< KBRD_C2_PIN);
 3a0:	98 b3       	in	r25, 0x18	; 24
 3a2:	94 60       	ori	r25, 0x04	; 4
 3a4:	98 bb       	out	0x18, r25	; 24
		KBRD_C3_PORT |= (1<< KBRD_C3_PIN);
 3a6:	98 b3       	in	r25, 0x18	; 24
 3a8:	98 60       	ori	r25, 0x08	; 8
 3aa:	98 bb       	out	0x18, r25	; 24
			
	}
	if(column == 2)
 3ac:	82 30       	cpi	r24, 0x02	; 2
 3ae:	61 f4       	brne	.+24     	; 0x3c8 <activate_column+0x54>
	{
		KBRD_C0_PORT |= (1<< KBRD_C0_PIN);
 3b0:	98 b3       	in	r25, 0x18	; 24
 3b2:	91 60       	ori	r25, 0x01	; 1
 3b4:	98 bb       	out	0x18, r25	; 24
		KBRD_C1_PORT |= (1<< KBRD_C1_PIN);
 3b6:	98 b3       	in	r25, 0x18	; 24
 3b8:	92 60       	ori	r25, 0x02	; 2
 3ba:	98 bb       	out	0x18, r25	; 24
		KBRD_C2_PORT &= ~(1<< KBRD_C2_PIN);
 3bc:	98 b3       	in	r25, 0x18	; 24
 3be:	9b 7f       	andi	r25, 0xFB	; 251
 3c0:	98 bb       	out	0x18, r25	; 24
		KBRD_C3_PORT |= (1<< KBRD_C3_PIN);
 3c2:	98 b3       	in	r25, 0x18	; 24
 3c4:	98 60       	ori	r25, 0x08	; 8
 3c6:	98 bb       	out	0x18, r25	; 24
			
	}
	//FIXME: completar para un teclado 4x4
	if(column == 3)
 3c8:	83 30       	cpi	r24, 0x03	; 3
 3ca:	61 f4       	brne	.+24     	; 0x3e4 <activate_column+0x70>
	{
		KBRD_C0_PORT |= (1<< KBRD_C0_PIN);
 3cc:	88 b3       	in	r24, 0x18	; 24
 3ce:	81 60       	ori	r24, 0x01	; 1
 3d0:	88 bb       	out	0x18, r24	; 24
		KBRD_C1_PORT |= (1<< KBRD_C1_PIN);
 3d2:	88 b3       	in	r24, 0x18	; 24
 3d4:	82 60       	ori	r24, 0x02	; 2
 3d6:	88 bb       	out	0x18, r24	; 24
		KBRD_C2_PORT |= (1<< KBRD_C2_PIN);
 3d8:	88 b3       	in	r24, 0x18	; 24
 3da:	84 60       	ori	r24, 0x04	; 4
 3dc:	88 bb       	out	0x18, r24	; 24
		KBRD_C3_PORT &= ~(1<< KBRD_C3_PIN);
 3de:	88 b3       	in	r24, 0x18	; 24
 3e0:	87 7f       	andi	r24, 0xF7	; 247
 3e2:	88 bb       	out	0x18, r24	; 24
 3e4:	08 95       	ret

000003e6 <reset_columns>:


void reset_columns()
{
	
	KBRD_C0_PORT |= (1<< KBRD_C0_PIN);
 3e6:	88 b3       	in	r24, 0x18	; 24
 3e8:	81 60       	ori	r24, 0x01	; 1
 3ea:	88 bb       	out	0x18, r24	; 24
	KBRD_C1_PORT |= (1<< KBRD_C1_PIN);	
 3ec:	88 b3       	in	r24, 0x18	; 24
 3ee:	82 60       	ori	r24, 0x02	; 2
 3f0:	88 bb       	out	0x18, r24	; 24
	KBRD_C2_PORT |= (1<< KBRD_C2_PIN);
 3f2:	88 b3       	in	r24, 0x18	; 24
 3f4:	84 60       	ori	r24, 0x04	; 4
 3f6:	88 bb       	out	0x18, r24	; 24
	KBRD_C3_PORT |= (1<< KBRD_C3_PIN);	
 3f8:	88 b3       	in	r24, 0x18	; 24
 3fa:	88 60       	ori	r24, 0x08	; 8
 3fc:	88 bb       	out	0x18, r24	; 24
 3fe:	08 95       	ret

00000400 <kbrd_read>:
	

}

char kbrd_read(void)
{
 400:	cf 93       	push	r28
	//reset_columns();
	char tecla=0;
	//verify first column
	activate_column(0);
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	0e 94 ba 01 	call	0x374	; 0x374 <activate_column>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 408:	2f ef       	ldi	r18, 0xFF	; 255
 40a:	80 e7       	ldi	r24, 0x70	; 112
 40c:	92 e0       	ldi	r25, 0x02	; 2
 40e:	21 50       	subi	r18, 0x01	; 1
 410:	80 40       	sbci	r24, 0x00	; 0
 412:	90 40       	sbci	r25, 0x00	; 0
 414:	e1 f7       	brne	.-8      	; 0x40e <kbrd_read+0xe>
 416:	00 c0       	rjmp	.+0      	; 0x418 <kbrd_read+0x18>
 418:	00 00       	nop

	_delay_ms(KBRD_DELAY);

	switch(KBRD_ROW_MASK_AL())
 41a:	86 b3       	in	r24, 0x16	; 22
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	8f 6e       	ori	r24, 0xEF	; 239
 420:	9f 6f       	ori	r25, 0xFF	; 255
 422:	80 95       	com	r24
 424:	90 95       	com	r25
 426:	9c 01       	movw	r18, r24
 428:	35 95       	asr	r19
 42a:	27 95       	ror	r18
 42c:	35 95       	asr	r19
 42e:	27 95       	ror	r18
 430:	35 95       	asr	r19
 432:	27 95       	ror	r18
 434:	35 95       	asr	r19
 436:	27 95       	ror	r18
 438:	96 b3       	in	r25, 0x16	; 22
 43a:	89 2f       	mov	r24, r25
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	8f 6d       	ori	r24, 0xDF	; 223
 440:	9f 6f       	ori	r25, 0xFF	; 255
 442:	80 95       	com	r24
 444:	90 95       	com	r25
 446:	95 95       	asr	r25
 448:	87 95       	ror	r24
 44a:	95 95       	asr	r25
 44c:	87 95       	ror	r24
 44e:	95 95       	asr	r25
 450:	87 95       	ror	r24
 452:	95 95       	asr	r25
 454:	87 95       	ror	r24
 456:	95 95       	asr	r25
 458:	87 95       	ror	r24
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	82 2b       	or	r24, r18
 460:	93 2b       	or	r25, r19
 462:	26 b3       	in	r18, 0x16	; 22
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	2f 6b       	ori	r18, 0xBF	; 191
 468:	3f 6f       	ori	r19, 0xFF	; 255
 46a:	20 95       	com	r18
 46c:	30 95       	com	r19
 46e:	02 2e       	mov	r0, r18
 470:	23 2f       	mov	r18, r19
 472:	00 0c       	add	r0, r0
 474:	22 1f       	adc	r18, r18
 476:	33 0b       	sbc	r19, r19
 478:	00 0c       	add	r0, r0
 47a:	22 1f       	adc	r18, r18
 47c:	33 1f       	adc	r19, r19
 47e:	22 0f       	add	r18, r18
 480:	33 1f       	adc	r19, r19
 482:	22 0f       	add	r18, r18
 484:	33 1f       	adc	r19, r19
 486:	82 2b       	or	r24, r18
 488:	93 2b       	or	r25, r19
 48a:	26 b3       	in	r18, 0x16	; 22
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	2f 67       	ori	r18, 0x7F	; 127
 490:	3f 6f       	ori	r19, 0xFF	; 255
 492:	20 95       	com	r18
 494:	30 95       	com	r19
 496:	22 0f       	add	r18, r18
 498:	23 2f       	mov	r18, r19
 49a:	22 1f       	adc	r18, r18
 49c:	33 0b       	sbc	r19, r19
 49e:	22 0f       	add	r18, r18
 4a0:	33 1f       	adc	r19, r19
 4a2:	22 0f       	add	r18, r18
 4a4:	33 1f       	adc	r19, r19
 4a6:	22 0f       	add	r18, r18
 4a8:	33 1f       	adc	r19, r19
 4aa:	82 2b       	or	r24, r18
 4ac:	93 2b       	or	r25, r19
 4ae:	82 30       	cpi	r24, 0x02	; 2
 4b0:	91 05       	cpc	r25, r1
 4b2:	59 f0       	breq	.+22     	; 0x4ca <__stack+0x6b>
 4b4:	1c f4       	brge	.+6      	; 0x4bc <__stack+0x5d>
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	71 f0       	breq	.+28     	; 0x4d6 <__stack+0x77>
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <__stack+0x67>
 4bc:	84 30       	cpi	r24, 0x04	; 4
 4be:	91 05       	cpc	r25, r1
 4c0:	31 f0       	breq	.+12     	; 0x4ce <__stack+0x6f>
 4c2:	08 97       	sbiw	r24, 0x08	; 8
 4c4:	31 f0       	breq	.+12     	; 0x4d2 <__stack+0x73>
}

char kbrd_read(void)
{
	//reset_columns();
	char tecla=0;
 4c6:	c0 e0       	ldi	r28, 0x00	; 0
 4c8:	07 c0       	rjmp	.+14     	; 0x4d8 <__stack+0x79>
		{
		case 1:
			 tecla='7';
		break;
		case 2:
			tecla= '4';
 4ca:	c4 e3       	ldi	r28, 0x34	; 52
		break;
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <__stack+0x79>
		case 4:
			tecla= '1';
 4ce:	c1 e3       	ldi	r28, 0x31	; 49
		break;
 4d0:	03 c0       	rjmp	.+6      	; 0x4d8 <__stack+0x79>
		case 8:
			tecla= '.';
 4d2:	ce e2       	ldi	r28, 0x2E	; 46
		break;
 4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <__stack+0x79>
	_delay_ms(KBRD_DELAY);

	switch(KBRD_ROW_MASK_AL())
		{
		case 1:
			 tecla='7';
 4d6:	c7 e3       	ldi	r28, 0x37	; 55
	}	



	//verify second column
	activate_column(1);
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	0e 94 ba 01 	call	0x374	; 0x374 <activate_column>
 4de:	2f ef       	ldi	r18, 0xFF	; 255
 4e0:	80 e7       	ldi	r24, 0x70	; 112
 4e2:	92 e0       	ldi	r25, 0x02	; 2
 4e4:	21 50       	subi	r18, 0x01	; 1
 4e6:	80 40       	sbci	r24, 0x00	; 0
 4e8:	90 40       	sbci	r25, 0x00	; 0
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <__stack+0x85>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <__stack+0x8f>
 4ee:	00 00       	nop

	_delay_ms(KBRD_DELAY);

	switch(KBRD_ROW_MASK_AL())
 4f0:	86 b3       	in	r24, 0x16	; 22
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	8f 6e       	ori	r24, 0xEF	; 239
 4f6:	9f 6f       	ori	r25, 0xFF	; 255
 4f8:	80 95       	com	r24
 4fa:	90 95       	com	r25
 4fc:	9c 01       	movw	r18, r24
 4fe:	35 95       	asr	r19
 500:	27 95       	ror	r18
 502:	35 95       	asr	r19
 504:	27 95       	ror	r18
 506:	35 95       	asr	r19
 508:	27 95       	ror	r18
 50a:	35 95       	asr	r19
 50c:	27 95       	ror	r18
 50e:	96 b3       	in	r25, 0x16	; 22
 510:	89 2f       	mov	r24, r25
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	8f 6d       	ori	r24, 0xDF	; 223
 516:	9f 6f       	ori	r25, 0xFF	; 255
 518:	80 95       	com	r24
 51a:	90 95       	com	r25
 51c:	95 95       	asr	r25
 51e:	87 95       	ror	r24
 520:	95 95       	asr	r25
 522:	87 95       	ror	r24
 524:	95 95       	asr	r25
 526:	87 95       	ror	r24
 528:	95 95       	asr	r25
 52a:	87 95       	ror	r24
 52c:	95 95       	asr	r25
 52e:	87 95       	ror	r24
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	82 2b       	or	r24, r18
 536:	93 2b       	or	r25, r19
 538:	26 b3       	in	r18, 0x16	; 22
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	2f 6b       	ori	r18, 0xBF	; 191
 53e:	3f 6f       	ori	r19, 0xFF	; 255
 540:	20 95       	com	r18
 542:	30 95       	com	r19
 544:	02 2e       	mov	r0, r18
 546:	23 2f       	mov	r18, r19
 548:	00 0c       	add	r0, r0
 54a:	22 1f       	adc	r18, r18
 54c:	33 0b       	sbc	r19, r19
 54e:	00 0c       	add	r0, r0
 550:	22 1f       	adc	r18, r18
 552:	33 1f       	adc	r19, r19
 554:	22 0f       	add	r18, r18
 556:	33 1f       	adc	r19, r19
 558:	22 0f       	add	r18, r18
 55a:	33 1f       	adc	r19, r19
 55c:	82 2b       	or	r24, r18
 55e:	93 2b       	or	r25, r19
 560:	26 b3       	in	r18, 0x16	; 22
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	2f 67       	ori	r18, 0x7F	; 127
 566:	3f 6f       	ori	r19, 0xFF	; 255
 568:	20 95       	com	r18
 56a:	30 95       	com	r19
 56c:	22 0f       	add	r18, r18
 56e:	23 2f       	mov	r18, r19
 570:	22 1f       	adc	r18, r18
 572:	33 0b       	sbc	r19, r19
 574:	22 0f       	add	r18, r18
 576:	33 1f       	adc	r19, r19
 578:	22 0f       	add	r18, r18
 57a:	33 1f       	adc	r19, r19
 57c:	22 0f       	add	r18, r18
 57e:	33 1f       	adc	r19, r19
 580:	82 2b       	or	r24, r18
 582:	93 2b       	or	r25, r19
 584:	82 30       	cpi	r24, 0x02	; 2
 586:	91 05       	cpc	r25, r1
 588:	51 f0       	breq	.+20     	; 0x59e <__stack+0x13f>
 58a:	1c f4       	brge	.+6      	; 0x592 <__stack+0x133>
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	69 f0       	breq	.+26     	; 0x5aa <__stack+0x14b>
 590:	0d c0       	rjmp	.+26     	; 0x5ac <__stack+0x14d>
 592:	84 30       	cpi	r24, 0x04	; 4
 594:	91 05       	cpc	r25, r1
 596:	29 f0       	breq	.+10     	; 0x5a2 <__stack+0x143>
 598:	08 97       	sbiw	r24, 0x08	; 8
 59a:	29 f0       	breq	.+10     	; 0x5a6 <__stack+0x147>
 59c:	07 c0       	rjmp	.+14     	; 0x5ac <__stack+0x14d>
	{
		case 1:
			tecla= '8';
		break;
		case 2:
			tecla= '5';
 59e:	c5 e3       	ldi	r28, 0x35	; 53
		break;
 5a0:	05 c0       	rjmp	.+10     	; 0x5ac <__stack+0x14d>
		case 4:
			tecla= '2';
 5a2:	c2 e3       	ldi	r28, 0x32	; 50
		break;
 5a4:	03 c0       	rjmp	.+6      	; 0x5ac <__stack+0x14d>
		case 8:
			tecla= '0';// +
 5a6:	c0 e3       	ldi	r28, 0x30	; 48
		break;
 5a8:	01 c0       	rjmp	.+2      	; 0x5ac <__stack+0x14d>

	switch(KBRD_ROW_MASK_AL())
	
	{
		case 1:
			tecla= '8';
 5aa:	c8 e3       	ldi	r28, 0x38	; 56
	}	
	
	
	
	//verify thirth column
	activate_column(2);
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	0e 94 ba 01 	call	0x374	; 0x374 <activate_column>
 5b2:	2f ef       	ldi	r18, 0xFF	; 255
 5b4:	80 e7       	ldi	r24, 0x70	; 112
 5b6:	92 e0       	ldi	r25, 0x02	; 2
 5b8:	21 50       	subi	r18, 0x01	; 1
 5ba:	80 40       	sbci	r24, 0x00	; 0
 5bc:	90 40       	sbci	r25, 0x00	; 0
 5be:	e1 f7       	brne	.-8      	; 0x5b8 <__stack+0x159>
 5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <__stack+0x163>
 5c2:	00 00       	nop
	
	_delay_ms(KBRD_DELAY);

	switch(KBRD_ROW_MASK_AL())
 5c4:	86 b3       	in	r24, 0x16	; 22
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	8f 6e       	ori	r24, 0xEF	; 239
 5ca:	9f 6f       	ori	r25, 0xFF	; 255
 5cc:	80 95       	com	r24
 5ce:	90 95       	com	r25
 5d0:	9c 01       	movw	r18, r24
 5d2:	35 95       	asr	r19
 5d4:	27 95       	ror	r18
 5d6:	35 95       	asr	r19
 5d8:	27 95       	ror	r18
 5da:	35 95       	asr	r19
 5dc:	27 95       	ror	r18
 5de:	35 95       	asr	r19
 5e0:	27 95       	ror	r18
 5e2:	96 b3       	in	r25, 0x16	; 22
 5e4:	89 2f       	mov	r24, r25
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	8f 6d       	ori	r24, 0xDF	; 223
 5ea:	9f 6f       	ori	r25, 0xFF	; 255
 5ec:	80 95       	com	r24
 5ee:	90 95       	com	r25
 5f0:	95 95       	asr	r25
 5f2:	87 95       	ror	r24
 5f4:	95 95       	asr	r25
 5f6:	87 95       	ror	r24
 5f8:	95 95       	asr	r25
 5fa:	87 95       	ror	r24
 5fc:	95 95       	asr	r25
 5fe:	87 95       	ror	r24
 600:	95 95       	asr	r25
 602:	87 95       	ror	r24
 604:	88 0f       	add	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	82 2b       	or	r24, r18
 60a:	93 2b       	or	r25, r19
 60c:	26 b3       	in	r18, 0x16	; 22
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	2f 6b       	ori	r18, 0xBF	; 191
 612:	3f 6f       	ori	r19, 0xFF	; 255
 614:	20 95       	com	r18
 616:	30 95       	com	r19
 618:	02 2e       	mov	r0, r18
 61a:	23 2f       	mov	r18, r19
 61c:	00 0c       	add	r0, r0
 61e:	22 1f       	adc	r18, r18
 620:	33 0b       	sbc	r19, r19
 622:	00 0c       	add	r0, r0
 624:	22 1f       	adc	r18, r18
 626:	33 1f       	adc	r19, r19
 628:	22 0f       	add	r18, r18
 62a:	33 1f       	adc	r19, r19
 62c:	22 0f       	add	r18, r18
 62e:	33 1f       	adc	r19, r19
 630:	82 2b       	or	r24, r18
 632:	93 2b       	or	r25, r19
 634:	26 b3       	in	r18, 0x16	; 22
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	2f 67       	ori	r18, 0x7F	; 127
 63a:	3f 6f       	ori	r19, 0xFF	; 255
 63c:	20 95       	com	r18
 63e:	30 95       	com	r19
 640:	22 0f       	add	r18, r18
 642:	23 2f       	mov	r18, r19
 644:	22 1f       	adc	r18, r18
 646:	33 0b       	sbc	r19, r19
 648:	22 0f       	add	r18, r18
 64a:	33 1f       	adc	r19, r19
 64c:	22 0f       	add	r18, r18
 64e:	33 1f       	adc	r19, r19
 650:	22 0f       	add	r18, r18
 652:	33 1f       	adc	r19, r19
 654:	82 2b       	or	r24, r18
 656:	93 2b       	or	r25, r19
 658:	82 30       	cpi	r24, 0x02	; 2
 65a:	91 05       	cpc	r25, r1
 65c:	51 f0       	breq	.+20     	; 0x672 <__stack+0x213>
 65e:	1c f4       	brge	.+6      	; 0x666 <__stack+0x207>
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	69 f0       	breq	.+26     	; 0x67e <__stack+0x21f>
 664:	0d c0       	rjmp	.+26     	; 0x680 <__stack+0x221>
 666:	84 30       	cpi	r24, 0x04	; 4
 668:	91 05       	cpc	r25, r1
 66a:	29 f0       	breq	.+10     	; 0x676 <__stack+0x217>
 66c:	08 97       	sbiw	r24, 0x08	; 8
 66e:	29 f0       	breq	.+10     	; 0x67a <__stack+0x21b>
 670:	07 c0       	rjmp	.+14     	; 0x680 <__stack+0x221>
	{
		case 1:
			tecla= '9';// /
		break;
		case 2:
			tecla= '6';// X
 672:	c6 e3       	ldi	r28, 0x36	; 54
		break;
 674:	05 c0       	rjmp	.+10     	; 0x680 <__stack+0x221>
		case 4:
			tecla= '3';// -
 676:	c3 e3       	ldi	r28, 0x33	; 51
		break;
 678:	03 c0       	rjmp	.+6      	; 0x680 <__stack+0x221>
		case 8:
			tecla= '=';
 67a:	cd e3       	ldi	r28, 0x3D	; 61
		break;
 67c:	01 c0       	rjmp	.+2      	; 0x680 <__stack+0x221>

	switch(KBRD_ROW_MASK_AL())
	
	{
		case 1:
			tecla= '9';// /
 67e:	c9 e3       	ldi	r28, 0x39	; 57
		
	}
	
	
	//verify first column
	activate_column(3);
 680:	83 e0       	ldi	r24, 0x03	; 3
 682:	0e 94 ba 01 	call	0x374	; 0x374 <activate_column>
 686:	2f ef       	ldi	r18, 0xFF	; 255
 688:	80 e7       	ldi	r24, 0x70	; 112
 68a:	92 e0       	ldi	r25, 0x02	; 2
 68c:	21 50       	subi	r18, 0x01	; 1
 68e:	80 40       	sbci	r24, 0x00	; 0
 690:	90 40       	sbci	r25, 0x00	; 0
 692:	e1 f7       	brne	.-8      	; 0x68c <__stack+0x22d>
 694:	00 c0       	rjmp	.+0      	; 0x696 <__stack+0x237>
 696:	00 00       	nop

	_delay_ms(KBRD_DELAY);

	switch(KBRD_ROW_MASK_AL())
 698:	86 b3       	in	r24, 0x16	; 22
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	8f 6e       	ori	r24, 0xEF	; 239
 69e:	9f 6f       	ori	r25, 0xFF	; 255
 6a0:	80 95       	com	r24
 6a2:	90 95       	com	r25
 6a4:	9c 01       	movw	r18, r24
 6a6:	35 95       	asr	r19
 6a8:	27 95       	ror	r18
 6aa:	35 95       	asr	r19
 6ac:	27 95       	ror	r18
 6ae:	35 95       	asr	r19
 6b0:	27 95       	ror	r18
 6b2:	35 95       	asr	r19
 6b4:	27 95       	ror	r18
 6b6:	96 b3       	in	r25, 0x16	; 22
 6b8:	89 2f       	mov	r24, r25
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	8f 6d       	ori	r24, 0xDF	; 223
 6be:	9f 6f       	ori	r25, 0xFF	; 255
 6c0:	80 95       	com	r24
 6c2:	90 95       	com	r25
 6c4:	95 95       	asr	r25
 6c6:	87 95       	ror	r24
 6c8:	95 95       	asr	r25
 6ca:	87 95       	ror	r24
 6cc:	95 95       	asr	r25
 6ce:	87 95       	ror	r24
 6d0:	95 95       	asr	r25
 6d2:	87 95       	ror	r24
 6d4:	95 95       	asr	r25
 6d6:	87 95       	ror	r24
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	82 2b       	or	r24, r18
 6de:	93 2b       	or	r25, r19
 6e0:	26 b3       	in	r18, 0x16	; 22
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	2f 6b       	ori	r18, 0xBF	; 191
 6e6:	3f 6f       	ori	r19, 0xFF	; 255
 6e8:	20 95       	com	r18
 6ea:	30 95       	com	r19
 6ec:	02 2e       	mov	r0, r18
 6ee:	23 2f       	mov	r18, r19
 6f0:	00 0c       	add	r0, r0
 6f2:	22 1f       	adc	r18, r18
 6f4:	33 0b       	sbc	r19, r19
 6f6:	00 0c       	add	r0, r0
 6f8:	22 1f       	adc	r18, r18
 6fa:	33 1f       	adc	r19, r19
 6fc:	22 0f       	add	r18, r18
 6fe:	33 1f       	adc	r19, r19
 700:	22 0f       	add	r18, r18
 702:	33 1f       	adc	r19, r19
 704:	82 2b       	or	r24, r18
 706:	93 2b       	or	r25, r19
 708:	26 b3       	in	r18, 0x16	; 22
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	2f 67       	ori	r18, 0x7F	; 127
 70e:	3f 6f       	ori	r19, 0xFF	; 255
 710:	20 95       	com	r18
 712:	30 95       	com	r19
 714:	22 0f       	add	r18, r18
 716:	23 2f       	mov	r18, r19
 718:	22 1f       	adc	r18, r18
 71a:	33 0b       	sbc	r19, r19
 71c:	22 0f       	add	r18, r18
 71e:	33 1f       	adc	r19, r19
 720:	22 0f       	add	r18, r18
 722:	33 1f       	adc	r19, r19
 724:	22 0f       	add	r18, r18
 726:	33 1f       	adc	r19, r19
 728:	82 2b       	or	r24, r18
 72a:	93 2b       	or	r25, r19
 72c:	82 30       	cpi	r24, 0x02	; 2
 72e:	91 05       	cpc	r25, r1
 730:	51 f0       	breq	.+20     	; 0x746 <__stack+0x2e7>
 732:	1c f4       	brge	.+6      	; 0x73a <__stack+0x2db>
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	69 f0       	breq	.+26     	; 0x752 <__stack+0x2f3>
 738:	0d c0       	rjmp	.+26     	; 0x754 <__stack+0x2f5>
 73a:	84 30       	cpi	r24, 0x04	; 4
 73c:	91 05       	cpc	r25, r1
 73e:	29 f0       	breq	.+10     	; 0x74a <__stack+0x2eb>
 740:	08 97       	sbiw	r24, 0x08	; 8
 742:	29 f0       	breq	.+10     	; 0x74e <__stack+0x2ef>
 744:	07 c0       	rjmp	.+14     	; 0x754 <__stack+0x2f5>
	{
		case 1:
			tecla= '/';
		break;
		case 2:
			tecla= 'X';
 746:	c8 e5       	ldi	r28, 0x58	; 88
		break;
 748:	05 c0       	rjmp	.+10     	; 0x754 <__stack+0x2f5>
		case 4:
			tecla= '-';
 74a:	cd e2       	ldi	r28, 0x2D	; 45
		break;
 74c:	03 c0       	rjmp	.+6      	; 0x754 <__stack+0x2f5>
		case 8:
			tecla= '+';
 74e:	cb e2       	ldi	r28, 0x2B	; 43
		break;
 750:	01 c0       	rjmp	.+2      	; 0x754 <__stack+0x2f5>
	_delay_ms(KBRD_DELAY);

	switch(KBRD_ROW_MASK_AL())
	{
		case 1:
			tecla= '/';
 752:	cf e2       	ldi	r28, 0x2F	; 47
		case 8:
			tecla= '+';
		break;
	}	
	
	reset_columns();
 754:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <reset_columns>
	{
		return tecla;
	}
	else{return 0;}
	
}
 758:	8c 2f       	mov	r24, r28
 75a:	cf 91       	pop	r28
 75c:	08 95       	ret

0000075e <main>:
int main(void)
{
    char key;
	int i;
	
	lcd_init(LCD_DISP_ON);
 75e:	8c e0       	ldi	r24, 0x0C	; 12
 760:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_init>
	kbrd_init();
 764:	0e 94 89 01 	call	0x312	; 0x312 <kbrd_init>
	lcd_home();
 768:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_home>
	lcd_puts("Practica");
 76c:	80 e6       	ldi	r24, 0x60	; 96
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_puts>
 774:	2f e7       	ldi	r18, 0x7F	; 127
 776:	88 e3       	ldi	r24, 0x38	; 56
 778:	91 e0       	ldi	r25, 0x01	; 1
 77a:	21 50       	subi	r18, 0x01	; 1
 77c:	80 40       	sbci	r24, 0x00	; 0
 77e:	90 40       	sbci	r25, 0x00	; 0
 780:	e1 f7       	brne	.-8      	; 0x77a <main+0x1c>
 782:	00 c0       	rjmp	.+0      	; 0x784 <main+0x26>
 784:	00 00       	nop
	_delay_ms(50);
	lcd_clrscr();
 786:	0e 94 11 01 	call	0x222	; 0x222 <lcd_clrscr>
	
    while (1)
    {
		key = kbrd_read();
 78a:	0e 94 00 02 	call	0x400	; 0x400 <kbrd_read>
 78e:	c8 2f       	mov	r28, r24
		if(key != 0){
 790:	88 23       	and	r24, r24
 792:	d9 f3       	breq	.-10     	; 0x78a <main+0x2c>
			lcd_gotoxy(i,0);
 794:	60 e0       	ldi	r22, 0x00	; 0
 796:	80 2f       	mov	r24, r16
 798:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
			lcd_putc(key);
 79c:	8c 2f       	mov	r24, r28
 79e:	0e 94 19 01 	call	0x232	; 0x232 <lcd_putc>
			i++;
 7a2:	0f 5f       	subi	r16, 0xFF	; 255
 7a4:	1f 4f       	sbci	r17, 0xFF	; 255
 7a6:	f1 cf       	rjmp	.-30     	; 0x78a <main+0x2c>

000007a8 <_exit>:
 7a8:	f8 94       	cli

000007aa <__stop_program>:
 7aa:	ff cf       	rjmp	.-2      	; 0x7aa <__stop_program>
