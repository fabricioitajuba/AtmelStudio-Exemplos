
Ex08-EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  0000184a  000018fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000184a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800128  00800128  00001926  2**0
                  ALLOC
  3 .eeprom       0000000d  00810000  00810000  00001926  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00001933  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001990  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000148  00000000  00000000  000019d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000191c  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bd5  00000000  00000000  00003434  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001124  00000000  00000000  00004009  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000260  00000000  00000000  00005130  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005d4  00000000  00000000  00005390  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001704  00000000  00000000  00005964  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c8  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	ea e4       	ldi	r30, 0x4A	; 74
     17e:	f8 e1       	ldi	r31, 0x18	; 24
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a8 32       	cpi	r26, 0x28	; 40
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	a8 e2       	ldi	r26, 0x28	; 40
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ac 33       	cpi	r26, 0x3C	; 60
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 09 06 	call	0xc12	; 0xc12 <main>
     1a0:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <pinMode>:
#include "gpio.h"
#include <avr/io.h>

void pinMode(int pino, int Mode){

	if(Mode == INPUT){
     1a8:	61 15       	cp	r22, r1
     1aa:	71 05       	cpc	r23, r1
     1ac:	09 f0       	breq	.+2      	; 0x1b0 <pinMode+0x8>
     1ae:	a0 c0       	rjmp	.+320    	; 0x2f0 <pinMode+0x148>
		if(pino == 0)
     1b0:	00 97       	sbiw	r24, 0x00	; 0
     1b2:	21 f4       	brne	.+8      	; 0x1bc <pinMode+0x14>
			DDRB &= ~(1 << PINB0);
     1b4:	84 b1       	in	r24, 0x04	; 4
     1b6:	8e 7f       	andi	r24, 0xFE	; 254
     1b8:	84 b9       	out	0x04, r24	; 4
     1ba:	08 95       	ret
		else if(pino == 1)
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	91 05       	cpc	r25, r1
     1c0:	21 f4       	brne	.+8      	; 0x1ca <pinMode+0x22>
			DDRB &= ~(1 << PINB1);
     1c2:	84 b1       	in	r24, 0x04	; 4
     1c4:	8d 7f       	andi	r24, 0xFD	; 253
     1c6:	84 b9       	out	0x04, r24	; 4
     1c8:	08 95       	ret
		else if(pino == 2)
     1ca:	82 30       	cpi	r24, 0x02	; 2
     1cc:	91 05       	cpc	r25, r1
     1ce:	21 f4       	brne	.+8      	; 0x1d8 <pinMode+0x30>
			DDRB &= ~(1 << PINB2);
     1d0:	84 b1       	in	r24, 0x04	; 4
     1d2:	8b 7f       	andi	r24, 0xFB	; 251
     1d4:	84 b9       	out	0x04, r24	; 4
     1d6:	08 95       	ret
		else if(pino == 3)
     1d8:	83 30       	cpi	r24, 0x03	; 3
     1da:	91 05       	cpc	r25, r1
     1dc:	21 f4       	brne	.+8      	; 0x1e6 <pinMode+0x3e>
			DDRB &= ~(1 << PINB3);
     1de:	84 b1       	in	r24, 0x04	; 4
     1e0:	87 7f       	andi	r24, 0xF7	; 247
     1e2:	84 b9       	out	0x04, r24	; 4
     1e4:	08 95       	ret
		else if(pino == 4)
     1e6:	84 30       	cpi	r24, 0x04	; 4
     1e8:	91 05       	cpc	r25, r1
     1ea:	21 f4       	brne	.+8      	; 0x1f4 <pinMode+0x4c>
			DDRB &= ~(1 << PINB4);
     1ec:	84 b1       	in	r24, 0x04	; 4
     1ee:	8f 7e       	andi	r24, 0xEF	; 239
     1f0:	84 b9       	out	0x04, r24	; 4
     1f2:	08 95       	ret
		else if(pino == 5)
     1f4:	85 30       	cpi	r24, 0x05	; 5
     1f6:	91 05       	cpc	r25, r1
     1f8:	21 f4       	brne	.+8      	; 0x202 <pinMode+0x5a>
			DDRB &= ~(1 << PINB5);
     1fa:	84 b1       	in	r24, 0x04	; 4
     1fc:	8f 7d       	andi	r24, 0xDF	; 223
     1fe:	84 b9       	out	0x04, r24	; 4
     200:	08 95       	ret
		else if(pino == 6)
     202:	86 30       	cpi	r24, 0x06	; 6
     204:	91 05       	cpc	r25, r1
     206:	21 f4       	brne	.+8      	; 0x210 <pinMode+0x68>
			DDRB &= ~(1 << PINB6);
     208:	84 b1       	in	r24, 0x04	; 4
     20a:	8f 7b       	andi	r24, 0xBF	; 191
     20c:	84 b9       	out	0x04, r24	; 4
     20e:	08 95       	ret
		else if(pino == 7)
     210:	87 30       	cpi	r24, 0x07	; 7
     212:	91 05       	cpc	r25, r1
     214:	21 f4       	brne	.+8      	; 0x21e <pinMode+0x76>
			DDRB &= ~(1 << PINB7);
     216:	84 b1       	in	r24, 0x04	; 4
     218:	8f 77       	andi	r24, 0x7F	; 127
     21a:	84 b9       	out	0x04, r24	; 4
     21c:	08 95       	ret
		else if(pino == 8)
     21e:	88 30       	cpi	r24, 0x08	; 8
     220:	91 05       	cpc	r25, r1
     222:	21 f4       	brne	.+8      	; 0x22c <pinMode+0x84>
			DDRC &= ~(1 << PINC0);
     224:	87 b1       	in	r24, 0x07	; 7
     226:	8e 7f       	andi	r24, 0xFE	; 254
     228:	87 b9       	out	0x07, r24	; 7
     22a:	08 95       	ret
		else if(pino == 9)
     22c:	89 30       	cpi	r24, 0x09	; 9
     22e:	91 05       	cpc	r25, r1
     230:	21 f4       	brne	.+8      	; 0x23a <pinMode+0x92>
			DDRC &= ~(1 << PINC1);
     232:	87 b1       	in	r24, 0x07	; 7
     234:	8d 7f       	andi	r24, 0xFD	; 253
     236:	87 b9       	out	0x07, r24	; 7
     238:	08 95       	ret
		else if(pino == 10)
     23a:	8a 30       	cpi	r24, 0x0A	; 10
     23c:	91 05       	cpc	r25, r1
     23e:	21 f4       	brne	.+8      	; 0x248 <pinMode+0xa0>
			DDRC &= ~(1 << PINC2);
     240:	87 b1       	in	r24, 0x07	; 7
     242:	8b 7f       	andi	r24, 0xFB	; 251
     244:	87 b9       	out	0x07, r24	; 7
     246:	08 95       	ret
		else if(pino == 11)
     248:	8b 30       	cpi	r24, 0x0B	; 11
     24a:	91 05       	cpc	r25, r1
     24c:	21 f4       	brne	.+8      	; 0x256 <pinMode+0xae>
			DDRC &= ~(1 << PINC3);
     24e:	87 b1       	in	r24, 0x07	; 7
     250:	87 7f       	andi	r24, 0xF7	; 247
     252:	87 b9       	out	0x07, r24	; 7
     254:	08 95       	ret
		else if(pino == 12)
     256:	8c 30       	cpi	r24, 0x0C	; 12
     258:	91 05       	cpc	r25, r1
     25a:	21 f4       	brne	.+8      	; 0x264 <pinMode+0xbc>
			DDRC &= ~(1 << PINC4);
     25c:	87 b1       	in	r24, 0x07	; 7
     25e:	8f 7e       	andi	r24, 0xEF	; 239
     260:	87 b9       	out	0x07, r24	; 7
     262:	08 95       	ret
		else if(pino == 13)
     264:	8d 30       	cpi	r24, 0x0D	; 13
     266:	91 05       	cpc	r25, r1
     268:	21 f4       	brne	.+8      	; 0x272 <pinMode+0xca>
			DDRC &= ~(1 << PINC5);
     26a:	87 b1       	in	r24, 0x07	; 7
     26c:	8f 7d       	andi	r24, 0xDF	; 223
     26e:	87 b9       	out	0x07, r24	; 7
     270:	08 95       	ret
		else if(pino == 14)
     272:	8e 30       	cpi	r24, 0x0E	; 14
     274:	91 05       	cpc	r25, r1
     276:	21 f4       	brne	.+8      	; 0x280 <pinMode+0xd8>
			DDRC &= ~(1 << PINC6);
     278:	87 b1       	in	r24, 0x07	; 7
     27a:	8f 7b       	andi	r24, 0xBF	; 191
     27c:	87 b9       	out	0x07, r24	; 7
     27e:	08 95       	ret
		else if(pino == 15)
     280:	8f 30       	cpi	r24, 0x0F	; 15
     282:	91 05       	cpc	r25, r1
     284:	21 f4       	brne	.+8      	; 0x28e <pinMode+0xe6>
			DDRD &= ~(1 << PIND0);
     286:	8a b1       	in	r24, 0x0a	; 10
     288:	8e 7f       	andi	r24, 0xFE	; 254
     28a:	8a b9       	out	0x0a, r24	; 10
     28c:	08 95       	ret
		else if(pino == 16)
     28e:	80 31       	cpi	r24, 0x10	; 16
     290:	91 05       	cpc	r25, r1
     292:	21 f4       	brne	.+8      	; 0x29c <pinMode+0xf4>
			DDRD &= ~(1 << PIND1);
     294:	8a b1       	in	r24, 0x0a	; 10
     296:	8d 7f       	andi	r24, 0xFD	; 253
     298:	8a b9       	out	0x0a, r24	; 10
     29a:	08 95       	ret
		else if(pino == 17)
     29c:	81 31       	cpi	r24, 0x11	; 17
     29e:	91 05       	cpc	r25, r1
     2a0:	21 f4       	brne	.+8      	; 0x2aa <pinMode+0x102>
			DDRD &= ~(1 << PIND2);
     2a2:	8a b1       	in	r24, 0x0a	; 10
     2a4:	8b 7f       	andi	r24, 0xFB	; 251
     2a6:	8a b9       	out	0x0a, r24	; 10
     2a8:	08 95       	ret
		else if(pino == 18)
     2aa:	82 31       	cpi	r24, 0x12	; 18
     2ac:	91 05       	cpc	r25, r1
     2ae:	21 f4       	brne	.+8      	; 0x2b8 <pinMode+0x110>
			DDRD &= ~(1 << PIND3);
     2b0:	8a b1       	in	r24, 0x0a	; 10
     2b2:	87 7f       	andi	r24, 0xF7	; 247
     2b4:	8a b9       	out	0x0a, r24	; 10
     2b6:	08 95       	ret
		else if(pino == 19)
     2b8:	83 31       	cpi	r24, 0x13	; 19
     2ba:	91 05       	cpc	r25, r1
     2bc:	21 f4       	brne	.+8      	; 0x2c6 <pinMode+0x11e>
			DDRD &= ~(1 << PIND4);
     2be:	8a b1       	in	r24, 0x0a	; 10
     2c0:	8f 7e       	andi	r24, 0xEF	; 239
     2c2:	8a b9       	out	0x0a, r24	; 10
     2c4:	08 95       	ret
		else if(pino == 20)
     2c6:	84 31       	cpi	r24, 0x14	; 20
     2c8:	91 05       	cpc	r25, r1
     2ca:	21 f4       	brne	.+8      	; 0x2d4 <pinMode+0x12c>
			DDRD &= ~(1 << PIND5);
     2cc:	8a b1       	in	r24, 0x0a	; 10
     2ce:	8f 7d       	andi	r24, 0xDF	; 223
     2d0:	8a b9       	out	0x0a, r24	; 10
     2d2:	08 95       	ret
		else if(pino == 21)
     2d4:	85 31       	cpi	r24, 0x15	; 21
     2d6:	91 05       	cpc	r25, r1
     2d8:	21 f4       	brne	.+8      	; 0x2e2 <pinMode+0x13a>
			DDRD &= ~(1 << PIND6);
     2da:	8a b1       	in	r24, 0x0a	; 10
     2dc:	8f 7b       	andi	r24, 0xBF	; 191
     2de:	8a b9       	out	0x0a, r24	; 10
     2e0:	08 95       	ret
		else if(pino == 22)
     2e2:	46 97       	sbiw	r24, 0x16	; 22
     2e4:	09 f0       	breq	.+2      	; 0x2e8 <pinMode+0x140>
     2e6:	a6 c0       	rjmp	.+332    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			DDRD &= ~(1 << PIND7);
     2e8:	8a b1       	in	r24, 0x0a	; 10
     2ea:	8f 77       	andi	r24, 0x7F	; 127
     2ec:	8a b9       	out	0x0a, r24	; 10
     2ee:	08 95       	ret
	}
	else if(Mode == OUTPUT){
     2f0:	61 30       	cpi	r22, 0x01	; 1
     2f2:	71 05       	cpc	r23, r1
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <pinMode+0x150>
     2f6:	9e c0       	rjmp	.+316    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
		if(pino == 0)
     2f8:	00 97       	sbiw	r24, 0x00	; 0
     2fa:	21 f4       	brne	.+8      	; 0x304 <pinMode+0x15c>
			DDRB |= (1 << PINB0);
     2fc:	84 b1       	in	r24, 0x04	; 4
     2fe:	81 60       	ori	r24, 0x01	; 1
     300:	84 b9       	out	0x04, r24	; 4
     302:	08 95       	ret
		else if(pino == 1)
     304:	81 30       	cpi	r24, 0x01	; 1
     306:	91 05       	cpc	r25, r1
     308:	21 f4       	brne	.+8      	; 0x312 <pinMode+0x16a>
			DDRB |= (1 << PINB1);
     30a:	84 b1       	in	r24, 0x04	; 4
     30c:	82 60       	ori	r24, 0x02	; 2
     30e:	84 b9       	out	0x04, r24	; 4
     310:	08 95       	ret
		else if(pino == 2)
     312:	82 30       	cpi	r24, 0x02	; 2
     314:	91 05       	cpc	r25, r1
     316:	21 f4       	brne	.+8      	; 0x320 <pinMode+0x178>
			DDRB |= (1 << PINB2);
     318:	84 b1       	in	r24, 0x04	; 4
     31a:	84 60       	ori	r24, 0x04	; 4
     31c:	84 b9       	out	0x04, r24	; 4
     31e:	08 95       	ret
		else if(pino == 3)
     320:	83 30       	cpi	r24, 0x03	; 3
     322:	91 05       	cpc	r25, r1
     324:	21 f4       	brne	.+8      	; 0x32e <pinMode+0x186>
			DDRB |= (1 << PINB3);
     326:	84 b1       	in	r24, 0x04	; 4
     328:	88 60       	ori	r24, 0x08	; 8
     32a:	84 b9       	out	0x04, r24	; 4
     32c:	08 95       	ret
		else if(pino == 4)
     32e:	84 30       	cpi	r24, 0x04	; 4
     330:	91 05       	cpc	r25, r1
     332:	21 f4       	brne	.+8      	; 0x33c <pinMode+0x194>
			DDRB |= (1 << PINB4);
     334:	84 b1       	in	r24, 0x04	; 4
     336:	80 61       	ori	r24, 0x10	; 16
     338:	84 b9       	out	0x04, r24	; 4
     33a:	08 95       	ret
		else if(pino == 5)
     33c:	85 30       	cpi	r24, 0x05	; 5
     33e:	91 05       	cpc	r25, r1
     340:	21 f4       	brne	.+8      	; 0x34a <pinMode+0x1a2>
			DDRB |= (1 << PINB5);
     342:	84 b1       	in	r24, 0x04	; 4
     344:	80 62       	ori	r24, 0x20	; 32
     346:	84 b9       	out	0x04, r24	; 4
     348:	08 95       	ret
		else if(pino == 6)
     34a:	86 30       	cpi	r24, 0x06	; 6
     34c:	91 05       	cpc	r25, r1
     34e:	21 f4       	brne	.+8      	; 0x358 <pinMode+0x1b0>
			DDRB |= (1 << PINB6);
     350:	84 b1       	in	r24, 0x04	; 4
     352:	80 64       	ori	r24, 0x40	; 64
     354:	84 b9       	out	0x04, r24	; 4
     356:	08 95       	ret
		else if(pino == 7)
     358:	87 30       	cpi	r24, 0x07	; 7
     35a:	91 05       	cpc	r25, r1
     35c:	21 f4       	brne	.+8      	; 0x366 <pinMode+0x1be>
			DDRB |= (1 << PINB7);
     35e:	84 b1       	in	r24, 0x04	; 4
     360:	80 68       	ori	r24, 0x80	; 128
     362:	84 b9       	out	0x04, r24	; 4
     364:	08 95       	ret
		else if(pino == 8)
     366:	88 30       	cpi	r24, 0x08	; 8
     368:	91 05       	cpc	r25, r1
     36a:	21 f4       	brne	.+8      	; 0x374 <pinMode+0x1cc>
			DDRC |= (1 << PINC0);
     36c:	87 b1       	in	r24, 0x07	; 7
     36e:	81 60       	ori	r24, 0x01	; 1
     370:	87 b9       	out	0x07, r24	; 7
     372:	08 95       	ret
		else if(pino == 9)
     374:	89 30       	cpi	r24, 0x09	; 9
     376:	91 05       	cpc	r25, r1
     378:	21 f4       	brne	.+8      	; 0x382 <pinMode+0x1da>
			DDRC |= (1 << PINC1);
     37a:	87 b1       	in	r24, 0x07	; 7
     37c:	82 60       	ori	r24, 0x02	; 2
     37e:	87 b9       	out	0x07, r24	; 7
     380:	08 95       	ret
		else if(pino == 10)
     382:	8a 30       	cpi	r24, 0x0A	; 10
     384:	91 05       	cpc	r25, r1
     386:	21 f4       	brne	.+8      	; 0x390 <pinMode+0x1e8>
			DDRC |= (1 << PINC2);
     388:	87 b1       	in	r24, 0x07	; 7
     38a:	84 60       	ori	r24, 0x04	; 4
     38c:	87 b9       	out	0x07, r24	; 7
     38e:	08 95       	ret
		else if(pino == 11)
     390:	8b 30       	cpi	r24, 0x0B	; 11
     392:	91 05       	cpc	r25, r1
     394:	21 f4       	brne	.+8      	; 0x39e <pinMode+0x1f6>
			DDRC |= (1 << PINC3);
     396:	87 b1       	in	r24, 0x07	; 7
     398:	88 60       	ori	r24, 0x08	; 8
     39a:	87 b9       	out	0x07, r24	; 7
     39c:	08 95       	ret
		else if(pino == 12)
     39e:	8c 30       	cpi	r24, 0x0C	; 12
     3a0:	91 05       	cpc	r25, r1
     3a2:	21 f4       	brne	.+8      	; 0x3ac <pinMode+0x204>
			DDRC |= (1 << PINC4);
     3a4:	87 b1       	in	r24, 0x07	; 7
     3a6:	80 61       	ori	r24, 0x10	; 16
     3a8:	87 b9       	out	0x07, r24	; 7
     3aa:	08 95       	ret
		else if(pino == 13)
     3ac:	8d 30       	cpi	r24, 0x0D	; 13
     3ae:	91 05       	cpc	r25, r1
     3b0:	21 f4       	brne	.+8      	; 0x3ba <pinMode+0x212>
			DDRC |= (1 << PINC5);
     3b2:	87 b1       	in	r24, 0x07	; 7
     3b4:	80 62       	ori	r24, 0x20	; 32
     3b6:	87 b9       	out	0x07, r24	; 7
     3b8:	08 95       	ret
		else if(pino == 14)
     3ba:	8e 30       	cpi	r24, 0x0E	; 14
     3bc:	91 05       	cpc	r25, r1
     3be:	21 f4       	brne	.+8      	; 0x3c8 <pinMode+0x220>
			DDRC |= (1 << PINC6);
     3c0:	87 b1       	in	r24, 0x07	; 7
     3c2:	80 64       	ori	r24, 0x40	; 64
     3c4:	87 b9       	out	0x07, r24	; 7
     3c6:	08 95       	ret
		else if(pino == 15)
     3c8:	8f 30       	cpi	r24, 0x0F	; 15
     3ca:	91 05       	cpc	r25, r1
     3cc:	21 f4       	brne	.+8      	; 0x3d6 <pinMode+0x22e>
			DDRD |= (1 << PIND0);
     3ce:	8a b1       	in	r24, 0x0a	; 10
     3d0:	81 60       	ori	r24, 0x01	; 1
     3d2:	8a b9       	out	0x0a, r24	; 10
     3d4:	08 95       	ret
		else if(pino == 16)
     3d6:	80 31       	cpi	r24, 0x10	; 16
     3d8:	91 05       	cpc	r25, r1
     3da:	21 f4       	brne	.+8      	; 0x3e4 <pinMode+0x23c>
			DDRD |= (1 << PIND1);
     3dc:	8a b1       	in	r24, 0x0a	; 10
     3de:	82 60       	ori	r24, 0x02	; 2
     3e0:	8a b9       	out	0x0a, r24	; 10
     3e2:	08 95       	ret
		else if(pino == 17)
     3e4:	81 31       	cpi	r24, 0x11	; 17
     3e6:	91 05       	cpc	r25, r1
     3e8:	21 f4       	brne	.+8      	; 0x3f2 <pinMode+0x24a>
			DDRD |= (1 << PIND2);
     3ea:	8a b1       	in	r24, 0x0a	; 10
     3ec:	84 60       	ori	r24, 0x04	; 4
     3ee:	8a b9       	out	0x0a, r24	; 10
     3f0:	08 95       	ret
		else if(pino == 18)
     3f2:	82 31       	cpi	r24, 0x12	; 18
     3f4:	91 05       	cpc	r25, r1
     3f6:	21 f4       	brne	.+8      	; 0x400 <__EEPROM_REGION_LENGTH__>
			DDRD |= (1 << PIND3);
     3f8:	8a b1       	in	r24, 0x0a	; 10
     3fa:	88 60       	ori	r24, 0x08	; 8
     3fc:	8a b9       	out	0x0a, r24	; 10
     3fe:	08 95       	ret
		else if(pino == 19)
     400:	83 31       	cpi	r24, 0x13	; 19
     402:	91 05       	cpc	r25, r1
     404:	21 f4       	brne	.+8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
			DDRD |= (1 << PIND4);
     406:	8a b1       	in	r24, 0x0a	; 10
     408:	80 61       	ori	r24, 0x10	; 16
     40a:	8a b9       	out	0x0a, r24	; 10
     40c:	08 95       	ret
		else if(pino == 20)
     40e:	84 31       	cpi	r24, 0x14	; 20
     410:	91 05       	cpc	r25, r1
     412:	21 f4       	brne	.+8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			DDRD |= (1 << PIND5);
     414:	8a b1       	in	r24, 0x0a	; 10
     416:	80 62       	ori	r24, 0x20	; 32
     418:	8a b9       	out	0x0a, r24	; 10
     41a:	08 95       	ret
		else if(pino == 21)
     41c:	85 31       	cpi	r24, 0x15	; 21
     41e:	91 05       	cpc	r25, r1
     420:	21 f4       	brne	.+8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			DDRD |= (1 << PIND6);
     422:	8a b1       	in	r24, 0x0a	; 10
     424:	80 64       	ori	r24, 0x40	; 64
     426:	8a b9       	out	0x0a, r24	; 10
     428:	08 95       	ret
		else if(pino == 22)
     42a:	46 97       	sbiw	r24, 0x16	; 22
     42c:	19 f4       	brne	.+6      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
			DDRD |= (1 << PIND7);
     42e:	8a b1       	in	r24, 0x0a	; 10
     430:	80 68       	ori	r24, 0x80	; 128
     432:	8a b9       	out	0x0a, r24	; 10
     434:	08 95       	ret

00000436 <digitalWrite>:
	}
}

void digitalWrite(int pino, int state){

	if(state == LOW){
     436:	61 15       	cp	r22, r1
     438:	71 05       	cpc	r23, r1
     43a:	09 f0       	breq	.+2      	; 0x43e <digitalWrite+0x8>
     43c:	a0 c0       	rjmp	.+320    	; 0x57e <digitalWrite+0x148>
		if(pino == 0)
     43e:	00 97       	sbiw	r24, 0x00	; 0
     440:	21 f4       	brne	.+8      	; 0x44a <digitalWrite+0x14>
			PORTB &= ~(1 << PB0);
     442:	85 b1       	in	r24, 0x05	; 5
     444:	8e 7f       	andi	r24, 0xFE	; 254
     446:	85 b9       	out	0x05, r24	; 5
     448:	08 95       	ret
		else if(pino == 1)
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	91 05       	cpc	r25, r1
     44e:	21 f4       	brne	.+8      	; 0x458 <digitalWrite+0x22>
			PORTB &= ~(1 << PB1);
     450:	85 b1       	in	r24, 0x05	; 5
     452:	8d 7f       	andi	r24, 0xFD	; 253
     454:	85 b9       	out	0x05, r24	; 5
     456:	08 95       	ret
		else if(pino == 2)
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	91 05       	cpc	r25, r1
     45c:	21 f4       	brne	.+8      	; 0x466 <digitalWrite+0x30>
			PORTB &= ~(1 << PB2);
     45e:	85 b1       	in	r24, 0x05	; 5
     460:	8b 7f       	andi	r24, 0xFB	; 251
     462:	85 b9       	out	0x05, r24	; 5
     464:	08 95       	ret
		else if(pino == 3)
     466:	83 30       	cpi	r24, 0x03	; 3
     468:	91 05       	cpc	r25, r1
     46a:	21 f4       	brne	.+8      	; 0x474 <digitalWrite+0x3e>
			PORTB &= ~(1 << PB3);
     46c:	85 b1       	in	r24, 0x05	; 5
     46e:	87 7f       	andi	r24, 0xF7	; 247
     470:	85 b9       	out	0x05, r24	; 5
     472:	08 95       	ret
		else if(pino == 4)
     474:	84 30       	cpi	r24, 0x04	; 4
     476:	91 05       	cpc	r25, r1
     478:	21 f4       	brne	.+8      	; 0x482 <digitalWrite+0x4c>
			PORTB &= ~(1 << PB4);
     47a:	85 b1       	in	r24, 0x05	; 5
     47c:	8f 7e       	andi	r24, 0xEF	; 239
     47e:	85 b9       	out	0x05, r24	; 5
     480:	08 95       	ret
		else if(pino == 5)
     482:	85 30       	cpi	r24, 0x05	; 5
     484:	91 05       	cpc	r25, r1
     486:	21 f4       	brne	.+8      	; 0x490 <digitalWrite+0x5a>
			PORTB &= ~(1 << PB5);
     488:	85 b1       	in	r24, 0x05	; 5
     48a:	8f 7d       	andi	r24, 0xDF	; 223
     48c:	85 b9       	out	0x05, r24	; 5
     48e:	08 95       	ret
		else if(pino == 6)
     490:	86 30       	cpi	r24, 0x06	; 6
     492:	91 05       	cpc	r25, r1
     494:	21 f4       	brne	.+8      	; 0x49e <digitalWrite+0x68>
			PORTB &= ~(1 << PB6);
     496:	85 b1       	in	r24, 0x05	; 5
     498:	8f 7b       	andi	r24, 0xBF	; 191
     49a:	85 b9       	out	0x05, r24	; 5
     49c:	08 95       	ret
		else if(pino == 7)
     49e:	87 30       	cpi	r24, 0x07	; 7
     4a0:	91 05       	cpc	r25, r1
     4a2:	21 f4       	brne	.+8      	; 0x4ac <digitalWrite+0x76>
			PORTB &= ~(1 << PB7);
     4a4:	85 b1       	in	r24, 0x05	; 5
     4a6:	8f 77       	andi	r24, 0x7F	; 127
     4a8:	85 b9       	out	0x05, r24	; 5
     4aa:	08 95       	ret
		else if(pino == 8)
     4ac:	88 30       	cpi	r24, 0x08	; 8
     4ae:	91 05       	cpc	r25, r1
     4b0:	21 f4       	brne	.+8      	; 0x4ba <digitalWrite+0x84>
			PORTC &= ~(1 << PC0);
     4b2:	88 b1       	in	r24, 0x08	; 8
     4b4:	8e 7f       	andi	r24, 0xFE	; 254
     4b6:	88 b9       	out	0x08, r24	; 8
     4b8:	08 95       	ret
		else if(pino == 9)
     4ba:	89 30       	cpi	r24, 0x09	; 9
     4bc:	91 05       	cpc	r25, r1
     4be:	21 f4       	brne	.+8      	; 0x4c8 <digitalWrite+0x92>
			PORTC &= ~(1 << PC1);
     4c0:	88 b1       	in	r24, 0x08	; 8
     4c2:	8d 7f       	andi	r24, 0xFD	; 253
     4c4:	88 b9       	out	0x08, r24	; 8
     4c6:	08 95       	ret
		else if(pino == 10)
     4c8:	8a 30       	cpi	r24, 0x0A	; 10
     4ca:	91 05       	cpc	r25, r1
     4cc:	21 f4       	brne	.+8      	; 0x4d6 <digitalWrite+0xa0>
			PORTC &= ~(1 << PC2);
     4ce:	88 b1       	in	r24, 0x08	; 8
     4d0:	8b 7f       	andi	r24, 0xFB	; 251
     4d2:	88 b9       	out	0x08, r24	; 8
     4d4:	08 95       	ret
		else if(pino == 11)
     4d6:	8b 30       	cpi	r24, 0x0B	; 11
     4d8:	91 05       	cpc	r25, r1
     4da:	21 f4       	brne	.+8      	; 0x4e4 <digitalWrite+0xae>
			PORTC &= ~(1 << PC3);
     4dc:	88 b1       	in	r24, 0x08	; 8
     4de:	87 7f       	andi	r24, 0xF7	; 247
     4e0:	88 b9       	out	0x08, r24	; 8
     4e2:	08 95       	ret
		else if(pino == 12)
     4e4:	8c 30       	cpi	r24, 0x0C	; 12
     4e6:	91 05       	cpc	r25, r1
     4e8:	21 f4       	brne	.+8      	; 0x4f2 <digitalWrite+0xbc>
			PORTC &= ~(1 << PC4);
     4ea:	88 b1       	in	r24, 0x08	; 8
     4ec:	8f 7e       	andi	r24, 0xEF	; 239
     4ee:	88 b9       	out	0x08, r24	; 8
     4f0:	08 95       	ret
		else if(pino == 13)
     4f2:	8d 30       	cpi	r24, 0x0D	; 13
     4f4:	91 05       	cpc	r25, r1
     4f6:	21 f4       	brne	.+8      	; 0x500 <digitalWrite+0xca>
			PORTC &= ~(1 << PC5);
     4f8:	88 b1       	in	r24, 0x08	; 8
     4fa:	8f 7d       	andi	r24, 0xDF	; 223
     4fc:	88 b9       	out	0x08, r24	; 8
     4fe:	08 95       	ret
		else if(pino == 14)
     500:	8e 30       	cpi	r24, 0x0E	; 14
     502:	91 05       	cpc	r25, r1
     504:	21 f4       	brne	.+8      	; 0x50e <digitalWrite+0xd8>
			PORTC &= ~(1 << PC6);
     506:	88 b1       	in	r24, 0x08	; 8
     508:	8f 7b       	andi	r24, 0xBF	; 191
     50a:	88 b9       	out	0x08, r24	; 8
     50c:	08 95       	ret
		else if(pino == 15)
     50e:	8f 30       	cpi	r24, 0x0F	; 15
     510:	91 05       	cpc	r25, r1
     512:	21 f4       	brne	.+8      	; 0x51c <digitalWrite+0xe6>
			PORTD &= ~(1 << PD0);
     514:	8b b1       	in	r24, 0x0b	; 11
     516:	8e 7f       	andi	r24, 0xFE	; 254
     518:	8b b9       	out	0x0b, r24	; 11
     51a:	08 95       	ret
		else if(pino == 16)
     51c:	80 31       	cpi	r24, 0x10	; 16
     51e:	91 05       	cpc	r25, r1
     520:	21 f4       	brne	.+8      	; 0x52a <digitalWrite+0xf4>
			PORTD &= ~(1 << PD1);
     522:	8b b1       	in	r24, 0x0b	; 11
     524:	8d 7f       	andi	r24, 0xFD	; 253
     526:	8b b9       	out	0x0b, r24	; 11
     528:	08 95       	ret
		else if(pino == 17)
     52a:	81 31       	cpi	r24, 0x11	; 17
     52c:	91 05       	cpc	r25, r1
     52e:	21 f4       	brne	.+8      	; 0x538 <digitalWrite+0x102>
			PORTD &= ~(1 << PD2);
     530:	8b b1       	in	r24, 0x0b	; 11
     532:	8b 7f       	andi	r24, 0xFB	; 251
     534:	8b b9       	out	0x0b, r24	; 11
     536:	08 95       	ret
		else if(pino == 18)
     538:	82 31       	cpi	r24, 0x12	; 18
     53a:	91 05       	cpc	r25, r1
     53c:	21 f4       	brne	.+8      	; 0x546 <digitalWrite+0x110>
			PORTD &= ~(1 << PD3);
     53e:	8b b1       	in	r24, 0x0b	; 11
     540:	87 7f       	andi	r24, 0xF7	; 247
     542:	8b b9       	out	0x0b, r24	; 11
     544:	08 95       	ret
		else if(pino == 19)
     546:	83 31       	cpi	r24, 0x13	; 19
     548:	91 05       	cpc	r25, r1
     54a:	21 f4       	brne	.+8      	; 0x554 <digitalWrite+0x11e>
			PORTD &= ~(1 << PD4);
     54c:	8b b1       	in	r24, 0x0b	; 11
     54e:	8f 7e       	andi	r24, 0xEF	; 239
     550:	8b b9       	out	0x0b, r24	; 11
     552:	08 95       	ret
		else if(pino == 20)
     554:	84 31       	cpi	r24, 0x14	; 20
     556:	91 05       	cpc	r25, r1
     558:	21 f4       	brne	.+8      	; 0x562 <digitalWrite+0x12c>
			PORTD &= ~(1 << PD5);
     55a:	8b b1       	in	r24, 0x0b	; 11
     55c:	8f 7d       	andi	r24, 0xDF	; 223
     55e:	8b b9       	out	0x0b, r24	; 11
     560:	08 95       	ret
		else if(pino == 21)
     562:	85 31       	cpi	r24, 0x15	; 21
     564:	91 05       	cpc	r25, r1
     566:	21 f4       	brne	.+8      	; 0x570 <digitalWrite+0x13a>
			PORTD &= ~(1 << PD6);
     568:	8b b1       	in	r24, 0x0b	; 11
     56a:	8f 7b       	andi	r24, 0xBF	; 191
     56c:	8b b9       	out	0x0b, r24	; 11
     56e:	08 95       	ret
		else if(pino == 22)
     570:	46 97       	sbiw	r24, 0x16	; 22
     572:	09 f0       	breq	.+2      	; 0x576 <digitalWrite+0x140>
     574:	a6 c0       	rjmp	.+332    	; 0x6c2 <digitalWrite+0x28c>
			PORTD &= ~(1 << PD7);
     576:	8b b1       	in	r24, 0x0b	; 11
     578:	8f 77       	andi	r24, 0x7F	; 127
     57a:	8b b9       	out	0x0b, r24	; 11
     57c:	08 95       	ret
	}
	else if(state == HIGH){
     57e:	61 30       	cpi	r22, 0x01	; 1
     580:	71 05       	cpc	r23, r1
     582:	09 f0       	breq	.+2      	; 0x586 <digitalWrite+0x150>
     584:	9e c0       	rjmp	.+316    	; 0x6c2 <digitalWrite+0x28c>
		if(pino == 0)
     586:	00 97       	sbiw	r24, 0x00	; 0
     588:	21 f4       	brne	.+8      	; 0x592 <digitalWrite+0x15c>
			PORTB |= (1 << PB0);
     58a:	85 b1       	in	r24, 0x05	; 5
     58c:	81 60       	ori	r24, 0x01	; 1
     58e:	85 b9       	out	0x05, r24	; 5
     590:	08 95       	ret
		else if(pino == 1)
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	91 05       	cpc	r25, r1
     596:	21 f4       	brne	.+8      	; 0x5a0 <digitalWrite+0x16a>
			PORTB |= (1 << PB1);
     598:	85 b1       	in	r24, 0x05	; 5
     59a:	82 60       	ori	r24, 0x02	; 2
     59c:	85 b9       	out	0x05, r24	; 5
     59e:	08 95       	ret
		else if(pino == 2)
     5a0:	82 30       	cpi	r24, 0x02	; 2
     5a2:	91 05       	cpc	r25, r1
     5a4:	21 f4       	brne	.+8      	; 0x5ae <digitalWrite+0x178>
			PORTB |= (1 << PB2);
     5a6:	85 b1       	in	r24, 0x05	; 5
     5a8:	84 60       	ori	r24, 0x04	; 4
     5aa:	85 b9       	out	0x05, r24	; 5
     5ac:	08 95       	ret
		else if(pino == 3)
     5ae:	83 30       	cpi	r24, 0x03	; 3
     5b0:	91 05       	cpc	r25, r1
     5b2:	21 f4       	brne	.+8      	; 0x5bc <digitalWrite+0x186>
			PORTB |= (1 << PB3);
     5b4:	85 b1       	in	r24, 0x05	; 5
     5b6:	88 60       	ori	r24, 0x08	; 8
     5b8:	85 b9       	out	0x05, r24	; 5
     5ba:	08 95       	ret
		else if(pino == 4)
     5bc:	84 30       	cpi	r24, 0x04	; 4
     5be:	91 05       	cpc	r25, r1
     5c0:	21 f4       	brne	.+8      	; 0x5ca <digitalWrite+0x194>
			PORTB |= (1 << PB4);
     5c2:	85 b1       	in	r24, 0x05	; 5
     5c4:	80 61       	ori	r24, 0x10	; 16
     5c6:	85 b9       	out	0x05, r24	; 5
     5c8:	08 95       	ret
		else if(pino == 5)
     5ca:	85 30       	cpi	r24, 0x05	; 5
     5cc:	91 05       	cpc	r25, r1
     5ce:	21 f4       	brne	.+8      	; 0x5d8 <digitalWrite+0x1a2>
			PORTB |= (1 << PB5);
     5d0:	85 b1       	in	r24, 0x05	; 5
     5d2:	80 62       	ori	r24, 0x20	; 32
     5d4:	85 b9       	out	0x05, r24	; 5
     5d6:	08 95       	ret
		else if(pino == 6)
     5d8:	86 30       	cpi	r24, 0x06	; 6
     5da:	91 05       	cpc	r25, r1
     5dc:	21 f4       	brne	.+8      	; 0x5e6 <digitalWrite+0x1b0>
			PORTB |= (1 << PB6);
     5de:	85 b1       	in	r24, 0x05	; 5
     5e0:	80 64       	ori	r24, 0x40	; 64
     5e2:	85 b9       	out	0x05, r24	; 5
     5e4:	08 95       	ret
		else if(pino == 7)
     5e6:	87 30       	cpi	r24, 0x07	; 7
     5e8:	91 05       	cpc	r25, r1
     5ea:	21 f4       	brne	.+8      	; 0x5f4 <digitalWrite+0x1be>
			PORTB |= (1 << PB7);
     5ec:	85 b1       	in	r24, 0x05	; 5
     5ee:	80 68       	ori	r24, 0x80	; 128
     5f0:	85 b9       	out	0x05, r24	; 5
     5f2:	08 95       	ret
		else if(pino == 8)
     5f4:	88 30       	cpi	r24, 0x08	; 8
     5f6:	91 05       	cpc	r25, r1
     5f8:	21 f4       	brne	.+8      	; 0x602 <digitalWrite+0x1cc>
			PORTC |= (1 << PC0);
     5fa:	88 b1       	in	r24, 0x08	; 8
     5fc:	81 60       	ori	r24, 0x01	; 1
     5fe:	88 b9       	out	0x08, r24	; 8
     600:	08 95       	ret
		else if(pino == 9)
     602:	89 30       	cpi	r24, 0x09	; 9
     604:	91 05       	cpc	r25, r1
     606:	21 f4       	brne	.+8      	; 0x610 <digitalWrite+0x1da>
			PORTC |= (1 << PC1);
     608:	88 b1       	in	r24, 0x08	; 8
     60a:	82 60       	ori	r24, 0x02	; 2
     60c:	88 b9       	out	0x08, r24	; 8
     60e:	08 95       	ret
		else if(pino == 10)
     610:	8a 30       	cpi	r24, 0x0A	; 10
     612:	91 05       	cpc	r25, r1
     614:	21 f4       	brne	.+8      	; 0x61e <digitalWrite+0x1e8>
			PORTC |= (1 << PC2);
     616:	88 b1       	in	r24, 0x08	; 8
     618:	84 60       	ori	r24, 0x04	; 4
     61a:	88 b9       	out	0x08, r24	; 8
     61c:	08 95       	ret
		else if(pino == 11)
     61e:	8b 30       	cpi	r24, 0x0B	; 11
     620:	91 05       	cpc	r25, r1
     622:	21 f4       	brne	.+8      	; 0x62c <digitalWrite+0x1f6>
			PORTC |= (1 << PC3);
     624:	88 b1       	in	r24, 0x08	; 8
     626:	88 60       	ori	r24, 0x08	; 8
     628:	88 b9       	out	0x08, r24	; 8
     62a:	08 95       	ret
		else if(pino == 12)
     62c:	8c 30       	cpi	r24, 0x0C	; 12
     62e:	91 05       	cpc	r25, r1
     630:	21 f4       	brne	.+8      	; 0x63a <digitalWrite+0x204>
			PORTC |= (1 << PC4);
     632:	88 b1       	in	r24, 0x08	; 8
     634:	80 61       	ori	r24, 0x10	; 16
     636:	88 b9       	out	0x08, r24	; 8
     638:	08 95       	ret
		else if(pino == 13)
     63a:	8d 30       	cpi	r24, 0x0D	; 13
     63c:	91 05       	cpc	r25, r1
     63e:	21 f4       	brne	.+8      	; 0x648 <digitalWrite+0x212>
			PORTC |= (1 << PC5);
     640:	88 b1       	in	r24, 0x08	; 8
     642:	80 62       	ori	r24, 0x20	; 32
     644:	88 b9       	out	0x08, r24	; 8
     646:	08 95       	ret
		else if(pino == 14)
     648:	8e 30       	cpi	r24, 0x0E	; 14
     64a:	91 05       	cpc	r25, r1
     64c:	21 f4       	brne	.+8      	; 0x656 <digitalWrite+0x220>
			PORTC |= (1 << PC6);
     64e:	88 b1       	in	r24, 0x08	; 8
     650:	80 64       	ori	r24, 0x40	; 64
     652:	88 b9       	out	0x08, r24	; 8
     654:	08 95       	ret
		else if(pino == 15)
     656:	8f 30       	cpi	r24, 0x0F	; 15
     658:	91 05       	cpc	r25, r1
     65a:	21 f4       	brne	.+8      	; 0x664 <digitalWrite+0x22e>
			PORTD |= (1 << PD0);
     65c:	8b b1       	in	r24, 0x0b	; 11
     65e:	81 60       	ori	r24, 0x01	; 1
     660:	8b b9       	out	0x0b, r24	; 11
     662:	08 95       	ret
		else if(pino == 16)
     664:	80 31       	cpi	r24, 0x10	; 16
     666:	91 05       	cpc	r25, r1
     668:	21 f4       	brne	.+8      	; 0x672 <digitalWrite+0x23c>
			PORTD |= (1 << PD1);
     66a:	8b b1       	in	r24, 0x0b	; 11
     66c:	82 60       	ori	r24, 0x02	; 2
     66e:	8b b9       	out	0x0b, r24	; 11
     670:	08 95       	ret
		else if(pino == 17)
     672:	81 31       	cpi	r24, 0x11	; 17
     674:	91 05       	cpc	r25, r1
     676:	21 f4       	brne	.+8      	; 0x680 <digitalWrite+0x24a>
			PORTD |= (1 << PD2);
     678:	8b b1       	in	r24, 0x0b	; 11
     67a:	84 60       	ori	r24, 0x04	; 4
     67c:	8b b9       	out	0x0b, r24	; 11
     67e:	08 95       	ret
		else if(pino == 18)
     680:	82 31       	cpi	r24, 0x12	; 18
     682:	91 05       	cpc	r25, r1
     684:	21 f4       	brne	.+8      	; 0x68e <digitalWrite+0x258>
			PORTD |= (1 << PD3);
     686:	8b b1       	in	r24, 0x0b	; 11
     688:	88 60       	ori	r24, 0x08	; 8
     68a:	8b b9       	out	0x0b, r24	; 11
     68c:	08 95       	ret
		else if(pino == 19)
     68e:	83 31       	cpi	r24, 0x13	; 19
     690:	91 05       	cpc	r25, r1
     692:	21 f4       	brne	.+8      	; 0x69c <digitalWrite+0x266>
			PORTD |= (1 << PD4);
     694:	8b b1       	in	r24, 0x0b	; 11
     696:	80 61       	ori	r24, 0x10	; 16
     698:	8b b9       	out	0x0b, r24	; 11
     69a:	08 95       	ret
		else if(pino == 20)
     69c:	84 31       	cpi	r24, 0x14	; 20
     69e:	91 05       	cpc	r25, r1
     6a0:	21 f4       	brne	.+8      	; 0x6aa <digitalWrite+0x274>
			PORTD |= (1 << PD5);
     6a2:	8b b1       	in	r24, 0x0b	; 11
     6a4:	80 62       	ori	r24, 0x20	; 32
     6a6:	8b b9       	out	0x0b, r24	; 11
     6a8:	08 95       	ret
		else if(pino == 21)
     6aa:	85 31       	cpi	r24, 0x15	; 21
     6ac:	91 05       	cpc	r25, r1
     6ae:	21 f4       	brne	.+8      	; 0x6b8 <digitalWrite+0x282>
			PORTD |= (1 << PD6);
     6b0:	8b b1       	in	r24, 0x0b	; 11
     6b2:	80 64       	ori	r24, 0x40	; 64
     6b4:	8b b9       	out	0x0b, r24	; 11
     6b6:	08 95       	ret
		else if(pino == 22)
     6b8:	46 97       	sbiw	r24, 0x16	; 22
     6ba:	19 f4       	brne	.+6      	; 0x6c2 <digitalWrite+0x28c>
			PORTD |= (1 << PD7);
     6bc:	8b b1       	in	r24, 0x0b	; 11
     6be:	80 68       	ori	r24, 0x80	; 128
     6c0:	8b b9       	out	0x0b, r24	; 11
     6c2:	08 95       	ret

000006c4 <digitalRead>:

}

int digitalRead(int pino){

	if(pino == 0)
     6c4:	00 97       	sbiw	r24, 0x00	; 0
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <digitalRead+0xe>
		return (PINB & (1 << PINB0));
     6c8:	83 b1       	in	r24, 0x03	; 3
     6ca:	28 2f       	mov	r18, r24
     6cc:	21 70       	andi	r18, 0x01	; 1
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	9c c0       	rjmp	.+312    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 1)
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	91 05       	cpc	r25, r1
     6d6:	21 f4       	brne	.+8      	; 0x6e0 <digitalRead+0x1c>
		return (PINB & (1 << PINB1));
     6d8:	23 b1       	in	r18, 0x03	; 3
     6da:	22 70       	andi	r18, 0x02	; 2
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	95 c0       	rjmp	.+298    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 2)
     6e0:	82 30       	cpi	r24, 0x02	; 2
     6e2:	91 05       	cpc	r25, r1
     6e4:	21 f4       	brne	.+8      	; 0x6ee <digitalRead+0x2a>
		return (PINB & (1 << PINB2));
     6e6:	23 b1       	in	r18, 0x03	; 3
     6e8:	24 70       	andi	r18, 0x04	; 4
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	8e c0       	rjmp	.+284    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 3)
     6ee:	83 30       	cpi	r24, 0x03	; 3
     6f0:	91 05       	cpc	r25, r1
     6f2:	21 f4       	brne	.+8      	; 0x6fc <digitalRead+0x38>
		return (PINB & (1 << PINB3));
     6f4:	23 b1       	in	r18, 0x03	; 3
     6f6:	28 70       	andi	r18, 0x08	; 8
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	87 c0       	rjmp	.+270    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 4)
     6fc:	84 30       	cpi	r24, 0x04	; 4
     6fe:	91 05       	cpc	r25, r1
     700:	21 f4       	brne	.+8      	; 0x70a <digitalRead+0x46>
		return (PINB & (1 << PINB4));
     702:	23 b1       	in	r18, 0x03	; 3
     704:	20 71       	andi	r18, 0x10	; 16
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	80 c0       	rjmp	.+256    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 5)
     70a:	85 30       	cpi	r24, 0x05	; 5
     70c:	91 05       	cpc	r25, r1
     70e:	21 f4       	brne	.+8      	; 0x718 <digitalRead+0x54>
		return (PINB & (1 << PINB5));
     710:	23 b1       	in	r18, 0x03	; 3
     712:	20 72       	andi	r18, 0x20	; 32
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	79 c0       	rjmp	.+242    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 6)
     718:	86 30       	cpi	r24, 0x06	; 6
     71a:	91 05       	cpc	r25, r1
     71c:	21 f4       	brne	.+8      	; 0x726 <digitalRead+0x62>
		return (PINB & (1 << PINB6));
     71e:	23 b1       	in	r18, 0x03	; 3
     720:	20 74       	andi	r18, 0x40	; 64
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	72 c0       	rjmp	.+228    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 7)
     726:	87 30       	cpi	r24, 0x07	; 7
     728:	91 05       	cpc	r25, r1
     72a:	21 f4       	brne	.+8      	; 0x734 <digitalRead+0x70>
		return (PINB & (1 << PINB7));
     72c:	23 b1       	in	r18, 0x03	; 3
     72e:	20 78       	andi	r18, 0x80	; 128
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	6b c0       	rjmp	.+214    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 8)
     734:	88 30       	cpi	r24, 0x08	; 8
     736:	91 05       	cpc	r25, r1
     738:	29 f4       	brne	.+10     	; 0x744 <digitalRead+0x80>
		return (PINC & (1 << PINC0));
     73a:	86 b1       	in	r24, 0x06	; 6
     73c:	28 2f       	mov	r18, r24
     73e:	21 70       	andi	r18, 0x01	; 1
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	63 c0       	rjmp	.+198    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 9)
     744:	89 30       	cpi	r24, 0x09	; 9
     746:	91 05       	cpc	r25, r1
     748:	21 f4       	brne	.+8      	; 0x752 <digitalRead+0x8e>
		return (PINC & (1 << PINC1));
     74a:	26 b1       	in	r18, 0x06	; 6
     74c:	22 70       	andi	r18, 0x02	; 2
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	5c c0       	rjmp	.+184    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 10)
     752:	8a 30       	cpi	r24, 0x0A	; 10
     754:	91 05       	cpc	r25, r1
     756:	21 f4       	brne	.+8      	; 0x760 <digitalRead+0x9c>
		return (PINC & (1 << PINC2));
     758:	26 b1       	in	r18, 0x06	; 6
     75a:	24 70       	andi	r18, 0x04	; 4
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	55 c0       	rjmp	.+170    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 11)
     760:	8b 30       	cpi	r24, 0x0B	; 11
     762:	91 05       	cpc	r25, r1
     764:	21 f4       	brne	.+8      	; 0x76e <digitalRead+0xaa>
		return (PINC & (1 << PINC3));
     766:	26 b1       	in	r18, 0x06	; 6
     768:	28 70       	andi	r18, 0x08	; 8
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	4e c0       	rjmp	.+156    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 12)
     76e:	8c 30       	cpi	r24, 0x0C	; 12
     770:	91 05       	cpc	r25, r1
     772:	21 f4       	brne	.+8      	; 0x77c <digitalRead+0xb8>
		return (PINC & (1 << PINC4));
     774:	26 b1       	in	r18, 0x06	; 6
     776:	20 71       	andi	r18, 0x10	; 16
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	47 c0       	rjmp	.+142    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 13)
     77c:	8d 30       	cpi	r24, 0x0D	; 13
     77e:	91 05       	cpc	r25, r1
     780:	21 f4       	brne	.+8      	; 0x78a <digitalRead+0xc6>
		return (PINC & (1 << PINC5));
     782:	26 b1       	in	r18, 0x06	; 6
     784:	20 72       	andi	r18, 0x20	; 32
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 c0       	rjmp	.+128    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 14)
     78a:	8e 30       	cpi	r24, 0x0E	; 14
     78c:	91 05       	cpc	r25, r1
     78e:	21 f4       	brne	.+8      	; 0x798 <digitalRead+0xd4>
		return (PINC & (1 << PINC6));
     790:	26 b1       	in	r18, 0x06	; 6
     792:	20 74       	andi	r18, 0x40	; 64
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	39 c0       	rjmp	.+114    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 15)
     798:	8f 30       	cpi	r24, 0x0F	; 15
     79a:	91 05       	cpc	r25, r1
     79c:	29 f4       	brne	.+10     	; 0x7a8 <digitalRead+0xe4>
		return (PIND & (1 << PIND0));
     79e:	89 b1       	in	r24, 0x09	; 9
     7a0:	28 2f       	mov	r18, r24
     7a2:	21 70       	andi	r18, 0x01	; 1
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	31 c0       	rjmp	.+98     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 16)
     7a8:	80 31       	cpi	r24, 0x10	; 16
     7aa:	91 05       	cpc	r25, r1
     7ac:	21 f4       	brne	.+8      	; 0x7b6 <digitalRead+0xf2>
		return (PIND & (1 << PIND1));
     7ae:	29 b1       	in	r18, 0x09	; 9
     7b0:	22 70       	andi	r18, 0x02	; 2
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	2a c0       	rjmp	.+84     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 17)
     7b6:	81 31       	cpi	r24, 0x11	; 17
     7b8:	91 05       	cpc	r25, r1
     7ba:	21 f4       	brne	.+8      	; 0x7c4 <digitalRead+0x100>
		return (PIND & (1 << PIND2));
     7bc:	29 b1       	in	r18, 0x09	; 9
     7be:	24 70       	andi	r18, 0x04	; 4
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	23 c0       	rjmp	.+70     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 18)
     7c4:	82 31       	cpi	r24, 0x12	; 18
     7c6:	91 05       	cpc	r25, r1
     7c8:	21 f4       	brne	.+8      	; 0x7d2 <digitalRead+0x10e>
		return (PIND & (1 << PIND3));
     7ca:	29 b1       	in	r18, 0x09	; 9
     7cc:	28 70       	andi	r18, 0x08	; 8
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	1c c0       	rjmp	.+56     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 19)
     7d2:	83 31       	cpi	r24, 0x13	; 19
     7d4:	91 05       	cpc	r25, r1
     7d6:	21 f4       	brne	.+8      	; 0x7e0 <digitalRead+0x11c>
		return (PIND & (1 << PIND4));
     7d8:	29 b1       	in	r18, 0x09	; 9
     7da:	20 71       	andi	r18, 0x10	; 16
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	15 c0       	rjmp	.+42     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 20)
     7e0:	84 31       	cpi	r24, 0x14	; 20
     7e2:	91 05       	cpc	r25, r1
     7e4:	21 f4       	brne	.+8      	; 0x7ee <digitalRead+0x12a>
		return (PIND & (1 << PIND5));
     7e6:	29 b1       	in	r18, 0x09	; 9
     7e8:	20 72       	andi	r18, 0x20	; 32
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	0e c0       	rjmp	.+28     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 21)
     7ee:	85 31       	cpi	r24, 0x15	; 21
     7f0:	91 05       	cpc	r25, r1
     7f2:	21 f4       	brne	.+8      	; 0x7fc <digitalRead+0x138>
		return (PIND & (1 << PIND6));
     7f4:	29 b1       	in	r18, 0x09	; 9
     7f6:	20 74       	andi	r18, 0x40	; 64
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	07 c0       	rjmp	.+14     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	else if(pino == 22)
     7fc:	46 97       	sbiw	r24, 0x16	; 22
     7fe:	21 f4       	brne	.+8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
		return (PIND & (1 << PIND7));
     800:	29 b1       	in	r18, 0x09	; 9
     802:	20 78       	andi	r18, 0x80	; 128
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	01 c0       	rjmp	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     808:	08 95       	ret
     80a:	82 2f       	mov	r24, r18
     80c:	93 2f       	mov	r25, r19
     80e:	08 95       	ret

00000810 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     810:	8b b1       	in	r24, 0x0b	; 11
     812:	80 64       	ori	r24, 0x40	; 64
     814:	8b b9       	out	0x0b, r24	; 11
     816:	00 c0       	rjmp	.+0      	; 0x818 <toggle_e+0x8>
     818:	8b b1       	in	r24, 0x0b	; 11
     81a:	8f 7b       	andi	r24, 0xBF	; 191
     81c:	8b b9       	out	0x0b, r24	; 11
     81e:	08 95       	ret

00000820 <lcd_write>:
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	d8 2f       	mov	r29, r24
     826:	66 23       	and	r22, r22
     828:	21 f0       	breq	.+8      	; 0x832 <lcd_write+0x12>
     82a:	8b b1       	in	r24, 0x0b	; 11
     82c:	80 61       	ori	r24, 0x10	; 16
     82e:	8b b9       	out	0x0b, r24	; 11
     830:	03 c0       	rjmp	.+6      	; 0x838 <lcd_write+0x18>
     832:	8b b1       	in	r24, 0x0b	; 11
     834:	8f 7e       	andi	r24, 0xEF	; 239
     836:	8b b9       	out	0x0b, r24	; 11
     838:	8b b1       	in	r24, 0x0b	; 11
     83a:	8f 7d       	andi	r24, 0xDF	; 223
     83c:	8b b9       	out	0x0b, r24	; 11
     83e:	8a b1       	in	r24, 0x0a	; 10
     840:	8f 60       	ori	r24, 0x0F	; 15
     842:	8a b9       	out	0x0a, r24	; 10
     844:	cb b1       	in	r28, 0x0b	; 11
     846:	c0 7f       	andi	r28, 0xF0	; 240
     848:	8d 2f       	mov	r24, r29
     84a:	82 95       	swap	r24
     84c:	8f 70       	andi	r24, 0x0F	; 15
     84e:	8c 2b       	or	r24, r28
     850:	8b b9       	out	0x0b, r24	; 11
     852:	0e 94 08 04 	call	0x810	; 0x810 <toggle_e>
     856:	df 70       	andi	r29, 0x0F	; 15
     858:	dc 2b       	or	r29, r28
     85a:	db b9       	out	0x0b, r29	; 11
     85c:	0e 94 08 04 	call	0x810	; 0x810 <toggle_e>
     860:	cf 60       	ori	r28, 0x0F	; 15
     862:	cb b9       	out	0x0b, r28	; 11
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <lcd_read>:
     86a:	88 23       	and	r24, r24
     86c:	21 f0       	breq	.+8      	; 0x876 <lcd_read+0xc>
     86e:	8b b1       	in	r24, 0x0b	; 11
     870:	80 61       	ori	r24, 0x10	; 16
     872:	8b b9       	out	0x0b, r24	; 11
     874:	03 c0       	rjmp	.+6      	; 0x87c <lcd_read+0x12>
     876:	8b b1       	in	r24, 0x0b	; 11
     878:	8f 7e       	andi	r24, 0xEF	; 239
     87a:	8b b9       	out	0x0b, r24	; 11
     87c:	8b b1       	in	r24, 0x0b	; 11
     87e:	80 62       	ori	r24, 0x20	; 32
     880:	8b b9       	out	0x0b, r24	; 11
     882:	8a b1       	in	r24, 0x0a	; 10
     884:	80 7f       	andi	r24, 0xF0	; 240
     886:	8a b9       	out	0x0a, r24	; 10
     888:	8b b1       	in	r24, 0x0b	; 11
     88a:	80 64       	ori	r24, 0x40	; 64
     88c:	8b b9       	out	0x0b, r24	; 11
     88e:	00 c0       	rjmp	.+0      	; 0x890 <lcd_read+0x26>
     890:	99 b1       	in	r25, 0x09	; 9
     892:	92 95       	swap	r25
     894:	90 7f       	andi	r25, 0xF0	; 240
     896:	8b b1       	in	r24, 0x0b	; 11
     898:	8f 7b       	andi	r24, 0xBF	; 191
     89a:	8b b9       	out	0x0b, r24	; 11
     89c:	00 c0       	rjmp	.+0      	; 0x89e <lcd_read+0x34>
     89e:	8b b1       	in	r24, 0x0b	; 11
     8a0:	80 64       	ori	r24, 0x40	; 64
     8a2:	8b b9       	out	0x0b, r24	; 11
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <lcd_read+0x3c>
     8a6:	89 b1       	in	r24, 0x09	; 9
     8a8:	8f 70       	andi	r24, 0x0F	; 15
     8aa:	2b b1       	in	r18, 0x0b	; 11
     8ac:	2f 7b       	andi	r18, 0xBF	; 191
     8ae:	2b b9       	out	0x0b, r18	; 11
     8b0:	89 2b       	or	r24, r25
     8b2:	08 95       	ret

000008b4 <lcd_waitbusy>:
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	0e 94 35 04 	call	0x86a	; 0x86a <lcd_read>
     8ba:	88 23       	and	r24, r24
     8bc:	dc f3       	brlt	.-10     	; 0x8b4 <lcd_waitbusy>
     8be:	85 e0       	ldi	r24, 0x05	; 5
     8c0:	8a 95       	dec	r24
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <lcd_waitbusy+0xc>
     8c4:	00 00       	nop
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	0e 94 35 04 	call	0x86a	; 0x86a <lcd_read>
     8cc:	08 95       	ret

000008ce <lcd_command>:
     8ce:	cf 93       	push	r28
     8d0:	c8 2f       	mov	r28, r24
     8d2:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <lcd_waitbusy>
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	8c 2f       	mov	r24, r28
     8da:	0e 94 10 04 	call	0x820	; 0x820 <lcd_write>
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <lcd_gotoxy>:
     8e2:	61 11       	cpse	r22, r1
     8e4:	04 c0       	rjmp	.+8      	; 0x8ee <lcd_gotoxy+0xc>
     8e6:	80 58       	subi	r24, 0x80	; 128
     8e8:	0e 94 67 04 	call	0x8ce	; 0x8ce <lcd_command>
     8ec:	08 95       	ret
     8ee:	80 54       	subi	r24, 0x40	; 64
     8f0:	0e 94 67 04 	call	0x8ce	; 0x8ce <lcd_command>
     8f4:	08 95       	ret

000008f6 <lcd_clrscr>:
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	0e 94 67 04 	call	0x8ce	; 0x8ce <lcd_command>
     8fc:	08 95       	ret

000008fe <lcd_putc>:
     8fe:	cf 93       	push	r28
     900:	c8 2f       	mov	r28, r24
     902:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <lcd_waitbusy>
     906:	ca 30       	cpi	r28, 0x0A	; 10
     908:	49 f4       	brne	.+18     	; 0x91c <__stack+0x1d>
     90a:	80 34       	cpi	r24, 0x40	; 64
     90c:	10 f4       	brcc	.+4      	; 0x912 <__stack+0x13>
     90e:	80 e4       	ldi	r24, 0x40	; 64
     910:	01 c0       	rjmp	.+2      	; 0x914 <__stack+0x15>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	80 58       	subi	r24, 0x80	; 128
     916:	0e 94 67 04 	call	0x8ce	; 0x8ce <lcd_command>
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__stack+0x25>
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	8c 2f       	mov	r24, r28
     920:	0e 94 10 04 	call	0x820	; 0x820 <lcd_write>
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     928:	cf 93       	push	r28
     92a:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
     92c:	8a b1       	in	r24, 0x0a	; 10
     92e:	8f 67       	ori	r24, 0x7F	; 127
     930:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     932:	8f ef       	ldi	r24, 0xFF	; 255
     934:	9c e7       	ldi	r25, 0x7C	; 124
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	f1 f7       	brne	.-4      	; 0x936 <lcd_init+0xe>
     93a:	00 c0       	rjmp	.+0      	; 0x93c <lcd_init+0x14>
     93c:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    _delay_us(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     93e:	8b b1       	in	r24, 0x0b	; 11
     940:	82 60       	ori	r24, 0x02	; 2
     942:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     944:	8b b1       	in	r24, 0x0b	; 11
     946:	81 60       	ori	r24, 0x01	; 1
     948:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
     94a:	0e 94 08 04 	call	0x810	; 0x810 <toggle_e>
     94e:	8f ef       	ldi	r24, 0xFF	; 255
     950:	96 e2       	ldi	r25, 0x26	; 38
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	f1 f7       	brne	.-4      	; 0x952 <lcd_init+0x2a>
     956:	00 c0       	rjmp	.+0      	; 0x958 <lcd_init+0x30>
     958:	00 00       	nop
    _delay_us(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     95a:	0e 94 08 04 	call	0x810	; 0x810 <toggle_e>
     95e:	9a ea       	ldi	r25, 0xAA	; 170
     960:	9a 95       	dec	r25
     962:	f1 f7       	brne	.-4      	; 0x960 <lcd_init+0x38>
     964:	00 c0       	rjmp	.+0      	; 0x966 <lcd_init+0x3e>
    _delay_us(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     966:	0e 94 08 04 	call	0x810	; 0x810 <toggle_e>
     96a:	8a ea       	ldi	r24, 0xAA	; 170
     96c:	8a 95       	dec	r24
     96e:	f1 f7       	brne	.-4      	; 0x96c <lcd_init+0x44>
     970:	00 c0       	rjmp	.+0      	; 0x972 <lcd_init+0x4a>
    _delay_us(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     972:	8b b1       	in	r24, 0x0b	; 11
     974:	8e 7f       	andi	r24, 0xFE	; 254
     976:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
     978:	0e 94 08 04 	call	0x810	; 0x810 <toggle_e>
     97c:	9a ea       	ldi	r25, 0xAA	; 170
     97e:	9a 95       	dec	r25
     980:	f1 f7       	brne	.-4      	; 0x97e <lcd_init+0x56>
     982:	00 c0       	rjmp	.+0      	; 0x984 <lcd_init+0x5c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     984:	88 e2       	ldi	r24, 0x28	; 40
     986:	0e 94 67 04 	call	0x8ce	; 0x8ce <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     98a:	88 e0       	ldi	r24, 0x08	; 8
     98c:	0e 94 67 04 	call	0x8ce	; 0x8ce <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     990:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     994:	86 e0       	ldi	r24, 0x06	; 6
     996:	0e 94 67 04 	call	0x8ce	; 0x8ce <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     99a:	8c 2f       	mov	r24, r28
     99c:	0e 94 67 04 	call	0x8ce	; 0x8ce <lcd_command>

}/* lcd_init */
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <teclado4x3_ini>:

#include <util/delay.h>

#include "teclado4x3.h"

teclado4x3_ini(int _X0, int _X1, int _X2, int _X3, int _Y0, int _Y1, int _Y2){
     9a4:	cf 92       	push	r12
     9a6:	df 92       	push	r13
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17

	X0 = _X0;
     9b0:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <X0+0x1>
     9b4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <X0>
	X1 = _X1;
     9b8:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <X1+0x1>
     9bc:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <X1>
	X2 = _X2;
     9c0:	50 93 2b 01 	sts	0x012B, r21	; 0x80012b <X2+0x1>
     9c4:	40 93 2a 01 	sts	0x012A, r20	; 0x80012a <X2>
	X3 = _X3;
     9c8:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <X3+0x1>
     9cc:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <X3>
	
	Y0 = _Y0;
     9d0:	10 93 35 01 	sts	0x0135, r17	; 0x800135 <Y0+0x1>
     9d4:	00 93 34 01 	sts	0x0134, r16	; 0x800134 <Y0>
	Y1 = _Y1;
     9d8:	f0 92 31 01 	sts	0x0131, r15	; 0x800131 <Y1+0x1>
     9dc:	e0 92 30 01 	sts	0x0130, r14	; 0x800130 <Y1>
	Y2 = _Y2;
     9e0:	d0 92 29 01 	sts	0x0129, r13	; 0x800129 <__data_end+0x1>
     9e4:	c0 92 28 01 	sts	0x0128, r12	; 0x800128 <__data_end>

	pinMode(X0, INPUT);
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pinMode>
	pinMode(X1, INPUT);
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <X1>
     9f8:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <X1+0x1>
     9fc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pinMode>
	pinMode(X2, INPUT);
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <X2>
     a08:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <X2+0x1>
     a0c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pinMode>
	pinMode(X3, INPUT);
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <X3>
     a18:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <X3+0x1>
     a1c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pinMode>

	pinMode(Y0, OUTPUT);
     a20:	61 e0       	ldi	r22, 0x01	; 1
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <Y0>
     a28:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Y0+0x1>
     a2c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pinMode>
	pinMode(Y1, OUTPUT);
     a30:	61 e0       	ldi	r22, 0x01	; 1
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Y1>
     a38:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <Y1+0x1>
     a3c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pinMode>
	pinMode(Y2, OUTPUT);
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     a48:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
     a4c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pinMode>
	
	digitalWrite(Y0, HIGH);	
     a50:	61 e0       	ldi	r22, 0x01	; 1
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <Y0>
     a58:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Y0+0x1>
     a5c:	0e 94 1b 02 	call	0x436	; 0x436 <digitalWrite>
	digitalWrite(Y1, HIGH);	
     a60:	61 e0       	ldi	r22, 0x01	; 1
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Y1>
     a68:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <Y1+0x1>
     a6c:	0e 94 1b 02 	call	0x436	; 0x436 <digitalWrite>
	digitalWrite(Y2, HIGH);	
     a70:	61 e0       	ldi	r22, 0x01	; 1
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     a78:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
     a7c:	0e 94 1b 02 	call	0x436	; 0x436 <digitalWrite>
}
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	ff 90       	pop	r15
     a86:	ef 90       	pop	r14
     a88:	df 90       	pop	r13
     a8a:	cf 90       	pop	r12
     a8c:	08 95       	ret

00000a8e <le_teclado>:

char le_teclado(int loop){
     a8e:	cf 93       	push	r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a90:	2f ef       	ldi	r18, 0xFF	; 255
     a92:	32 e5       	ldi	r19, 0x52	; 82
     a94:	47 e0       	ldi	r20, 0x07	; 7
     a96:	21 50       	subi	r18, 0x01	; 1
     a98:	30 40       	sbci	r19, 0x00	; 0
     a9a:	40 40       	sbci	r20, 0x00	; 0
     a9c:	e1 f7       	brne	.-8      	; 0xa96 <le_teclado+0x8>
     a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <le_teclado+0x12>
     aa0:	00 00       	nop
	
	bounce_ms = 300;
	
	_delay_ms(bounce_ms);
	
	if(loop)
     aa2:	89 2b       	or	r24, r25
     aa4:	11 f0       	breq	.+4      	; 0xaaa <le_teclado+0x1c>
		tecla='t';
     aa6:	c4 e7       	ldi	r28, 0x74	; 116
     aa8:	01 c0       	rjmp	.+2      	; 0xaac <le_teclado+0x1e>
	else
		tecla = 'f';
     aaa:	c6 e6       	ldi	r28, 0x66	; 102
		
	do{
		//Leitura da coluna YO
		digitalWrite(Y0, LOW);
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <Y0>
     ab4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Y0+0x1>
     ab8:	0e 94 1b 02 	call	0x436	; 0x436 <digitalWrite>
		if(digitalRead(X0) == 0){
     abc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <X0>
     ac0:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <X0+0x1>
     ac4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <digitalRead>
     ac8:	89 2b       	or	r24, r25
     aca:	c9 f0       	breq	.+50     	; 0xafe <le_teclado+0x70>
			tecla = 1;
		}
		else if(digitalRead(X1) == 0){
     acc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <X1>
     ad0:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <X1+0x1>
     ad4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <digitalRead>
     ad8:	89 2b       	or	r24, r25
     ada:	99 f0       	breq	.+38     	; 0xb02 <le_teclado+0x74>
			tecla = 4;
		}
		else if(digitalRead(X2) == 0){
     adc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <X2>
     ae0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <X2+0x1>
     ae4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <digitalRead>
     ae8:	89 2b       	or	r24, r25
     aea:	69 f0       	breq	.+26     	; 0xb06 <le_teclado+0x78>
			tecla = 7;
		}
		else if(digitalRead(X3) == 0){
     aec:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <X3>
     af0:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <X3+0x1>
     af4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <digitalRead>
     af8:	89 2b       	or	r24, r25
     afa:	39 f0       	breq	.+14     	; 0xb0a <le_teclado+0x7c>
     afc:	07 c0       	rjmp	.+14     	; 0xb0c <le_teclado+0x7e>
		
	do{
		//Leitura da coluna YO
		digitalWrite(Y0, LOW);
		if(digitalRead(X0) == 0){
			tecla = 1;
     afe:	c1 e0       	ldi	r28, 0x01	; 1
     b00:	05 c0       	rjmp	.+10     	; 0xb0c <le_teclado+0x7e>
		}
		else if(digitalRead(X1) == 0){
			tecla = 4;
     b02:	c4 e0       	ldi	r28, 0x04	; 4
     b04:	03 c0       	rjmp	.+6      	; 0xb0c <le_teclado+0x7e>
		}
		else if(digitalRead(X2) == 0){
			tecla = 7;
     b06:	c7 e0       	ldi	r28, 0x07	; 7
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <le_teclado+0x7e>
		}
		else if(digitalRead(X3) == 0){
			tecla = '*';//*
     b0a:	ca e2       	ldi	r28, 0x2A	; 42
		}
		digitalWrite(Y0, HIGH);
     b0c:	61 e0       	ldi	r22, 0x01	; 1
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <Y0>
     b14:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Y0+0x1>
     b18:	0e 94 1b 02 	call	0x436	; 0x436 <digitalWrite>
		
		//Leitura da coluna Y1
		digitalWrite(Y1, LOW);
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Y1>
     b24:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <Y1+0x1>
     b28:	0e 94 1b 02 	call	0x436	; 0x436 <digitalWrite>
		if(digitalRead(X0) == 0){
     b2c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <X0>
     b30:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <X0+0x1>
     b34:	0e 94 62 03 	call	0x6c4	; 0x6c4 <digitalRead>
     b38:	89 2b       	or	r24, r25
     b3a:	c9 f0       	breq	.+50     	; 0xb6e <le_teclado+0xe0>
			tecla = 2;
		}
		else if(digitalRead(X1) == 0){
     b3c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <X1>
     b40:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <X1+0x1>
     b44:	0e 94 62 03 	call	0x6c4	; 0x6c4 <digitalRead>
     b48:	89 2b       	or	r24, r25
     b4a:	99 f0       	breq	.+38     	; 0xb72 <le_teclado+0xe4>
			tecla = 5;
		}
		else if(digitalRead(X2) == 0){
     b4c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <X2>
     b50:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <X2+0x1>
     b54:	0e 94 62 03 	call	0x6c4	; 0x6c4 <digitalRead>
     b58:	89 2b       	or	r24, r25
     b5a:	69 f0       	breq	.+26     	; 0xb76 <le_teclado+0xe8>
			tecla = 8;
		}
		else if(digitalRead(X3) == 0){
     b5c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <X3>
     b60:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <X3+0x1>
     b64:	0e 94 62 03 	call	0x6c4	; 0x6c4 <digitalRead>
     b68:	89 2b       	or	r24, r25
     b6a:	39 f0       	breq	.+14     	; 0xb7a <le_teclado+0xec>
     b6c:	07 c0       	rjmp	.+14     	; 0xb7c <le_teclado+0xee>
		digitalWrite(Y0, HIGH);
		
		//Leitura da coluna Y1
		digitalWrite(Y1, LOW);
		if(digitalRead(X0) == 0){
			tecla = 2;
     b6e:	c2 e0       	ldi	r28, 0x02	; 2
     b70:	05 c0       	rjmp	.+10     	; 0xb7c <le_teclado+0xee>
		}
		else if(digitalRead(X1) == 0){
			tecla = 5;
     b72:	c5 e0       	ldi	r28, 0x05	; 5
     b74:	03 c0       	rjmp	.+6      	; 0xb7c <le_teclado+0xee>
		}
		else if(digitalRead(X2) == 0){
			tecla = 8;
     b76:	c8 e0       	ldi	r28, 0x08	; 8
     b78:	01 c0       	rjmp	.+2      	; 0xb7c <le_teclado+0xee>
		}
		else if(digitalRead(X3) == 0){
			tecla = 0;
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
		}
		digitalWrite(Y1, HIGH);
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Y1>
     b84:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <Y1+0x1>
     b88:	0e 94 1b 02 	call	0x436	; 0x436 <digitalWrite>

		//Leitura da coluna Y2
		digitalWrite(Y2, LOW);
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     b94:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
     b98:	0e 94 1b 02 	call	0x436	; 0x436 <digitalWrite>
		if(digitalRead(X0) == 0){
     b9c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <X0>
     ba0:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <X0+0x1>
     ba4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <digitalRead>
     ba8:	89 2b       	or	r24, r25
     baa:	c9 f0       	breq	.+50     	; 0xbde <le_teclado+0x150>
			tecla = 3;
		}
		else if(digitalRead(X1) == 0){
     bac:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <X1>
     bb0:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <X1+0x1>
     bb4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <digitalRead>
     bb8:	89 2b       	or	r24, r25
     bba:	99 f0       	breq	.+38     	; 0xbe2 <le_teclado+0x154>
			tecla = 6;
		}
		else if(digitalRead(X2) == 0){
     bbc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <X2>
     bc0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <X2+0x1>
     bc4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <digitalRead>
     bc8:	89 2b       	or	r24, r25
     bca:	69 f0       	breq	.+26     	; 0xbe6 <le_teclado+0x158>
			tecla = 9;
		}
		else if(digitalRead(X3) == 0){
     bcc:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <X3>
     bd0:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <X3+0x1>
     bd4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <digitalRead>
     bd8:	89 2b       	or	r24, r25
     bda:	39 f0       	breq	.+14     	; 0xbea <le_teclado+0x15c>
     bdc:	07 c0       	rjmp	.+14     	; 0xbec <le_teclado+0x15e>
		digitalWrite(Y1, HIGH);

		//Leitura da coluna Y2
		digitalWrite(Y2, LOW);
		if(digitalRead(X0) == 0){
			tecla = 3;
     bde:	c3 e0       	ldi	r28, 0x03	; 3
     be0:	05 c0       	rjmp	.+10     	; 0xbec <le_teclado+0x15e>
		}
		else if(digitalRead(X1) == 0){
			tecla = 6;
     be2:	c6 e0       	ldi	r28, 0x06	; 6
     be4:	03 c0       	rjmp	.+6      	; 0xbec <le_teclado+0x15e>
		}
		else if(digitalRead(X2) == 0){
			tecla = 9;
     be6:	c9 e0       	ldi	r28, 0x09	; 9
     be8:	01 c0       	rjmp	.+2      	; 0xbec <le_teclado+0x15e>
		}
		else if(digitalRead(X3) == 0){
			tecla = '#';//#
     bea:	c3 e2       	ldi	r28, 0x23	; 35
		}
		digitalWrite(Y2, HIGH);
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     bf4:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
     bf8:	0e 94 1b 02 	call	0x436	; 0x436 <digitalWrite>
		
	}while(tecla == 't');
     bfc:	c4 37       	cpi	r28, 0x74	; 116
     bfe:	09 f4       	brne	.+2      	; 0xc02 <le_teclado+0x174>
     c00:	55 cf       	rjmp	.-342    	; 0xaac <le_teclado+0x1e>
	
	return tecla;	
     c02:	8c 2f       	mov	r24, r28
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <outlcd>:

 int outlcd(char c, FILE *stream);
 FILE mystdout = FDEV_SETUP_STREAM(outlcd, NULL, _FDEV_SETUP_WRITE);

 int outlcd(char c, FILE *stream){
 lcd_putc(c);
     c08:	0e 94 7f 04 	call	0x8fe	; 0x8fe <lcd_putc>
 return 0;
 }
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	08 95       	ret

00000c12 <main>:
 {

 	uint8_t offset,end, dado;
	char tecla, aux, n_digito;

	lcd_init(LCD_DISP_ON);
     c12:	8c e0       	ldi	r24, 0x0C	; 12
     c14:	0e 94 94 04 	call	0x928	; 0x928 <lcd_init>
	stdout = &mystdout;
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__iob+0x3>
     c20:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__iob+0x2>
	teclado4x3_ini(_PC0, _PC1, _PC2, _PC3, _PC4, _PC5, _PB0);
     c24:	c1 2c       	mov	r12, r1
     c26:	d1 2c       	mov	r13, r1
     c28:	0f 2e       	mov	r0, r31
     c2a:	fd e0       	ldi	r31, 0x0D	; 13
     c2c:	ef 2e       	mov	r14, r31
     c2e:	f1 2c       	mov	r15, r1
     c30:	f0 2d       	mov	r31, r0
     c32:	0c e0       	ldi	r16, 0x0C	; 12
     c34:	10 e0       	ldi	r17, 0x00	; 0
     c36:	2b e0       	ldi	r18, 0x0B	; 11
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	4a e0       	ldi	r20, 0x0A	; 10
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	69 e0       	ldi	r22, 0x09	; 9
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	88 e0       	ldi	r24, 0x08	; 8
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <teclado4x3_ini>

    printf("End:Dado");
     c4a:	8e e0       	ldi	r24, 0x0E	; 14
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	9f 93       	push	r25
     c50:	8f 93       	push	r24
     c52:	0e 94 99 0b 	call	0x1732	; 0x1732 <printf>
	
	offset=0;
	dado = eeprom_read_byte((uint8_t*)(end+offset));
     c56:	c0 e0       	ldi	r28, 0x00	; 0
     c58:	8c 2f       	mov	r24, r28
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 0d 0c 	call	0x181a	; 0x181a <eeprom_read_byte>
	printf("\n%02Xh=%02Xh", end+offset, dado);
     c60:	1f 92       	push	r1
     c62:	8f 93       	push	r24
     c64:	1f 92       	push	r1
     c66:	cf 93       	push	r28
     c68:	87 e1       	ldi	r24, 0x17	; 23
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	9f 93       	push	r25
     c6e:	8f 93       	push	r24
     c70:	0e 94 99 0b 	call	0x1732	; 0x1732 <printf>
     c74:	8d b7       	in	r24, 0x3d	; 61
     c76:	9e b7       	in	r25, 0x3e	; 62
     c78:	08 96       	adiw	r24, 0x08	; 8
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	9e bf       	out	0x3e, r25	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	8d bf       	out	0x3d, r24	; 61
	stdout = &mystdout;
	teclado4x3_ini(_PC0, _PC1, _PC2, _PC3, _PC4, _PC5, _PB0);

    printf("End:Dado");
	
	offset=0;
     c84:	10 e0       	ldi	r17, 0x00	; 0
	dado = eeprom_read_byte((uint8_t*)(end+offset));
	printf("\n%02Xh=%02Xh", end+offset, dado);
	
    while (1)
    {
	    tecla = le_teclado(LOOP);
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 47 05 	call	0xa8e	; 0xa8e <le_teclado>
	    
	    if(tecla == 1){		
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	01 f5       	brne	.+64     	; 0xcd2 <main+0xc0>
			offset++;
     c92:	1f 5f       	subi	r17, 0xFF	; 255
			dado = eeprom_read_byte((uint8_t*)(end+offset));
     c94:	c1 2f       	mov	r28, r17
     c96:	d0 e0       	ldi	r29, 0x00	; 0
     c98:	ce 01       	movw	r24, r28
     c9a:	0e 94 0d 0c 	call	0x181a	; 0x181a <eeprom_read_byte>
     c9e:	08 2f       	mov	r16, r24
			lcd_gotoxy(0, 1);
     ca0:	61 e0       	ldi	r22, 0x01	; 1
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_gotoxy>
			printf("%02Xh=%02Xh", end+offset, dado);
     ca8:	1f 92       	push	r1
     caa:	0f 93       	push	r16
     cac:	df 93       	push	r29
     cae:	1f 93       	push	r17
     cb0:	88 e1       	ldi	r24, 0x18	; 24
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	9f 93       	push	r25
     cb6:	8f 93       	push	r24
     cb8:	0e 94 99 0b 	call	0x1732	; 0x1732 <printf>
			lcd_gotoxy(4, 1);
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	84 e0       	ldi	r24, 0x04	; 4
     cc0:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_gotoxy>
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	da cf       	rjmp	.-76     	; 0xc86 <main+0x74>
	    }
	    else if(tecla == 4){
     cd2:	84 30       	cpi	r24, 0x04	; 4
     cd4:	01 f5       	brne	.+64     	; 0xd16 <main+0x104>
			offset--;
     cd6:	11 50       	subi	r17, 0x01	; 1
			dado = eeprom_read_byte((uint8_t*)(end+offset));
     cd8:	c1 2f       	mov	r28, r17
     cda:	d0 e0       	ldi	r29, 0x00	; 0
     cdc:	ce 01       	movw	r24, r28
     cde:	0e 94 0d 0c 	call	0x181a	; 0x181a <eeprom_read_byte>
     ce2:	08 2f       	mov	r16, r24
			lcd_gotoxy(0, 1);
     ce4:	61 e0       	ldi	r22, 0x01	; 1
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_gotoxy>
			printf("%02Xh=%02Xh", end+offset, dado);
     cec:	1f 92       	push	r1
     cee:	0f 93       	push	r16
     cf0:	df 93       	push	r29
     cf2:	1f 93       	push	r17
     cf4:	88 e1       	ldi	r24, 0x18	; 24
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	9f 93       	push	r25
     cfa:	8f 93       	push	r24
     cfc:	0e 94 99 0b 	call	0x1732	; 0x1732 <printf>
			lcd_gotoxy(4, 1);
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	84 e0       	ldi	r24, 0x04	; 4
     d04:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_gotoxy>
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	b8 cf       	rjmp	.-144    	; 0xc86 <main+0x74>
	    }
	    else if(tecla == '*'){
     d16:	8a 32       	cpi	r24, 0x2A	; 42
     d18:	09 f0       	breq	.+2      	; 0xd1c <main+0x10a>
     d1a:	b5 cf       	rjmp	.-150    	; 0xc86 <main+0x74>
			lcd_gotoxy(4, 1);
     d1c:	61 e0       	ldi	r22, 0x01	; 1
     d1e:	84 e0       	ldi	r24, 0x04	; 4
     d20:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_gotoxy>
			lcd_command(LCD_DISP_ON_CURSOR_BLINK);
     d24:	8f e0       	ldi	r24, 0x0F	; 15
     d26:	0e 94 67 04 	call	0x8ce	; 0x8ce <lcd_command>
			
			aux = 0;
			n_digito = 0;
     d2a:	d0 e0       	ldi	r29, 0x00	; 0
	    }
	    else if(tecla == '*'){
			lcd_gotoxy(4, 1);
			lcd_command(LCD_DISP_ON_CURSOR_BLINK);
			
			aux = 0;
     d2c:	00 e0       	ldi	r16, 0x00	; 0
			n_digito = 0;
			
			do{
				tecla = le_teclado(LOOP);
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 47 05 	call	0xa8e	; 0xa8e <le_teclado>
     d36:	c8 2f       	mov	r28, r24
				
				if(tecla < 10){
     d38:	8a 30       	cpi	r24, 0x0A	; 10
     d3a:	90 f4       	brcc	.+36     	; 0xd60 <main+0x14e>
					printf("%d", tecla);
     d3c:	1f 92       	push	r1
     d3e:	8f 93       	push	r24
     d40:	84 e2       	ldi	r24, 0x24	; 36
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	9f 93       	push	r25
     d46:	8f 93       	push	r24
     d48:	0e 94 99 0b 	call	0x1732	; 0x1732 <printf>
					aux = aux * 16;
					aux = aux + tecla;					
     d4c:	90 e1       	ldi	r25, 0x10	; 16
     d4e:	09 9f       	mul	r16, r25
     d50:	c0 0d       	add	r28, r0
     d52:	11 24       	eor	r1, r1
     d54:	0c 2f       	mov	r16, r28
					n_digito++;
     d56:	df 5f       	subi	r29, 0xFF	; 255
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
				}
				
			}while(n_digito != 2);
     d60:	d2 30       	cpi	r29, 0x02	; 2
     d62:	29 f7       	brne	.-54     	; 0xd2e <main+0x11c>
			eeprom_write_byte ((end+offset), aux);
     d64:	60 2f       	mov	r22, r16
     d66:	81 2f       	mov	r24, r17
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 15 0c 	call	0x182a	; 0x182a <eeprom_write_byte>
			lcd_command(LCD_DISP_ON);
     d6e:	8c e0       	ldi	r24, 0x0C	; 12
     d70:	0e 94 67 04 	call	0x8ce	; 0x8ce <lcd_command>
     d74:	88 cf       	rjmp	.-240    	; 0xc86 <main+0x74>

00000d76 <vfprintf>:
     d76:	a0 e1       	ldi	r26, 0x10	; 16
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e1 ec       	ldi	r30, 0xC1	; 193
     d7c:	f6 e0       	ldi	r31, 0x06	; 6
     d7e:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__prologue_saves__>
     d82:	7c 01       	movw	r14, r24
     d84:	1b 01       	movw	r2, r22
     d86:	6a 01       	movw	r12, r20
     d88:	fc 01       	movw	r30, r24
     d8a:	17 82       	std	Z+7, r1	; 0x07
     d8c:	16 82       	std	Z+6, r1	; 0x06
     d8e:	83 81       	ldd	r24, Z+3	; 0x03
     d90:	81 ff       	sbrs	r24, 1
     d92:	44 c3       	rjmp	.+1672   	; 0x141c <vfprintf+0x6a6>
     d94:	9e 01       	movw	r18, r28
     d96:	2f 5f       	subi	r18, 0xFF	; 255
     d98:	3f 4f       	sbci	r19, 0xFF	; 255
     d9a:	39 01       	movw	r6, r18
     d9c:	f7 01       	movw	r30, r14
     d9e:	93 81       	ldd	r25, Z+3	; 0x03
     da0:	f1 01       	movw	r30, r2
     da2:	93 fd       	sbrc	r25, 3
     da4:	85 91       	lpm	r24, Z+
     da6:	93 ff       	sbrs	r25, 3
     da8:	81 91       	ld	r24, Z+
     daa:	1f 01       	movw	r2, r30
     dac:	88 23       	and	r24, r24
     dae:	09 f4       	brne	.+2      	; 0xdb2 <vfprintf+0x3c>
     db0:	31 c3       	rjmp	.+1634   	; 0x1414 <vfprintf+0x69e>
     db2:	85 32       	cpi	r24, 0x25	; 37
     db4:	39 f4       	brne	.+14     	; 0xdc4 <vfprintf+0x4e>
     db6:	93 fd       	sbrc	r25, 3
     db8:	85 91       	lpm	r24, Z+
     dba:	93 ff       	sbrs	r25, 3
     dbc:	81 91       	ld	r24, Z+
     dbe:	1f 01       	movw	r2, r30
     dc0:	85 32       	cpi	r24, 0x25	; 37
     dc2:	39 f4       	brne	.+14     	; 0xdd2 <vfprintf+0x5c>
     dc4:	b7 01       	movw	r22, r14
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
     dcc:	56 01       	movw	r10, r12
     dce:	65 01       	movw	r12, r10
     dd0:	e5 cf       	rjmp	.-54     	; 0xd9c <vfprintf+0x26>
     dd2:	10 e0       	ldi	r17, 0x00	; 0
     dd4:	51 2c       	mov	r5, r1
     dd6:	91 2c       	mov	r9, r1
     dd8:	ff e1       	ldi	r31, 0x1F	; 31
     dda:	f9 15       	cp	r31, r9
     ddc:	d8 f0       	brcs	.+54     	; 0xe14 <vfprintf+0x9e>
     dde:	8b 32       	cpi	r24, 0x2B	; 43
     de0:	79 f0       	breq	.+30     	; 0xe00 <vfprintf+0x8a>
     de2:	38 f4       	brcc	.+14     	; 0xdf2 <vfprintf+0x7c>
     de4:	80 32       	cpi	r24, 0x20	; 32
     de6:	79 f0       	breq	.+30     	; 0xe06 <vfprintf+0x90>
     de8:	83 32       	cpi	r24, 0x23	; 35
     dea:	a1 f4       	brne	.+40     	; 0xe14 <vfprintf+0x9e>
     dec:	f9 2d       	mov	r31, r9
     dee:	f0 61       	ori	r31, 0x10	; 16
     df0:	2e c0       	rjmp	.+92     	; 0xe4e <vfprintf+0xd8>
     df2:	8d 32       	cpi	r24, 0x2D	; 45
     df4:	61 f0       	breq	.+24     	; 0xe0e <vfprintf+0x98>
     df6:	80 33       	cpi	r24, 0x30	; 48
     df8:	69 f4       	brne	.+26     	; 0xe14 <vfprintf+0x9e>
     dfa:	29 2d       	mov	r18, r9
     dfc:	21 60       	ori	r18, 0x01	; 1
     dfe:	2d c0       	rjmp	.+90     	; 0xe5a <vfprintf+0xe4>
     e00:	39 2d       	mov	r19, r9
     e02:	32 60       	ori	r19, 0x02	; 2
     e04:	93 2e       	mov	r9, r19
     e06:	89 2d       	mov	r24, r9
     e08:	84 60       	ori	r24, 0x04	; 4
     e0a:	98 2e       	mov	r9, r24
     e0c:	2a c0       	rjmp	.+84     	; 0xe62 <vfprintf+0xec>
     e0e:	e9 2d       	mov	r30, r9
     e10:	e8 60       	ori	r30, 0x08	; 8
     e12:	15 c0       	rjmp	.+42     	; 0xe3e <vfprintf+0xc8>
     e14:	97 fc       	sbrc	r9, 7
     e16:	2d c0       	rjmp	.+90     	; 0xe72 <vfprintf+0xfc>
     e18:	20 ed       	ldi	r18, 0xD0	; 208
     e1a:	28 0f       	add	r18, r24
     e1c:	2a 30       	cpi	r18, 0x0A	; 10
     e1e:	88 f4       	brcc	.+34     	; 0xe42 <vfprintf+0xcc>
     e20:	96 fe       	sbrs	r9, 6
     e22:	06 c0       	rjmp	.+12     	; 0xe30 <vfprintf+0xba>
     e24:	3a e0       	ldi	r19, 0x0A	; 10
     e26:	13 9f       	mul	r17, r19
     e28:	20 0d       	add	r18, r0
     e2a:	11 24       	eor	r1, r1
     e2c:	12 2f       	mov	r17, r18
     e2e:	19 c0       	rjmp	.+50     	; 0xe62 <vfprintf+0xec>
     e30:	8a e0       	ldi	r24, 0x0A	; 10
     e32:	58 9e       	mul	r5, r24
     e34:	20 0d       	add	r18, r0
     e36:	11 24       	eor	r1, r1
     e38:	52 2e       	mov	r5, r18
     e3a:	e9 2d       	mov	r30, r9
     e3c:	e0 62       	ori	r30, 0x20	; 32
     e3e:	9e 2e       	mov	r9, r30
     e40:	10 c0       	rjmp	.+32     	; 0xe62 <vfprintf+0xec>
     e42:	8e 32       	cpi	r24, 0x2E	; 46
     e44:	31 f4       	brne	.+12     	; 0xe52 <vfprintf+0xdc>
     e46:	96 fc       	sbrc	r9, 6
     e48:	e5 c2       	rjmp	.+1482   	; 0x1414 <vfprintf+0x69e>
     e4a:	f9 2d       	mov	r31, r9
     e4c:	f0 64       	ori	r31, 0x40	; 64
     e4e:	9f 2e       	mov	r9, r31
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <vfprintf+0xec>
     e52:	8c 36       	cpi	r24, 0x6C	; 108
     e54:	21 f4       	brne	.+8      	; 0xe5e <vfprintf+0xe8>
     e56:	29 2d       	mov	r18, r9
     e58:	20 68       	ori	r18, 0x80	; 128
     e5a:	92 2e       	mov	r9, r18
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <vfprintf+0xec>
     e5e:	88 36       	cpi	r24, 0x68	; 104
     e60:	41 f4       	brne	.+16     	; 0xe72 <vfprintf+0xfc>
     e62:	f1 01       	movw	r30, r2
     e64:	93 fd       	sbrc	r25, 3
     e66:	85 91       	lpm	r24, Z+
     e68:	93 ff       	sbrs	r25, 3
     e6a:	81 91       	ld	r24, Z+
     e6c:	1f 01       	movw	r2, r30
     e6e:	81 11       	cpse	r24, r1
     e70:	b3 cf       	rjmp	.-154    	; 0xdd8 <vfprintf+0x62>
     e72:	9b eb       	ldi	r25, 0xBB	; 187
     e74:	98 0f       	add	r25, r24
     e76:	93 30       	cpi	r25, 0x03	; 3
     e78:	20 f4       	brcc	.+8      	; 0xe82 <vfprintf+0x10c>
     e7a:	99 2d       	mov	r25, r9
     e7c:	90 61       	ori	r25, 0x10	; 16
     e7e:	80 5e       	subi	r24, 0xE0	; 224
     e80:	07 c0       	rjmp	.+14     	; 0xe90 <vfprintf+0x11a>
     e82:	9b e9       	ldi	r25, 0x9B	; 155
     e84:	98 0f       	add	r25, r24
     e86:	93 30       	cpi	r25, 0x03	; 3
     e88:	08 f0       	brcs	.+2      	; 0xe8c <vfprintf+0x116>
     e8a:	66 c1       	rjmp	.+716    	; 0x1158 <vfprintf+0x3e2>
     e8c:	99 2d       	mov	r25, r9
     e8e:	9f 7e       	andi	r25, 0xEF	; 239
     e90:	96 ff       	sbrs	r25, 6
     e92:	16 e0       	ldi	r17, 0x06	; 6
     e94:	9f 73       	andi	r25, 0x3F	; 63
     e96:	99 2e       	mov	r9, r25
     e98:	85 36       	cpi	r24, 0x65	; 101
     e9a:	19 f4       	brne	.+6      	; 0xea2 <vfprintf+0x12c>
     e9c:	90 64       	ori	r25, 0x40	; 64
     e9e:	99 2e       	mov	r9, r25
     ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <vfprintf+0x13c>
     ea2:	86 36       	cpi	r24, 0x66	; 102
     ea4:	21 f4       	brne	.+8      	; 0xeae <vfprintf+0x138>
     ea6:	39 2f       	mov	r19, r25
     ea8:	30 68       	ori	r19, 0x80	; 128
     eaa:	93 2e       	mov	r9, r19
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <vfprintf+0x13c>
     eae:	11 11       	cpse	r17, r1
     eb0:	11 50       	subi	r17, 0x01	; 1
     eb2:	97 fe       	sbrs	r9, 7
     eb4:	07 c0       	rjmp	.+14     	; 0xec4 <vfprintf+0x14e>
     eb6:	1c 33       	cpi	r17, 0x3C	; 60
     eb8:	50 f4       	brcc	.+20     	; 0xece <vfprintf+0x158>
     eba:	44 24       	eor	r4, r4
     ebc:	43 94       	inc	r4
     ebe:	41 0e       	add	r4, r17
     ec0:	27 e0       	ldi	r18, 0x07	; 7
     ec2:	0b c0       	rjmp	.+22     	; 0xeda <vfprintf+0x164>
     ec4:	18 30       	cpi	r17, 0x08	; 8
     ec6:	38 f0       	brcs	.+14     	; 0xed6 <vfprintf+0x160>
     ec8:	27 e0       	ldi	r18, 0x07	; 7
     eca:	17 e0       	ldi	r17, 0x07	; 7
     ecc:	05 c0       	rjmp	.+10     	; 0xed8 <vfprintf+0x162>
     ece:	27 e0       	ldi	r18, 0x07	; 7
     ed0:	9c e3       	ldi	r25, 0x3C	; 60
     ed2:	49 2e       	mov	r4, r25
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <vfprintf+0x164>
     ed6:	21 2f       	mov	r18, r17
     ed8:	41 2c       	mov	r4, r1
     eda:	56 01       	movw	r10, r12
     edc:	84 e0       	ldi	r24, 0x04	; 4
     ede:	a8 0e       	add	r10, r24
     ee0:	b1 1c       	adc	r11, r1
     ee2:	f6 01       	movw	r30, r12
     ee4:	60 81       	ld	r22, Z
     ee6:	71 81       	ldd	r23, Z+1	; 0x01
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	04 2d       	mov	r16, r4
     eee:	a3 01       	movw	r20, r6
     ef0:	0e 94 6f 0a 	call	0x14de	; 0x14de <__ftoa_engine>
     ef4:	6c 01       	movw	r12, r24
     ef6:	f9 81       	ldd	r31, Y+1	; 0x01
     ef8:	fc 87       	std	Y+12, r31	; 0x0c
     efa:	f0 ff       	sbrs	r31, 0
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <vfprintf+0x18c>
     efe:	f3 ff       	sbrs	r31, 3
     f00:	06 c0       	rjmp	.+12     	; 0xf0e <vfprintf+0x198>
     f02:	91 fc       	sbrc	r9, 1
     f04:	06 c0       	rjmp	.+12     	; 0xf12 <vfprintf+0x19c>
     f06:	92 fe       	sbrs	r9, 2
     f08:	06 c0       	rjmp	.+12     	; 0xf16 <vfprintf+0x1a0>
     f0a:	00 e2       	ldi	r16, 0x20	; 32
     f0c:	05 c0       	rjmp	.+10     	; 0xf18 <vfprintf+0x1a2>
     f0e:	0d e2       	ldi	r16, 0x2D	; 45
     f10:	03 c0       	rjmp	.+6      	; 0xf18 <vfprintf+0x1a2>
     f12:	0b e2       	ldi	r16, 0x2B	; 43
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <vfprintf+0x1a2>
     f16:	00 e0       	ldi	r16, 0x00	; 0
     f18:	8c 85       	ldd	r24, Y+12	; 0x0c
     f1a:	8c 70       	andi	r24, 0x0C	; 12
     f1c:	19 f0       	breq	.+6      	; 0xf24 <vfprintf+0x1ae>
     f1e:	01 11       	cpse	r16, r1
     f20:	5a c2       	rjmp	.+1204   	; 0x13d6 <vfprintf+0x660>
     f22:	9b c2       	rjmp	.+1334   	; 0x145a <vfprintf+0x6e4>
     f24:	97 fe       	sbrs	r9, 7
     f26:	10 c0       	rjmp	.+32     	; 0xf48 <vfprintf+0x1d2>
     f28:	4c 0c       	add	r4, r12
     f2a:	fc 85       	ldd	r31, Y+12	; 0x0c
     f2c:	f4 ff       	sbrs	r31, 4
     f2e:	04 c0       	rjmp	.+8      	; 0xf38 <vfprintf+0x1c2>
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	81 33       	cpi	r24, 0x31	; 49
     f34:	09 f4       	brne	.+2      	; 0xf38 <vfprintf+0x1c2>
     f36:	4a 94       	dec	r4
     f38:	14 14       	cp	r1, r4
     f3a:	74 f5       	brge	.+92     	; 0xf98 <vfprintf+0x222>
     f3c:	28 e0       	ldi	r18, 0x08	; 8
     f3e:	24 15       	cp	r18, r4
     f40:	78 f5       	brcc	.+94     	; 0xfa0 <vfprintf+0x22a>
     f42:	88 e0       	ldi	r24, 0x08	; 8
     f44:	48 2e       	mov	r4, r24
     f46:	2c c0       	rjmp	.+88     	; 0xfa0 <vfprintf+0x22a>
     f48:	96 fc       	sbrc	r9, 6
     f4a:	2a c0       	rjmp	.+84     	; 0xfa0 <vfprintf+0x22a>
     f4c:	81 2f       	mov	r24, r17
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	8c 15       	cp	r24, r12
     f52:	9d 05       	cpc	r25, r13
     f54:	9c f0       	brlt	.+38     	; 0xf7c <vfprintf+0x206>
     f56:	3c ef       	ldi	r19, 0xFC	; 252
     f58:	c3 16       	cp	r12, r19
     f5a:	3f ef       	ldi	r19, 0xFF	; 255
     f5c:	d3 06       	cpc	r13, r19
     f5e:	74 f0       	brlt	.+28     	; 0xf7c <vfprintf+0x206>
     f60:	89 2d       	mov	r24, r9
     f62:	80 68       	ori	r24, 0x80	; 128
     f64:	98 2e       	mov	r9, r24
     f66:	0a c0       	rjmp	.+20     	; 0xf7c <vfprintf+0x206>
     f68:	e2 e0       	ldi	r30, 0x02	; 2
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	ec 0f       	add	r30, r28
     f6e:	fd 1f       	adc	r31, r29
     f70:	e1 0f       	add	r30, r17
     f72:	f1 1d       	adc	r31, r1
     f74:	80 81       	ld	r24, Z
     f76:	80 33       	cpi	r24, 0x30	; 48
     f78:	19 f4       	brne	.+6      	; 0xf80 <vfprintf+0x20a>
     f7a:	11 50       	subi	r17, 0x01	; 1
     f7c:	11 11       	cpse	r17, r1
     f7e:	f4 cf       	rjmp	.-24     	; 0xf68 <vfprintf+0x1f2>
     f80:	97 fe       	sbrs	r9, 7
     f82:	0e c0       	rjmp	.+28     	; 0xfa0 <vfprintf+0x22a>
     f84:	44 24       	eor	r4, r4
     f86:	43 94       	inc	r4
     f88:	41 0e       	add	r4, r17
     f8a:	81 2f       	mov	r24, r17
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	c8 16       	cp	r12, r24
     f90:	d9 06       	cpc	r13, r25
     f92:	2c f4       	brge	.+10     	; 0xf9e <vfprintf+0x228>
     f94:	1c 19       	sub	r17, r12
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <vfprintf+0x22a>
     f98:	44 24       	eor	r4, r4
     f9a:	43 94       	inc	r4
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <vfprintf+0x22a>
     f9e:	10 e0       	ldi	r17, 0x00	; 0
     fa0:	97 fe       	sbrs	r9, 7
     fa2:	06 c0       	rjmp	.+12     	; 0xfb0 <vfprintf+0x23a>
     fa4:	1c 14       	cp	r1, r12
     fa6:	1d 04       	cpc	r1, r13
     fa8:	34 f4       	brge	.+12     	; 0xfb6 <vfprintf+0x240>
     faa:	c6 01       	movw	r24, r12
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	05 c0       	rjmp	.+10     	; 0xfba <vfprintf+0x244>
     fb0:	85 e0       	ldi	r24, 0x05	; 5
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <vfprintf+0x244>
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	01 11       	cpse	r16, r1
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	11 23       	and	r17, r17
     fc0:	31 f0       	breq	.+12     	; 0xfce <vfprintf+0x258>
     fc2:	21 2f       	mov	r18, r17
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	2f 5f       	subi	r18, 0xFF	; 255
     fc8:	3f 4f       	sbci	r19, 0xFF	; 255
     fca:	82 0f       	add	r24, r18
     fcc:	93 1f       	adc	r25, r19
     fce:	25 2d       	mov	r18, r5
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	82 17       	cp	r24, r18
     fd4:	93 07       	cpc	r25, r19
     fd6:	14 f4       	brge	.+4      	; 0xfdc <vfprintf+0x266>
     fd8:	58 1a       	sub	r5, r24
     fda:	01 c0       	rjmp	.+2      	; 0xfde <vfprintf+0x268>
     fdc:	51 2c       	mov	r5, r1
     fde:	89 2d       	mov	r24, r9
     fe0:	89 70       	andi	r24, 0x09	; 9
     fe2:	49 f4       	brne	.+18     	; 0xff6 <vfprintf+0x280>
     fe4:	55 20       	and	r5, r5
     fe6:	39 f0       	breq	.+14     	; 0xff6 <vfprintf+0x280>
     fe8:	b7 01       	movw	r22, r14
     fea:	80 e2       	ldi	r24, 0x20	; 32
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
     ff2:	5a 94       	dec	r5
     ff4:	f7 cf       	rjmp	.-18     	; 0xfe4 <vfprintf+0x26e>
     ff6:	00 23       	and	r16, r16
     ff8:	29 f0       	breq	.+10     	; 0x1004 <vfprintf+0x28e>
     ffa:	b7 01       	movw	r22, r14
     ffc:	80 2f       	mov	r24, r16
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    1004:	93 fc       	sbrc	r9, 3
    1006:	09 c0       	rjmp	.+18     	; 0x101a <vfprintf+0x2a4>
    1008:	55 20       	and	r5, r5
    100a:	39 f0       	breq	.+14     	; 0x101a <vfprintf+0x2a4>
    100c:	b7 01       	movw	r22, r14
    100e:	80 e3       	ldi	r24, 0x30	; 48
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    1016:	5a 94       	dec	r5
    1018:	f7 cf       	rjmp	.-18     	; 0x1008 <vfprintf+0x292>
    101a:	97 fe       	sbrs	r9, 7
    101c:	4c c0       	rjmp	.+152    	; 0x10b6 <vfprintf+0x340>
    101e:	46 01       	movw	r8, r12
    1020:	d7 fe       	sbrs	r13, 7
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <vfprintf+0x2b2>
    1024:	81 2c       	mov	r8, r1
    1026:	91 2c       	mov	r9, r1
    1028:	c6 01       	movw	r24, r12
    102a:	88 19       	sub	r24, r8
    102c:	99 09       	sbc	r25, r9
    102e:	f3 01       	movw	r30, r6
    1030:	e8 0f       	add	r30, r24
    1032:	f9 1f       	adc	r31, r25
    1034:	fe 87       	std	Y+14, r31	; 0x0e
    1036:	ed 87       	std	Y+13, r30	; 0x0d
    1038:	96 01       	movw	r18, r12
    103a:	24 19       	sub	r18, r4
    103c:	31 09       	sbc	r19, r1
    103e:	38 8b       	std	Y+16, r19	; 0x10
    1040:	2f 87       	std	Y+15, r18	; 0x0f
    1042:	01 2f       	mov	r16, r17
    1044:	10 e0       	ldi	r17, 0x00	; 0
    1046:	11 95       	neg	r17
    1048:	01 95       	neg	r16
    104a:	11 09       	sbc	r17, r1
    104c:	3f ef       	ldi	r19, 0xFF	; 255
    104e:	83 16       	cp	r8, r19
    1050:	93 06       	cpc	r9, r19
    1052:	29 f4       	brne	.+10     	; 0x105e <vfprintf+0x2e8>
    1054:	b7 01       	movw	r22, r14
    1056:	8e e2       	ldi	r24, 0x2E	; 46
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    105e:	c8 14       	cp	r12, r8
    1060:	d9 04       	cpc	r13, r9
    1062:	4c f0       	brlt	.+18     	; 0x1076 <vfprintf+0x300>
    1064:	8f 85       	ldd	r24, Y+15	; 0x0f
    1066:	98 89       	ldd	r25, Y+16	; 0x10
    1068:	88 15       	cp	r24, r8
    106a:	99 05       	cpc	r25, r9
    106c:	24 f4       	brge	.+8      	; 0x1076 <vfprintf+0x300>
    106e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1070:	fe 85       	ldd	r31, Y+14	; 0x0e
    1072:	81 81       	ldd	r24, Z+1	; 0x01
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <vfprintf+0x302>
    1076:	80 e3       	ldi	r24, 0x30	; 48
    1078:	f1 e0       	ldi	r31, 0x01	; 1
    107a:	8f 1a       	sub	r8, r31
    107c:	91 08       	sbc	r9, r1
    107e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1080:	3e 85       	ldd	r19, Y+14	; 0x0e
    1082:	2f 5f       	subi	r18, 0xFF	; 255
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	3e 87       	std	Y+14, r19	; 0x0e
    1088:	2d 87       	std	Y+13, r18	; 0x0d
    108a:	80 16       	cp	r8, r16
    108c:	91 06       	cpc	r9, r17
    108e:	2c f0       	brlt	.+10     	; 0x109a <vfprintf+0x324>
    1090:	b7 01       	movw	r22, r14
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    1098:	d9 cf       	rjmp	.-78     	; 0x104c <vfprintf+0x2d6>
    109a:	c8 14       	cp	r12, r8
    109c:	d9 04       	cpc	r13, r9
    109e:	41 f4       	brne	.+16     	; 0x10b0 <vfprintf+0x33a>
    10a0:	9a 81       	ldd	r25, Y+2	; 0x02
    10a2:	96 33       	cpi	r25, 0x36	; 54
    10a4:	20 f4       	brcc	.+8      	; 0x10ae <vfprintf+0x338>
    10a6:	95 33       	cpi	r25, 0x35	; 53
    10a8:	19 f4       	brne	.+6      	; 0x10b0 <vfprintf+0x33a>
    10aa:	3c 85       	ldd	r19, Y+12	; 0x0c
    10ac:	34 ff       	sbrs	r19, 4
    10ae:	81 e3       	ldi	r24, 0x31	; 49
    10b0:	b7 01       	movw	r22, r14
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	4e c0       	rjmp	.+156    	; 0x1152 <vfprintf+0x3dc>
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	81 33       	cpi	r24, 0x31	; 49
    10ba:	19 f0       	breq	.+6      	; 0x10c2 <vfprintf+0x34c>
    10bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    10be:	9f 7e       	andi	r25, 0xEF	; 239
    10c0:	9c 87       	std	Y+12, r25	; 0x0c
    10c2:	b7 01       	movw	r22, r14
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    10ca:	11 11       	cpse	r17, r1
    10cc:	05 c0       	rjmp	.+10     	; 0x10d8 <vfprintf+0x362>
    10ce:	94 fc       	sbrc	r9, 4
    10d0:	18 c0       	rjmp	.+48     	; 0x1102 <vfprintf+0x38c>
    10d2:	85 e6       	ldi	r24, 0x65	; 101
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	17 c0       	rjmp	.+46     	; 0x1106 <vfprintf+0x390>
    10d8:	b7 01       	movw	r22, r14
    10da:	8e e2       	ldi	r24, 0x2E	; 46
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    10e2:	1e 5f       	subi	r17, 0xFE	; 254
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	01 e0       	ldi	r16, 0x01	; 1
    10e8:	08 0f       	add	r16, r24
    10ea:	f3 01       	movw	r30, r6
    10ec:	e8 0f       	add	r30, r24
    10ee:	f1 1d       	adc	r31, r1
    10f0:	80 81       	ld	r24, Z
    10f2:	b7 01       	movw	r22, r14
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    10fa:	80 2f       	mov	r24, r16
    10fc:	01 13       	cpse	r16, r17
    10fe:	f3 cf       	rjmp	.-26     	; 0x10e6 <vfprintf+0x370>
    1100:	e6 cf       	rjmp	.-52     	; 0x10ce <vfprintf+0x358>
    1102:	85 e4       	ldi	r24, 0x45	; 69
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	b7 01       	movw	r22, r14
    1108:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    110c:	d7 fc       	sbrc	r13, 7
    110e:	06 c0       	rjmp	.+12     	; 0x111c <vfprintf+0x3a6>
    1110:	c1 14       	cp	r12, r1
    1112:	d1 04       	cpc	r13, r1
    1114:	41 f4       	brne	.+16     	; 0x1126 <vfprintf+0x3b0>
    1116:	ec 85       	ldd	r30, Y+12	; 0x0c
    1118:	e4 ff       	sbrs	r30, 4
    111a:	05 c0       	rjmp	.+10     	; 0x1126 <vfprintf+0x3b0>
    111c:	d1 94       	neg	r13
    111e:	c1 94       	neg	r12
    1120:	d1 08       	sbc	r13, r1
    1122:	8d e2       	ldi	r24, 0x2D	; 45
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <vfprintf+0x3b2>
    1126:	8b e2       	ldi	r24, 0x2B	; 43
    1128:	b7 01       	movw	r22, r14
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    1130:	80 e3       	ldi	r24, 0x30	; 48
    1132:	2a e0       	ldi	r18, 0x0A	; 10
    1134:	c2 16       	cp	r12, r18
    1136:	d1 04       	cpc	r13, r1
    1138:	2c f0       	brlt	.+10     	; 0x1144 <vfprintf+0x3ce>
    113a:	8f 5f       	subi	r24, 0xFF	; 255
    113c:	fa e0       	ldi	r31, 0x0A	; 10
    113e:	cf 1a       	sub	r12, r31
    1140:	d1 08       	sbc	r13, r1
    1142:	f7 cf       	rjmp	.-18     	; 0x1132 <vfprintf+0x3bc>
    1144:	b7 01       	movw	r22, r14
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    114c:	b7 01       	movw	r22, r14
    114e:	c6 01       	movw	r24, r12
    1150:	c0 96       	adiw	r24, 0x30	; 48
    1152:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    1156:	54 c1       	rjmp	.+680    	; 0x1400 <vfprintf+0x68a>
    1158:	83 36       	cpi	r24, 0x63	; 99
    115a:	31 f0       	breq	.+12     	; 0x1168 <vfprintf+0x3f2>
    115c:	83 37       	cpi	r24, 0x73	; 115
    115e:	79 f0       	breq	.+30     	; 0x117e <vfprintf+0x408>
    1160:	83 35       	cpi	r24, 0x53	; 83
    1162:	09 f0       	breq	.+2      	; 0x1166 <vfprintf+0x3f0>
    1164:	56 c0       	rjmp	.+172    	; 0x1212 <vfprintf+0x49c>
    1166:	20 c0       	rjmp	.+64     	; 0x11a8 <vfprintf+0x432>
    1168:	56 01       	movw	r10, r12
    116a:	32 e0       	ldi	r19, 0x02	; 2
    116c:	a3 0e       	add	r10, r19
    116e:	b1 1c       	adc	r11, r1
    1170:	f6 01       	movw	r30, r12
    1172:	80 81       	ld	r24, Z
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	01 e0       	ldi	r16, 0x01	; 1
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	63 01       	movw	r12, r6
    117c:	12 c0       	rjmp	.+36     	; 0x11a2 <vfprintf+0x42c>
    117e:	56 01       	movw	r10, r12
    1180:	f2 e0       	ldi	r31, 0x02	; 2
    1182:	af 0e       	add	r10, r31
    1184:	b1 1c       	adc	r11, r1
    1186:	f6 01       	movw	r30, r12
    1188:	c0 80       	ld	r12, Z
    118a:	d1 80       	ldd	r13, Z+1	; 0x01
    118c:	96 fe       	sbrs	r9, 6
    118e:	03 c0       	rjmp	.+6      	; 0x1196 <vfprintf+0x420>
    1190:	61 2f       	mov	r22, r17
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	02 c0       	rjmp	.+4      	; 0x119a <vfprintf+0x424>
    1196:	6f ef       	ldi	r22, 0xFF	; 255
    1198:	7f ef       	ldi	r23, 0xFF	; 255
    119a:	c6 01       	movw	r24, r12
    119c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <strnlen>
    11a0:	8c 01       	movw	r16, r24
    11a2:	f9 2d       	mov	r31, r9
    11a4:	ff 77       	andi	r31, 0x7F	; 127
    11a6:	14 c0       	rjmp	.+40     	; 0x11d0 <vfprintf+0x45a>
    11a8:	56 01       	movw	r10, r12
    11aa:	22 e0       	ldi	r18, 0x02	; 2
    11ac:	a2 0e       	add	r10, r18
    11ae:	b1 1c       	adc	r11, r1
    11b0:	f6 01       	movw	r30, r12
    11b2:	c0 80       	ld	r12, Z
    11b4:	d1 80       	ldd	r13, Z+1	; 0x01
    11b6:	96 fe       	sbrs	r9, 6
    11b8:	03 c0       	rjmp	.+6      	; 0x11c0 <vfprintf+0x44a>
    11ba:	61 2f       	mov	r22, r17
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <vfprintf+0x44e>
    11c0:	6f ef       	ldi	r22, 0xFF	; 255
    11c2:	7f ef       	ldi	r23, 0xFF	; 255
    11c4:	c6 01       	movw	r24, r12
    11c6:	0e 94 47 0b 	call	0x168e	; 0x168e <strnlen_P>
    11ca:	8c 01       	movw	r16, r24
    11cc:	f9 2d       	mov	r31, r9
    11ce:	f0 68       	ori	r31, 0x80	; 128
    11d0:	9f 2e       	mov	r9, r31
    11d2:	f3 fd       	sbrc	r31, 3
    11d4:	1a c0       	rjmp	.+52     	; 0x120a <vfprintf+0x494>
    11d6:	85 2d       	mov	r24, r5
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	08 17       	cp	r16, r24
    11dc:	19 07       	cpc	r17, r25
    11de:	a8 f4       	brcc	.+42     	; 0x120a <vfprintf+0x494>
    11e0:	b7 01       	movw	r22, r14
    11e2:	80 e2       	ldi	r24, 0x20	; 32
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    11ea:	5a 94       	dec	r5
    11ec:	f4 cf       	rjmp	.-24     	; 0x11d6 <vfprintf+0x460>
    11ee:	f6 01       	movw	r30, r12
    11f0:	97 fc       	sbrc	r9, 7
    11f2:	85 91       	lpm	r24, Z+
    11f4:	97 fe       	sbrs	r9, 7
    11f6:	81 91       	ld	r24, Z+
    11f8:	6f 01       	movw	r12, r30
    11fa:	b7 01       	movw	r22, r14
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    1202:	51 10       	cpse	r5, r1
    1204:	5a 94       	dec	r5
    1206:	01 50       	subi	r16, 0x01	; 1
    1208:	11 09       	sbc	r17, r1
    120a:	01 15       	cp	r16, r1
    120c:	11 05       	cpc	r17, r1
    120e:	79 f7       	brne	.-34     	; 0x11ee <vfprintf+0x478>
    1210:	f7 c0       	rjmp	.+494    	; 0x1400 <vfprintf+0x68a>
    1212:	84 36       	cpi	r24, 0x64	; 100
    1214:	11 f0       	breq	.+4      	; 0x121a <vfprintf+0x4a4>
    1216:	89 36       	cpi	r24, 0x69	; 105
    1218:	61 f5       	brne	.+88     	; 0x1272 <vfprintf+0x4fc>
    121a:	56 01       	movw	r10, r12
    121c:	97 fe       	sbrs	r9, 7
    121e:	09 c0       	rjmp	.+18     	; 0x1232 <vfprintf+0x4bc>
    1220:	24 e0       	ldi	r18, 0x04	; 4
    1222:	a2 0e       	add	r10, r18
    1224:	b1 1c       	adc	r11, r1
    1226:	f6 01       	movw	r30, r12
    1228:	60 81       	ld	r22, Z
    122a:	71 81       	ldd	r23, Z+1	; 0x01
    122c:	82 81       	ldd	r24, Z+2	; 0x02
    122e:	93 81       	ldd	r25, Z+3	; 0x03
    1230:	0a c0       	rjmp	.+20     	; 0x1246 <vfprintf+0x4d0>
    1232:	f2 e0       	ldi	r31, 0x02	; 2
    1234:	af 0e       	add	r10, r31
    1236:	b1 1c       	adc	r11, r1
    1238:	f6 01       	movw	r30, r12
    123a:	60 81       	ld	r22, Z
    123c:	71 81       	ldd	r23, Z+1	; 0x01
    123e:	07 2e       	mov	r0, r23
    1240:	00 0c       	add	r0, r0
    1242:	88 0b       	sbc	r24, r24
    1244:	99 0b       	sbc	r25, r25
    1246:	f9 2d       	mov	r31, r9
    1248:	ff 76       	andi	r31, 0x6F	; 111
    124a:	9f 2e       	mov	r9, r31
    124c:	97 ff       	sbrs	r25, 7
    124e:	09 c0       	rjmp	.+18     	; 0x1262 <vfprintf+0x4ec>
    1250:	90 95       	com	r25
    1252:	80 95       	com	r24
    1254:	70 95       	com	r23
    1256:	61 95       	neg	r22
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	8f 4f       	sbci	r24, 0xFF	; 255
    125c:	9f 4f       	sbci	r25, 0xFF	; 255
    125e:	f0 68       	ori	r31, 0x80	; 128
    1260:	9f 2e       	mov	r9, r31
    1262:	2a e0       	ldi	r18, 0x0A	; 10
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	a3 01       	movw	r20, r6
    1268:	0e 94 af 0b 	call	0x175e	; 0x175e <__ultoa_invert>
    126c:	c8 2e       	mov	r12, r24
    126e:	c6 18       	sub	r12, r6
    1270:	3f c0       	rjmp	.+126    	; 0x12f0 <vfprintf+0x57a>
    1272:	09 2d       	mov	r16, r9
    1274:	85 37       	cpi	r24, 0x75	; 117
    1276:	21 f4       	brne	.+8      	; 0x1280 <vfprintf+0x50a>
    1278:	0f 7e       	andi	r16, 0xEF	; 239
    127a:	2a e0       	ldi	r18, 0x0A	; 10
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	1d c0       	rjmp	.+58     	; 0x12ba <vfprintf+0x544>
    1280:	09 7f       	andi	r16, 0xF9	; 249
    1282:	8f 36       	cpi	r24, 0x6F	; 111
    1284:	91 f0       	breq	.+36     	; 0x12aa <vfprintf+0x534>
    1286:	18 f4       	brcc	.+6      	; 0x128e <vfprintf+0x518>
    1288:	88 35       	cpi	r24, 0x58	; 88
    128a:	59 f0       	breq	.+22     	; 0x12a2 <vfprintf+0x52c>
    128c:	c3 c0       	rjmp	.+390    	; 0x1414 <vfprintf+0x69e>
    128e:	80 37       	cpi	r24, 0x70	; 112
    1290:	19 f0       	breq	.+6      	; 0x1298 <vfprintf+0x522>
    1292:	88 37       	cpi	r24, 0x78	; 120
    1294:	11 f0       	breq	.+4      	; 0x129a <vfprintf+0x524>
    1296:	be c0       	rjmp	.+380    	; 0x1414 <vfprintf+0x69e>
    1298:	00 61       	ori	r16, 0x10	; 16
    129a:	04 ff       	sbrs	r16, 4
    129c:	09 c0       	rjmp	.+18     	; 0x12b0 <vfprintf+0x53a>
    129e:	04 60       	ori	r16, 0x04	; 4
    12a0:	07 c0       	rjmp	.+14     	; 0x12b0 <vfprintf+0x53a>
    12a2:	94 fe       	sbrs	r9, 4
    12a4:	08 c0       	rjmp	.+16     	; 0x12b6 <vfprintf+0x540>
    12a6:	06 60       	ori	r16, 0x06	; 6
    12a8:	06 c0       	rjmp	.+12     	; 0x12b6 <vfprintf+0x540>
    12aa:	28 e0       	ldi	r18, 0x08	; 8
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	05 c0       	rjmp	.+10     	; 0x12ba <vfprintf+0x544>
    12b0:	20 e1       	ldi	r18, 0x10	; 16
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <vfprintf+0x544>
    12b6:	20 e1       	ldi	r18, 0x10	; 16
    12b8:	32 e0       	ldi	r19, 0x02	; 2
    12ba:	56 01       	movw	r10, r12
    12bc:	07 ff       	sbrs	r16, 7
    12be:	09 c0       	rjmp	.+18     	; 0x12d2 <vfprintf+0x55c>
    12c0:	84 e0       	ldi	r24, 0x04	; 4
    12c2:	a8 0e       	add	r10, r24
    12c4:	b1 1c       	adc	r11, r1
    12c6:	f6 01       	movw	r30, r12
    12c8:	60 81       	ld	r22, Z
    12ca:	71 81       	ldd	r23, Z+1	; 0x01
    12cc:	82 81       	ldd	r24, Z+2	; 0x02
    12ce:	93 81       	ldd	r25, Z+3	; 0x03
    12d0:	08 c0       	rjmp	.+16     	; 0x12e2 <vfprintf+0x56c>
    12d2:	f2 e0       	ldi	r31, 0x02	; 2
    12d4:	af 0e       	add	r10, r31
    12d6:	b1 1c       	adc	r11, r1
    12d8:	f6 01       	movw	r30, r12
    12da:	60 81       	ld	r22, Z
    12dc:	71 81       	ldd	r23, Z+1	; 0x01
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a3 01       	movw	r20, r6
    12e4:	0e 94 af 0b 	call	0x175e	; 0x175e <__ultoa_invert>
    12e8:	c8 2e       	mov	r12, r24
    12ea:	c6 18       	sub	r12, r6
    12ec:	0f 77       	andi	r16, 0x7F	; 127
    12ee:	90 2e       	mov	r9, r16
    12f0:	96 fe       	sbrs	r9, 6
    12f2:	0b c0       	rjmp	.+22     	; 0x130a <vfprintf+0x594>
    12f4:	09 2d       	mov	r16, r9
    12f6:	0e 7f       	andi	r16, 0xFE	; 254
    12f8:	c1 16       	cp	r12, r17
    12fa:	50 f4       	brcc	.+20     	; 0x1310 <vfprintf+0x59a>
    12fc:	94 fe       	sbrs	r9, 4
    12fe:	0a c0       	rjmp	.+20     	; 0x1314 <vfprintf+0x59e>
    1300:	92 fc       	sbrc	r9, 2
    1302:	08 c0       	rjmp	.+16     	; 0x1314 <vfprintf+0x59e>
    1304:	09 2d       	mov	r16, r9
    1306:	0e 7e       	andi	r16, 0xEE	; 238
    1308:	05 c0       	rjmp	.+10     	; 0x1314 <vfprintf+0x59e>
    130a:	dc 2c       	mov	r13, r12
    130c:	09 2d       	mov	r16, r9
    130e:	03 c0       	rjmp	.+6      	; 0x1316 <vfprintf+0x5a0>
    1310:	dc 2c       	mov	r13, r12
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <vfprintf+0x5a0>
    1314:	d1 2e       	mov	r13, r17
    1316:	04 ff       	sbrs	r16, 4
    1318:	0d c0       	rjmp	.+26     	; 0x1334 <vfprintf+0x5be>
    131a:	fe 01       	movw	r30, r28
    131c:	ec 0d       	add	r30, r12
    131e:	f1 1d       	adc	r31, r1
    1320:	80 81       	ld	r24, Z
    1322:	80 33       	cpi	r24, 0x30	; 48
    1324:	11 f4       	brne	.+4      	; 0x132a <vfprintf+0x5b4>
    1326:	09 7e       	andi	r16, 0xE9	; 233
    1328:	09 c0       	rjmp	.+18     	; 0x133c <vfprintf+0x5c6>
    132a:	02 ff       	sbrs	r16, 2
    132c:	06 c0       	rjmp	.+12     	; 0x133a <vfprintf+0x5c4>
    132e:	d3 94       	inc	r13
    1330:	d3 94       	inc	r13
    1332:	04 c0       	rjmp	.+8      	; 0x133c <vfprintf+0x5c6>
    1334:	80 2f       	mov	r24, r16
    1336:	86 78       	andi	r24, 0x86	; 134
    1338:	09 f0       	breq	.+2      	; 0x133c <vfprintf+0x5c6>
    133a:	d3 94       	inc	r13
    133c:	03 fd       	sbrc	r16, 3
    133e:	11 c0       	rjmp	.+34     	; 0x1362 <vfprintf+0x5ec>
    1340:	00 ff       	sbrs	r16, 0
    1342:	06 c0       	rjmp	.+12     	; 0x1350 <vfprintf+0x5da>
    1344:	1c 2d       	mov	r17, r12
    1346:	d5 14       	cp	r13, r5
    1348:	80 f4       	brcc	.+32     	; 0x136a <vfprintf+0x5f4>
    134a:	15 0d       	add	r17, r5
    134c:	1d 19       	sub	r17, r13
    134e:	0d c0       	rjmp	.+26     	; 0x136a <vfprintf+0x5f4>
    1350:	d5 14       	cp	r13, r5
    1352:	58 f4       	brcc	.+22     	; 0x136a <vfprintf+0x5f4>
    1354:	b7 01       	movw	r22, r14
    1356:	80 e2       	ldi	r24, 0x20	; 32
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    135e:	d3 94       	inc	r13
    1360:	f7 cf       	rjmp	.-18     	; 0x1350 <vfprintf+0x5da>
    1362:	d5 14       	cp	r13, r5
    1364:	10 f4       	brcc	.+4      	; 0x136a <vfprintf+0x5f4>
    1366:	5d 18       	sub	r5, r13
    1368:	01 c0       	rjmp	.+2      	; 0x136c <vfprintf+0x5f6>
    136a:	51 2c       	mov	r5, r1
    136c:	04 ff       	sbrs	r16, 4
    136e:	10 c0       	rjmp	.+32     	; 0x1390 <vfprintf+0x61a>
    1370:	b7 01       	movw	r22, r14
    1372:	80 e3       	ldi	r24, 0x30	; 48
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    137a:	02 ff       	sbrs	r16, 2
    137c:	17 c0       	rjmp	.+46     	; 0x13ac <vfprintf+0x636>
    137e:	01 fd       	sbrc	r16, 1
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <vfprintf+0x612>
    1382:	88 e7       	ldi	r24, 0x78	; 120
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 c0       	rjmp	.+4      	; 0x138c <vfprintf+0x616>
    1388:	88 e5       	ldi	r24, 0x58	; 88
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	b7 01       	movw	r22, r14
    138e:	0c c0       	rjmp	.+24     	; 0x13a8 <vfprintf+0x632>
    1390:	80 2f       	mov	r24, r16
    1392:	86 78       	andi	r24, 0x86	; 134
    1394:	59 f0       	breq	.+22     	; 0x13ac <vfprintf+0x636>
    1396:	01 ff       	sbrs	r16, 1
    1398:	02 c0       	rjmp	.+4      	; 0x139e <vfprintf+0x628>
    139a:	8b e2       	ldi	r24, 0x2B	; 43
    139c:	01 c0       	rjmp	.+2      	; 0x13a0 <vfprintf+0x62a>
    139e:	80 e2       	ldi	r24, 0x20	; 32
    13a0:	07 fd       	sbrc	r16, 7
    13a2:	8d e2       	ldi	r24, 0x2D	; 45
    13a4:	b7 01       	movw	r22, r14
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    13ac:	c1 16       	cp	r12, r17
    13ae:	38 f4       	brcc	.+14     	; 0x13be <vfprintf+0x648>
    13b0:	b7 01       	movw	r22, r14
    13b2:	80 e3       	ldi	r24, 0x30	; 48
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    13ba:	11 50       	subi	r17, 0x01	; 1
    13bc:	f7 cf       	rjmp	.-18     	; 0x13ac <vfprintf+0x636>
    13be:	ca 94       	dec	r12
    13c0:	f3 01       	movw	r30, r6
    13c2:	ec 0d       	add	r30, r12
    13c4:	f1 1d       	adc	r31, r1
    13c6:	80 81       	ld	r24, Z
    13c8:	b7 01       	movw	r22, r14
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    13d0:	c1 10       	cpse	r12, r1
    13d2:	f5 cf       	rjmp	.-22     	; 0x13be <vfprintf+0x648>
    13d4:	15 c0       	rjmp	.+42     	; 0x1400 <vfprintf+0x68a>
    13d6:	f4 e0       	ldi	r31, 0x04	; 4
    13d8:	f5 15       	cp	r31, r5
    13da:	60 f5       	brcc	.+88     	; 0x1434 <vfprintf+0x6be>
    13dc:	84 e0       	ldi	r24, 0x04	; 4
    13de:	58 1a       	sub	r5, r24
    13e0:	93 fe       	sbrs	r9, 3
    13e2:	1f c0       	rjmp	.+62     	; 0x1422 <vfprintf+0x6ac>
    13e4:	01 11       	cpse	r16, r1
    13e6:	27 c0       	rjmp	.+78     	; 0x1436 <vfprintf+0x6c0>
    13e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ea:	23 ff       	sbrs	r18, 3
    13ec:	2a c0       	rjmp	.+84     	; 0x1442 <vfprintf+0x6cc>
    13ee:	08 e6       	ldi	r16, 0x68	; 104
    13f0:	10 e0       	ldi	r17, 0x00	; 0
    13f2:	39 2d       	mov	r19, r9
    13f4:	30 71       	andi	r19, 0x10	; 16
    13f6:	93 2e       	mov	r9, r19
    13f8:	f8 01       	movw	r30, r16
    13fa:	84 91       	lpm	r24, Z
    13fc:	81 11       	cpse	r24, r1
    13fe:	24 c0       	rjmp	.+72     	; 0x1448 <vfprintf+0x6d2>
    1400:	55 20       	and	r5, r5
    1402:	09 f4       	brne	.+2      	; 0x1406 <vfprintf+0x690>
    1404:	e4 cc       	rjmp	.-1592   	; 0xdce <vfprintf+0x58>
    1406:	b7 01       	movw	r22, r14
    1408:	80 e2       	ldi	r24, 0x20	; 32
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    1410:	5a 94       	dec	r5
    1412:	f6 cf       	rjmp	.-20     	; 0x1400 <vfprintf+0x68a>
    1414:	f7 01       	movw	r30, r14
    1416:	86 81       	ldd	r24, Z+6	; 0x06
    1418:	97 81       	ldd	r25, Z+7	; 0x07
    141a:	26 c0       	rjmp	.+76     	; 0x1468 <vfprintf+0x6f2>
    141c:	8f ef       	ldi	r24, 0xFF	; 255
    141e:	9f ef       	ldi	r25, 0xFF	; 255
    1420:	23 c0       	rjmp	.+70     	; 0x1468 <vfprintf+0x6f2>
    1422:	b7 01       	movw	r22, r14
    1424:	80 e2       	ldi	r24, 0x20	; 32
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    142c:	5a 94       	dec	r5
    142e:	51 10       	cpse	r5, r1
    1430:	f8 cf       	rjmp	.-16     	; 0x1422 <vfprintf+0x6ac>
    1432:	d8 cf       	rjmp	.-80     	; 0x13e4 <vfprintf+0x66e>
    1434:	51 2c       	mov	r5, r1
    1436:	b7 01       	movw	r22, r14
    1438:	80 2f       	mov	r24, r16
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    1440:	d3 cf       	rjmp	.-90     	; 0x13e8 <vfprintf+0x672>
    1442:	0c e6       	ldi	r16, 0x6C	; 108
    1444:	10 e0       	ldi	r17, 0x00	; 0
    1446:	d5 cf       	rjmp	.-86     	; 0x13f2 <vfprintf+0x67c>
    1448:	91 10       	cpse	r9, r1
    144a:	80 52       	subi	r24, 0x20	; 32
    144c:	b7 01       	movw	r22, r14
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <fputc>
    1454:	0f 5f       	subi	r16, 0xFF	; 255
    1456:	1f 4f       	sbci	r17, 0xFF	; 255
    1458:	cf cf       	rjmp	.-98     	; 0x13f8 <vfprintf+0x682>
    145a:	23 e0       	ldi	r18, 0x03	; 3
    145c:	25 15       	cp	r18, r5
    145e:	10 f4       	brcc	.+4      	; 0x1464 <vfprintf+0x6ee>
    1460:	83 e0       	ldi	r24, 0x03	; 3
    1462:	bd cf       	rjmp	.-134    	; 0x13de <vfprintf+0x668>
    1464:	51 2c       	mov	r5, r1
    1466:	c0 cf       	rjmp	.-128    	; 0x13e8 <vfprintf+0x672>
    1468:	60 96       	adiw	r28, 0x10	; 16
    146a:	e2 e1       	ldi	r30, 0x12	; 18
    146c:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <__epilogue_restores__>

00001470 <__prologue_saves__>:
    1470:	2f 92       	push	r2
    1472:	3f 92       	push	r3
    1474:	4f 92       	push	r4
    1476:	5f 92       	push	r5
    1478:	6f 92       	push	r6
    147a:	7f 92       	push	r7
    147c:	8f 92       	push	r8
    147e:	9f 92       	push	r9
    1480:	af 92       	push	r10
    1482:	bf 92       	push	r11
    1484:	cf 92       	push	r12
    1486:	df 92       	push	r13
    1488:	ef 92       	push	r14
    148a:	ff 92       	push	r15
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	ca 1b       	sub	r28, r26
    149a:	db 0b       	sbc	r29, r27
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	09 94       	ijmp

000014a8 <__epilogue_restores__>:
    14a8:	2a 88       	ldd	r2, Y+18	; 0x12
    14aa:	39 88       	ldd	r3, Y+17	; 0x11
    14ac:	48 88       	ldd	r4, Y+16	; 0x10
    14ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    14b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    14b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    14b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    14b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    14b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    14ba:	b9 84       	ldd	r11, Y+9	; 0x09
    14bc:	c8 84       	ldd	r12, Y+8	; 0x08
    14be:	df 80       	ldd	r13, Y+7	; 0x07
    14c0:	ee 80       	ldd	r14, Y+6	; 0x06
    14c2:	fd 80       	ldd	r15, Y+5	; 0x05
    14c4:	0c 81       	ldd	r16, Y+4	; 0x04
    14c6:	1b 81       	ldd	r17, Y+3	; 0x03
    14c8:	aa 81       	ldd	r26, Y+2	; 0x02
    14ca:	b9 81       	ldd	r27, Y+1	; 0x01
    14cc:	ce 0f       	add	r28, r30
    14ce:	d1 1d       	adc	r29, r1
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
    14da:	ed 01       	movw	r28, r26
    14dc:	08 95       	ret

000014de <__ftoa_engine>:
    14de:	28 30       	cpi	r18, 0x08	; 8
    14e0:	08 f0       	brcs	.+2      	; 0x14e4 <__ftoa_engine+0x6>
    14e2:	27 e0       	ldi	r18, 0x07	; 7
    14e4:	33 27       	eor	r19, r19
    14e6:	da 01       	movw	r26, r20
    14e8:	99 0f       	add	r25, r25
    14ea:	31 1d       	adc	r19, r1
    14ec:	87 fd       	sbrc	r24, 7
    14ee:	91 60       	ori	r25, 0x01	; 1
    14f0:	00 96       	adiw	r24, 0x00	; 0
    14f2:	61 05       	cpc	r22, r1
    14f4:	71 05       	cpc	r23, r1
    14f6:	39 f4       	brne	.+14     	; 0x1506 <__ftoa_engine+0x28>
    14f8:	32 60       	ori	r19, 0x02	; 2
    14fa:	2e 5f       	subi	r18, 0xFE	; 254
    14fc:	3d 93       	st	X+, r19
    14fe:	30 e3       	ldi	r19, 0x30	; 48
    1500:	2a 95       	dec	r18
    1502:	e1 f7       	brne	.-8      	; 0x14fc <__ftoa_engine+0x1e>
    1504:	08 95       	ret
    1506:	9f 3f       	cpi	r25, 0xFF	; 255
    1508:	30 f0       	brcs	.+12     	; 0x1516 <__ftoa_engine+0x38>
    150a:	80 38       	cpi	r24, 0x80	; 128
    150c:	71 05       	cpc	r23, r1
    150e:	61 05       	cpc	r22, r1
    1510:	09 f0       	breq	.+2      	; 0x1514 <__ftoa_engine+0x36>
    1512:	3c 5f       	subi	r19, 0xFC	; 252
    1514:	3c 5f       	subi	r19, 0xFC	; 252
    1516:	3d 93       	st	X+, r19
    1518:	91 30       	cpi	r25, 0x01	; 1
    151a:	08 f0       	brcs	.+2      	; 0x151e <__ftoa_engine+0x40>
    151c:	80 68       	ori	r24, 0x80	; 128
    151e:	91 1d       	adc	r25, r1
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	1f 93       	push	r17
    1526:	0f 93       	push	r16
    1528:	ff 92       	push	r15
    152a:	ef 92       	push	r14
    152c:	19 2f       	mov	r17, r25
    152e:	98 7f       	andi	r25, 0xF8	; 248
    1530:	96 95       	lsr	r25
    1532:	e9 2f       	mov	r30, r25
    1534:	96 95       	lsr	r25
    1536:	96 95       	lsr	r25
    1538:	e9 0f       	add	r30, r25
    153a:	ff 27       	eor	r31, r31
    153c:	e6 53       	subi	r30, 0x36	; 54
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	99 27       	eor	r25, r25
    1542:	33 27       	eor	r19, r19
    1544:	ee 24       	eor	r14, r14
    1546:	ff 24       	eor	r15, r15
    1548:	a7 01       	movw	r20, r14
    154a:	e7 01       	movw	r28, r14
    154c:	05 90       	lpm	r0, Z+
    154e:	08 94       	sec
    1550:	07 94       	ror	r0
    1552:	28 f4       	brcc	.+10     	; 0x155e <__ftoa_engine+0x80>
    1554:	36 0f       	add	r19, r22
    1556:	e7 1e       	adc	r14, r23
    1558:	f8 1e       	adc	r15, r24
    155a:	49 1f       	adc	r20, r25
    155c:	51 1d       	adc	r21, r1
    155e:	66 0f       	add	r22, r22
    1560:	77 1f       	adc	r23, r23
    1562:	88 1f       	adc	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	06 94       	lsr	r0
    1568:	a1 f7       	brne	.-24     	; 0x1552 <__ftoa_engine+0x74>
    156a:	05 90       	lpm	r0, Z+
    156c:	07 94       	ror	r0
    156e:	28 f4       	brcc	.+10     	; 0x157a <__ftoa_engine+0x9c>
    1570:	e7 0e       	add	r14, r23
    1572:	f8 1e       	adc	r15, r24
    1574:	49 1f       	adc	r20, r25
    1576:	56 1f       	adc	r21, r22
    1578:	c1 1d       	adc	r28, r1
    157a:	77 0f       	add	r23, r23
    157c:	88 1f       	adc	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	66 1f       	adc	r22, r22
    1582:	06 94       	lsr	r0
    1584:	a1 f7       	brne	.-24     	; 0x156e <__ftoa_engine+0x90>
    1586:	05 90       	lpm	r0, Z+
    1588:	07 94       	ror	r0
    158a:	28 f4       	brcc	.+10     	; 0x1596 <__ftoa_engine+0xb8>
    158c:	f8 0e       	add	r15, r24
    158e:	49 1f       	adc	r20, r25
    1590:	56 1f       	adc	r21, r22
    1592:	c7 1f       	adc	r28, r23
    1594:	d1 1d       	adc	r29, r1
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	66 1f       	adc	r22, r22
    159c:	77 1f       	adc	r23, r23
    159e:	06 94       	lsr	r0
    15a0:	a1 f7       	brne	.-24     	; 0x158a <__ftoa_engine+0xac>
    15a2:	05 90       	lpm	r0, Z+
    15a4:	07 94       	ror	r0
    15a6:	20 f4       	brcc	.+8      	; 0x15b0 <__ftoa_engine+0xd2>
    15a8:	49 0f       	add	r20, r25
    15aa:	56 1f       	adc	r21, r22
    15ac:	c7 1f       	adc	r28, r23
    15ae:	d8 1f       	adc	r29, r24
    15b0:	99 0f       	add	r25, r25
    15b2:	66 1f       	adc	r22, r22
    15b4:	77 1f       	adc	r23, r23
    15b6:	88 1f       	adc	r24, r24
    15b8:	06 94       	lsr	r0
    15ba:	a9 f7       	brne	.-22     	; 0x15a6 <__ftoa_engine+0xc8>
    15bc:	84 91       	lpm	r24, Z
    15be:	10 95       	com	r17
    15c0:	17 70       	andi	r17, 0x07	; 7
    15c2:	41 f0       	breq	.+16     	; 0x15d4 <__ftoa_engine+0xf6>
    15c4:	d6 95       	lsr	r29
    15c6:	c7 95       	ror	r28
    15c8:	57 95       	ror	r21
    15ca:	47 95       	ror	r20
    15cc:	f7 94       	ror	r15
    15ce:	e7 94       	ror	r14
    15d0:	1a 95       	dec	r17
    15d2:	c1 f7       	brne	.-16     	; 0x15c4 <__ftoa_engine+0xe6>
    15d4:	e0 e7       	ldi	r30, 0x70	; 112
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	68 94       	set
    15da:	15 90       	lpm	r1, Z+
    15dc:	15 91       	lpm	r17, Z+
    15de:	35 91       	lpm	r19, Z+
    15e0:	65 91       	lpm	r22, Z+
    15e2:	95 91       	lpm	r25, Z+
    15e4:	05 90       	lpm	r0, Z+
    15e6:	7f e2       	ldi	r23, 0x2F	; 47
    15e8:	73 95       	inc	r23
    15ea:	e1 18       	sub	r14, r1
    15ec:	f1 0a       	sbc	r15, r17
    15ee:	43 0b       	sbc	r20, r19
    15f0:	56 0b       	sbc	r21, r22
    15f2:	c9 0b       	sbc	r28, r25
    15f4:	d0 09       	sbc	r29, r0
    15f6:	c0 f7       	brcc	.-16     	; 0x15e8 <__ftoa_engine+0x10a>
    15f8:	e1 0c       	add	r14, r1
    15fa:	f1 1e       	adc	r15, r17
    15fc:	43 1f       	adc	r20, r19
    15fe:	56 1f       	adc	r21, r22
    1600:	c9 1f       	adc	r28, r25
    1602:	d0 1d       	adc	r29, r0
    1604:	7e f4       	brtc	.+30     	; 0x1624 <__ftoa_engine+0x146>
    1606:	70 33       	cpi	r23, 0x30	; 48
    1608:	11 f4       	brne	.+4      	; 0x160e <__ftoa_engine+0x130>
    160a:	8a 95       	dec	r24
    160c:	e6 cf       	rjmp	.-52     	; 0x15da <__ftoa_engine+0xfc>
    160e:	e8 94       	clt
    1610:	01 50       	subi	r16, 0x01	; 1
    1612:	30 f0       	brcs	.+12     	; 0x1620 <__ftoa_engine+0x142>
    1614:	08 0f       	add	r16, r24
    1616:	0a f4       	brpl	.+2      	; 0x161a <__ftoa_engine+0x13c>
    1618:	00 27       	eor	r16, r16
    161a:	02 17       	cp	r16, r18
    161c:	08 f4       	brcc	.+2      	; 0x1620 <__ftoa_engine+0x142>
    161e:	20 2f       	mov	r18, r16
    1620:	23 95       	inc	r18
    1622:	02 2f       	mov	r16, r18
    1624:	7a 33       	cpi	r23, 0x3A	; 58
    1626:	28 f0       	brcs	.+10     	; 0x1632 <__ftoa_engine+0x154>
    1628:	79 e3       	ldi	r23, 0x39	; 57
    162a:	7d 93       	st	X+, r23
    162c:	2a 95       	dec	r18
    162e:	e9 f7       	brne	.-6      	; 0x162a <__ftoa_engine+0x14c>
    1630:	10 c0       	rjmp	.+32     	; 0x1652 <__ftoa_engine+0x174>
    1632:	7d 93       	st	X+, r23
    1634:	2a 95       	dec	r18
    1636:	89 f6       	brne	.-94     	; 0x15da <__ftoa_engine+0xfc>
    1638:	06 94       	lsr	r0
    163a:	97 95       	ror	r25
    163c:	67 95       	ror	r22
    163e:	37 95       	ror	r19
    1640:	17 95       	ror	r17
    1642:	17 94       	ror	r1
    1644:	e1 18       	sub	r14, r1
    1646:	f1 0a       	sbc	r15, r17
    1648:	43 0b       	sbc	r20, r19
    164a:	56 0b       	sbc	r21, r22
    164c:	c9 0b       	sbc	r28, r25
    164e:	d0 09       	sbc	r29, r0
    1650:	98 f0       	brcs	.+38     	; 0x1678 <__ftoa_engine+0x19a>
    1652:	23 95       	inc	r18
    1654:	7e 91       	ld	r23, -X
    1656:	73 95       	inc	r23
    1658:	7a 33       	cpi	r23, 0x3A	; 58
    165a:	08 f0       	brcs	.+2      	; 0x165e <__ftoa_engine+0x180>
    165c:	70 e3       	ldi	r23, 0x30	; 48
    165e:	7c 93       	st	X, r23
    1660:	20 13       	cpse	r18, r16
    1662:	b8 f7       	brcc	.-18     	; 0x1652 <__ftoa_engine+0x174>
    1664:	7e 91       	ld	r23, -X
    1666:	70 61       	ori	r23, 0x10	; 16
    1668:	7d 93       	st	X+, r23
    166a:	30 f0       	brcs	.+12     	; 0x1678 <__ftoa_engine+0x19a>
    166c:	83 95       	inc	r24
    166e:	71 e3       	ldi	r23, 0x31	; 49
    1670:	7d 93       	st	X+, r23
    1672:	70 e3       	ldi	r23, 0x30	; 48
    1674:	2a 95       	dec	r18
    1676:	e1 f7       	brne	.-8      	; 0x1670 <__ftoa_engine+0x192>
    1678:	11 24       	eor	r1, r1
    167a:	ef 90       	pop	r14
    167c:	ff 90       	pop	r15
    167e:	0f 91       	pop	r16
    1680:	1f 91       	pop	r17
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	99 27       	eor	r25, r25
    1688:	87 fd       	sbrc	r24, 7
    168a:	90 95       	com	r25
    168c:	08 95       	ret

0000168e <strnlen_P>:
    168e:	fc 01       	movw	r30, r24
    1690:	05 90       	lpm	r0, Z+
    1692:	61 50       	subi	r22, 0x01	; 1
    1694:	70 40       	sbci	r23, 0x00	; 0
    1696:	01 10       	cpse	r0, r1
    1698:	d8 f7       	brcc	.-10     	; 0x1690 <strnlen_P+0x2>
    169a:	80 95       	com	r24
    169c:	90 95       	com	r25
    169e:	8e 0f       	add	r24, r30
    16a0:	9f 1f       	adc	r25, r31
    16a2:	08 95       	ret

000016a4 <strnlen>:
    16a4:	fc 01       	movw	r30, r24
    16a6:	61 50       	subi	r22, 0x01	; 1
    16a8:	70 40       	sbci	r23, 0x00	; 0
    16aa:	01 90       	ld	r0, Z+
    16ac:	01 10       	cpse	r0, r1
    16ae:	d8 f7       	brcc	.-10     	; 0x16a6 <strnlen+0x2>
    16b0:	80 95       	com	r24
    16b2:	90 95       	com	r25
    16b4:	8e 0f       	add	r24, r30
    16b6:	9f 1f       	adc	r25, r31
    16b8:	08 95       	ret

000016ba <fputc>:
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	fb 01       	movw	r30, r22
    16c4:	23 81       	ldd	r18, Z+3	; 0x03
    16c6:	21 fd       	sbrc	r18, 1
    16c8:	03 c0       	rjmp	.+6      	; 0x16d0 <fputc+0x16>
    16ca:	8f ef       	ldi	r24, 0xFF	; 255
    16cc:	9f ef       	ldi	r25, 0xFF	; 255
    16ce:	2c c0       	rjmp	.+88     	; 0x1728 <fputc+0x6e>
    16d0:	22 ff       	sbrs	r18, 2
    16d2:	16 c0       	rjmp	.+44     	; 0x1700 <fputc+0x46>
    16d4:	46 81       	ldd	r20, Z+6	; 0x06
    16d6:	57 81       	ldd	r21, Z+7	; 0x07
    16d8:	24 81       	ldd	r18, Z+4	; 0x04
    16da:	35 81       	ldd	r19, Z+5	; 0x05
    16dc:	42 17       	cp	r20, r18
    16de:	53 07       	cpc	r21, r19
    16e0:	44 f4       	brge	.+16     	; 0x16f2 <fputc+0x38>
    16e2:	a0 81       	ld	r26, Z
    16e4:	b1 81       	ldd	r27, Z+1	; 0x01
    16e6:	9d 01       	movw	r18, r26
    16e8:	2f 5f       	subi	r18, 0xFF	; 255
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
    16ec:	31 83       	std	Z+1, r19	; 0x01
    16ee:	20 83       	st	Z, r18
    16f0:	8c 93       	st	X, r24
    16f2:	26 81       	ldd	r18, Z+6	; 0x06
    16f4:	37 81       	ldd	r19, Z+7	; 0x07
    16f6:	2f 5f       	subi	r18, 0xFF	; 255
    16f8:	3f 4f       	sbci	r19, 0xFF	; 255
    16fa:	37 83       	std	Z+7, r19	; 0x07
    16fc:	26 83       	std	Z+6, r18	; 0x06
    16fe:	14 c0       	rjmp	.+40     	; 0x1728 <fputc+0x6e>
    1700:	8b 01       	movw	r16, r22
    1702:	ec 01       	movw	r28, r24
    1704:	fb 01       	movw	r30, r22
    1706:	00 84       	ldd	r0, Z+8	; 0x08
    1708:	f1 85       	ldd	r31, Z+9	; 0x09
    170a:	e0 2d       	mov	r30, r0
    170c:	09 95       	icall
    170e:	89 2b       	or	r24, r25
    1710:	e1 f6       	brne	.-72     	; 0x16ca <fputc+0x10>
    1712:	d8 01       	movw	r26, r16
    1714:	16 96       	adiw	r26, 0x06	; 6
    1716:	8d 91       	ld	r24, X+
    1718:	9c 91       	ld	r25, X
    171a:	17 97       	sbiw	r26, 0x07	; 7
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	17 96       	adiw	r26, 0x07	; 7
    1720:	9c 93       	st	X, r25
    1722:	8e 93       	st	-X, r24
    1724:	16 97       	sbiw	r26, 0x06	; 6
    1726:	ce 01       	movw	r24, r28
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	08 95       	ret

00001732 <printf>:
    1732:	a0 e0       	ldi	r26, 0x00	; 0
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	ef e9       	ldi	r30, 0x9F	; 159
    1738:	fb e0       	ldi	r31, 0x0B	; 11
    173a:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__prologue_saves__+0x20>
    173e:	ae 01       	movw	r20, r28
    1740:	4b 5f       	subi	r20, 0xFB	; 251
    1742:	5f 4f       	sbci	r21, 0xFF	; 255
    1744:	fa 01       	movw	r30, r20
    1746:	61 91       	ld	r22, Z+
    1748:	71 91       	ld	r23, Z+
    174a:	af 01       	movw	r20, r30
    174c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__iob+0x2>
    1750:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__iob+0x3>
    1754:	0e 94 bb 06 	call	0xd76	; 0xd76 <vfprintf>
    1758:	e2 e0       	ldi	r30, 0x02	; 2
    175a:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__epilogue_restores__+0x20>

0000175e <__ultoa_invert>:
    175e:	fa 01       	movw	r30, r20
    1760:	aa 27       	eor	r26, r26
    1762:	28 30       	cpi	r18, 0x08	; 8
    1764:	51 f1       	breq	.+84     	; 0x17ba <__ultoa_invert+0x5c>
    1766:	20 31       	cpi	r18, 0x10	; 16
    1768:	81 f1       	breq	.+96     	; 0x17ca <__ultoa_invert+0x6c>
    176a:	e8 94       	clt
    176c:	6f 93       	push	r22
    176e:	6e 7f       	andi	r22, 0xFE	; 254
    1770:	6e 5f       	subi	r22, 0xFE	; 254
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
    1774:	8f 4f       	sbci	r24, 0xFF	; 255
    1776:	9f 4f       	sbci	r25, 0xFF	; 255
    1778:	af 4f       	sbci	r26, 0xFF	; 255
    177a:	b1 e0       	ldi	r27, 0x01	; 1
    177c:	3e d0       	rcall	.+124    	; 0x17fa <__ultoa_invert+0x9c>
    177e:	b4 e0       	ldi	r27, 0x04	; 4
    1780:	3c d0       	rcall	.+120    	; 0x17fa <__ultoa_invert+0x9c>
    1782:	67 0f       	add	r22, r23
    1784:	78 1f       	adc	r23, r24
    1786:	89 1f       	adc	r24, r25
    1788:	9a 1f       	adc	r25, r26
    178a:	a1 1d       	adc	r26, r1
    178c:	68 0f       	add	r22, r24
    178e:	79 1f       	adc	r23, r25
    1790:	8a 1f       	adc	r24, r26
    1792:	91 1d       	adc	r25, r1
    1794:	a1 1d       	adc	r26, r1
    1796:	6a 0f       	add	r22, r26
    1798:	71 1d       	adc	r23, r1
    179a:	81 1d       	adc	r24, r1
    179c:	91 1d       	adc	r25, r1
    179e:	a1 1d       	adc	r26, r1
    17a0:	20 d0       	rcall	.+64     	; 0x17e2 <__ultoa_invert+0x84>
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <__ultoa_invert+0x48>
    17a4:	68 94       	set
    17a6:	3f 91       	pop	r19
    17a8:	2a e0       	ldi	r18, 0x0A	; 10
    17aa:	26 9f       	mul	r18, r22
    17ac:	11 24       	eor	r1, r1
    17ae:	30 19       	sub	r19, r0
    17b0:	30 5d       	subi	r19, 0xD0	; 208
    17b2:	31 93       	st	Z+, r19
    17b4:	de f6       	brtc	.-74     	; 0x176c <__ultoa_invert+0xe>
    17b6:	cf 01       	movw	r24, r30
    17b8:	08 95       	ret
    17ba:	46 2f       	mov	r20, r22
    17bc:	47 70       	andi	r20, 0x07	; 7
    17be:	40 5d       	subi	r20, 0xD0	; 208
    17c0:	41 93       	st	Z+, r20
    17c2:	b3 e0       	ldi	r27, 0x03	; 3
    17c4:	0f d0       	rcall	.+30     	; 0x17e4 <__ultoa_invert+0x86>
    17c6:	c9 f7       	brne	.-14     	; 0x17ba <__ultoa_invert+0x5c>
    17c8:	f6 cf       	rjmp	.-20     	; 0x17b6 <__ultoa_invert+0x58>
    17ca:	46 2f       	mov	r20, r22
    17cc:	4f 70       	andi	r20, 0x0F	; 15
    17ce:	40 5d       	subi	r20, 0xD0	; 208
    17d0:	4a 33       	cpi	r20, 0x3A	; 58
    17d2:	18 f0       	brcs	.+6      	; 0x17da <__ultoa_invert+0x7c>
    17d4:	49 5d       	subi	r20, 0xD9	; 217
    17d6:	31 fd       	sbrc	r19, 1
    17d8:	40 52       	subi	r20, 0x20	; 32
    17da:	41 93       	st	Z+, r20
    17dc:	02 d0       	rcall	.+4      	; 0x17e2 <__ultoa_invert+0x84>
    17de:	a9 f7       	brne	.-22     	; 0x17ca <__ultoa_invert+0x6c>
    17e0:	ea cf       	rjmp	.-44     	; 0x17b6 <__ultoa_invert+0x58>
    17e2:	b4 e0       	ldi	r27, 0x04	; 4
    17e4:	a6 95       	lsr	r26
    17e6:	97 95       	ror	r25
    17e8:	87 95       	ror	r24
    17ea:	77 95       	ror	r23
    17ec:	67 95       	ror	r22
    17ee:	ba 95       	dec	r27
    17f0:	c9 f7       	brne	.-14     	; 0x17e4 <__ultoa_invert+0x86>
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	61 05       	cpc	r22, r1
    17f6:	71 05       	cpc	r23, r1
    17f8:	08 95       	ret
    17fa:	9b 01       	movw	r18, r22
    17fc:	ac 01       	movw	r20, r24
    17fe:	0a 2e       	mov	r0, r26
    1800:	06 94       	lsr	r0
    1802:	57 95       	ror	r21
    1804:	47 95       	ror	r20
    1806:	37 95       	ror	r19
    1808:	27 95       	ror	r18
    180a:	ba 95       	dec	r27
    180c:	c9 f7       	brne	.-14     	; 0x1800 <__ultoa_invert+0xa2>
    180e:	62 0f       	add	r22, r18
    1810:	73 1f       	adc	r23, r19
    1812:	84 1f       	adc	r24, r20
    1814:	95 1f       	adc	r25, r21
    1816:	a0 1d       	adc	r26, r0
    1818:	08 95       	ret

0000181a <eeprom_read_byte>:
    181a:	f9 99       	sbic	0x1f, 1	; 31
    181c:	fe cf       	rjmp	.-4      	; 0x181a <eeprom_read_byte>
    181e:	92 bd       	out	0x22, r25	; 34
    1820:	81 bd       	out	0x21, r24	; 33
    1822:	f8 9a       	sbi	0x1f, 0	; 31
    1824:	99 27       	eor	r25, r25
    1826:	80 b5       	in	r24, 0x20	; 32
    1828:	08 95       	ret

0000182a <eeprom_write_byte>:
    182a:	26 2f       	mov	r18, r22

0000182c <eeprom_write_r18>:
    182c:	f9 99       	sbic	0x1f, 1	; 31
    182e:	fe cf       	rjmp	.-4      	; 0x182c <eeprom_write_r18>
    1830:	1f ba       	out	0x1f, r1	; 31
    1832:	92 bd       	out	0x22, r25	; 34
    1834:	81 bd       	out	0x21, r24	; 33
    1836:	20 bd       	out	0x20, r18	; 32
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	fa 9a       	sbi	0x1f, 2	; 31
    183e:	f9 9a       	sbi	0x1f, 1	; 31
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	08 95       	ret

00001846 <_exit>:
    1846:	f8 94       	cli

00001848 <__stop_program>:
    1848:	ff cf       	rjmp	.-2      	; 0x1848 <__stop_program>
