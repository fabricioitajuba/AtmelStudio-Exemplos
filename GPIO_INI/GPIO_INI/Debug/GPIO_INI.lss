
GPIO_INI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000089c  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000720  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002da  00000000  00000000  000011fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000014d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047a  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e4  00000000  00000000  000019a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001a8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  78:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z7pinModePVhhb>:

//Lê o pino
uint8_t digitalRead(uint8_t volatile *port_input_pin_register, uint8_t pin){
	
	return ((*port_input_pin_register) & (1 << pin));
}
  80:	44 23       	and	r20, r20
  82:	61 f0       	breq	.+24     	; 0x9c <_Z7pinModePVhhb+0x1c>
  84:	fc 01       	movw	r30, r24
  86:	40 81       	ld	r20, Z
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <_Z7pinModePVhhb+0x12>
  8e:	22 0f       	add	r18, r18
  90:	33 1f       	adc	r19, r19
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <_Z7pinModePVhhb+0xe>
  96:	24 2b       	or	r18, r20
  98:	20 83       	st	Z, r18
  9a:	08 95       	ret
  9c:	41 11       	cpse	r20, r1
  9e:	0c c0       	rjmp	.+24     	; 0xb8 <_Z7pinModePVhhb+0x38>
  a0:	fc 01       	movw	r30, r24
  a2:	40 81       	ld	r20, Z
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <_Z7pinModePVhhb+0x2e>
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <_Z7pinModePVhhb+0x2a>
  b2:	20 95       	com	r18
  b4:	24 23       	and	r18, r20
  b6:	20 83       	st	Z, r18
  b8:	08 95       	ret

000000ba <_Z12digitalWritePVhhb>:
  ba:	44 23       	and	r20, r20
  bc:	61 f0       	breq	.+24     	; 0xd6 <_Z12digitalWritePVhhb+0x1c>
  be:	fc 01       	movw	r30, r24
  c0:	40 81       	ld	r20, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <_Z12digitalWritePVhhb+0x12>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <_Z12digitalWritePVhhb+0xe>
  d0:	24 2b       	or	r18, r20
  d2:	20 83       	st	Z, r18
  d4:	08 95       	ret
  d6:	41 11       	cpse	r20, r1
  d8:	0c c0       	rjmp	.+24     	; 0xf2 <_Z12digitalWritePVhhb+0x38>
  da:	fc 01       	movw	r30, r24
  dc:	40 81       	ld	r20, Z
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <_Z12digitalWritePVhhb+0x2e>
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <_Z12digitalWritePVhhb+0x2a>
  ec:	20 95       	com	r18
  ee:	24 23       	and	r18, r20
  f0:	20 83       	st	Z, r18
  f2:	08 95       	ret

000000f4 <main>:

int main(void)
{
	//Configura o pino B5 como saída
    pinMode(&DDRB, DDB5, OUTPUT);
  f4:	41 e0       	ldi	r20, 0x01	; 1
  f6:	65 e0       	ldi	r22, 0x05	; 5
  f8:	84 e2       	ldi	r24, 0x24	; 36
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 40 00 	call	0x80	; 0x80 <_Z7pinModePVhhb>
	
    while (1) 
    {

		digitalWrite(&PORTB, PB5, HIGH); //Coloca o pino B5 em HIGH
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	65 e0       	ldi	r22, 0x05	; 5
 104:	85 e2       	ldi	r24, 0x25	; 37
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 5d 00 	call	0xba	; 0xba <_Z12digitalWritePVhhb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	80 e7       	ldi	r24, 0x70	; 112
 110:	92 e0       	ldi	r25, 0x02	; 2
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x1e>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x28>
 11c:	00 00       	nop
		_delay_ms(50);
		digitalWrite(&PORTB, PB5, LOW); //Coloca o pino B5 em LOW
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	65 e0       	ldi	r22, 0x05	; 5
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 5d 00 	call	0xba	; 0xba <_Z12digitalWritePVhhb>
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	80 e7       	ldi	r24, 0x70	; 112
 12e:	92 e0       	ldi	r25, 0x02	; 2
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x3c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x46>
 13a:	00 00       	nop
 13c:	e1 cf       	rjmp	.-62     	; 0x100 <main+0xc>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
